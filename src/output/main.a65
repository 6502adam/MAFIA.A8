; ------------------------------------------------------------
; Mad Pascal Compiler version 1.7.0 [2023/11/24] for 6502
; ------------------------------------------------------------

STACKWIDTH	= 16
CODEORIGIN	= $0C00

TRUE		= 1
FALSE		= 0

; ------------------------------------------------------------

	org $80

zpage

.if .def(@vbxe_detect)
fxptr	.ds 2						; VBXE pointer
.fi

.if .def(@AllocMem)||.def(MAIN.SYSTEM.GETMEM)||.def(MAIN.SYSTEM.FREEMEM)
psptr	.ds 2						; PROGRAMSTACK Pointer
.fi

bp	.ds 2
bp2	.ds 2

eax	.ds 4						;8 bytes (aex + edx) -> divREAL
edx	.ds 4
ecx	.ds 4

TMP
ztmp
ztmp8	.ds 1
ztmp9	.ds 1
ztmp10	.ds 1
ztmp11	.ds 1

STACKORIGIN	.ds STACKWIDTH*4
zpend

; ------------------------------------------------------------

ax	= eax
al	= eax
ah	= eax+1

cx	= ecx
cl	= ecx
ch	= ecx+1

dx	= edx
dl	= edx
dh	= edx+1

	org eax

FP1MAN0	.ds 1
FP1MAN1	.ds 1
FP1MAN2	.ds 1
FP1MAN3	.ds 1

	org ztmp8

FP1SGN	.ds 1
FP1EXP	.ds 1

	org edx

FP2MAN0	.ds 1
FP2MAN1	.ds 1
FP2MAN2	.ds 1
FP2MAN3	.ds 1

	org ztmp10

FP2SGN	.ds 1
FP2EXP	.ds 1

	org ecx

FPMAN0	.ds 1
FPMAN1	.ds 1
FPMAN2	.ds 1
FPMAN3	.ds 1

	org bp2

FPSGN	.ds 1
FPEXP	.ds 1

	.ifdef MAIN.@DEFINES.BASICOFF
	org CODEORIGIN
	icl 'atari\basicoff.asm'
	ini CODEORIGIN
	.fi

	.ifdef MAIN.@DEFINES.S_VBXE
	opt h-
	ins 'atari\s_vbxe\sdxld2.obx'
	opt h+
	.fi

	org CODEORIGIN

.local	MAIN.@RESOURCE
.endl

.local	RESOURCE
	icl 'atari\resource.asm'
	?EXTDETECT = 0
	?VBXDETECT = 0

	RCASM 'dlists/dlist_console.asm' DL_CONSOLE_ADR 0 0 0 0 0 0 0 0
	RCASM 'dlists/dlist_black_console.asm' DL_BLACK_CONSOLE_ADR 0 0 0 0 0 0 0 0
	RCASM 'dlists/dlist_map.asm' DL_MAP_ADR 0 0 0 0 0 0 0 0
	RCDATA '../assets/player.pmg' PMG_BASE_ADR 0 0 0 0 0 0 0 0
	RCDATA '../assets/mafia.fnt' MAINFONT_ADR 0 0 0 0 0 0 0 0
.endl

; ------------------------------------------------------------

	org CODEORIGIN

	STATICDATA

; ------------------------------------------------------------

RTLIB
	icl 'rtl6502_a8.asm'

.print 'ZPAGE: ',zpage,'..',zpend-1

.print 'RTBUF: ',@buf,'..',@buf+255

.print 'RTLIB: ',RTLIB,'..',*-1

; ------------------------------------------------------------

START
	tsx
	stx MAIN.@halt+1

	.ifdef MAIN.@DEFINES.ROMOFF
	icl 'atari\romoff.asm'
	.fi

VLEN	= VARDATASIZE-VARINITSIZE
VADR	= DATAORIGIN+VARINITSIZE

	ift VADR > $BFFF
	ert 'Invalid memory address range ',VADR
	eli (VLEN > 0) && (VLEN <= 256)
	ldx #256-VLEN
	lda #$00
	sta:rne VADR+VLEN-256,x+
	eli VLEN>256
	m@init
	eif

.ifdef psptr
	mwa #PROGRAMSTACK psptr
.fi

	ldx #$0F					; DOS II+/D ParamStr
	mva:rpl $340,x MAIN.IOCB@COPY,x-

	inx						; X = 0
	stx bp						; BP = 0

	stx audctl					; reset POKEY
	stx audctl+$10
	lda #3
	sta skctl
	sta skctl+$10

	dex						; X = 255

	UNITINITIALIZATION

.local	MAIN						; PROCEDURE

	jmp l_0261

; ------------------------------------------------------------

.local	SYSTEM						; UNIT

.local	PEEK						; FUNCTION | ASSEMBLER | REGISTER

; ------------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	lda :STACKORIGIN,x
	sta A
	lda :STACKORIGIN+STACKWIDTH,x
	sta A+1
	dex
@main

; -------------------  ASM Block 00000002  -------------------

	ldy #0
	mva (:edx),y Result

@exit

; ------------------------------------------------------------

; Push BYTE / CHAR / SHORTINT / BOOLEAN
; as Pointer

	inx
	mva RESULT :STACKORIGIN,x

	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	eif

; ------------------------------------------------------------

A	= :EDX
RESULT	= :STACKORIGIN-4
	rts						; ret
.endl

.local	DPEEK						; FUNCTION | ASSEMBLER | REGISTER

; ------------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	lda :STACKORIGIN,x
	sta A
	lda :STACKORIGIN+STACKWIDTH,x
	sta A+1
	dex
@main

; -------------------  ASM Block 00000003  -------------------

	ldy #0
	mva (:edx),y Result
	iny
	mva (:edx),y Result+1

@exit

; ------------------------------------------------------------

; Push WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer

	inx
	mva RESULT :STACKORIGIN,x
	mva RESULT+1 :STACKORIGIN+STACKWIDTH,x

	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	eif

; ------------------------------------------------------------

A	= :EDX
RESULT	= :STACKORIGIN-4
	rts						; ret
.endl

.local	POKE						; PROCEDURE | ASSEMBLER | REGISTER

; ------------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	lda :STACKORIGIN,x
	sta A
	lda :STACKORIGIN+STACKWIDTH,x
	sta A+1
	dex
	jmi @main

; ------------------------------------------------------------

; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
; as Pointer
	lda :STACKORIGIN,x
	sta VALUE
	dex
@main

; -------------------  ASM Block 00000024  -------------------

	ldy #0
	mva value (:edx),y

; ------------------------------------------------------------

A	= :EDX
VALUE	= :ECX
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	DPOKE						; PROCEDURE | ASSEMBLER | REGISTER

; ------------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	lda :STACKORIGIN,x
	sta A
	lda :STACKORIGIN+STACKWIDTH,x
	sta A+1
	dex
	jmi @main

; ------------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	lda :STACKORIGIN,x
	sta VALUE
	lda :STACKORIGIN+STACKWIDTH,x
	sta VALUE+1
	dex
@main

; -------------------  ASM Block 00000025  -------------------

	ldy #0
	mva value (:edx),y
	iny
	mva value+1 (:edx),y

; ------------------------------------------------------------

A	= :EDX
VALUE	= :ECX
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	FILLCHAR_02BA					; PROCEDURE | ASSEMBLER | OVERLOAD | REGISTER | INLINE

	.MACRO m@INLINE

; -------------------  ASM Block 00000026  -------------------

	jsr @fill

	.ENDM

; ------------------------------------------------------------

A	= :EDX
COUNT	= :ECX
VALUE	= :EAX
@exit
.endl

.local	FILLCHAR_02BB					; PROCEDURE | ASSEMBLER | OVERLOAD | REGISTER | INLINE

	.MACRO m@INLINE

; -------------------  ASM Block 00000027  -------------------

	jsr @fill

	.ENDM

; ------------------------------------------------------------

A	= :EDX
COUNT	= :ECX
VALUE	= :EAX
@exit
.endl

.local	FILLCHAR_02BC					; PROCEDURE | ASSEMBLER | OVERLOAD | REGISTER | INLINE

	.MACRO m@INLINE

; -------------------  ASM Block 00000030  -------------------

	jsr @fill

	.ENDM

; ------------------------------------------------------------

A	= :EDX
COUNT	= :ECX
VALUE	= :EAX
@exit
.endl

.local	FILLBYTE_02BD					; PROCEDURE | ASSEMBLER | OVERLOAD | REGISTER | INLINE

	.MACRO m@INLINE

; -------------------  ASM Block 00000031  -------------------

	jsr @fill

	.ENDM

; ------------------------------------------------------------

A	= :EDX
COUNT	= :ECX
VALUE	= :EAX
@exit
.endl

.local	MOVE_02BE					; PROCEDURE | ASSEMBLER | OVERLOAD | REGISTER | INLINE

	.MACRO m@INLINE

; -------------------  ASM Block 00000033  -------------------

	jsr @move

	.ENDM

; ------------------------------------------------------------

SOURCE	= :EDX
DEST	= :ECX
COUNT	= :EAX
@exit
.endl

.local	MOVE_02BF					; PROCEDURE | ASSEMBLER | OVERLOAD | REGISTER | INLINE

	.MACRO m@INLINE

; -------------------  ASM Block 00000035  -------------------

	jsr @move

	.ENDM

; ------------------------------------------------------------

SOURCE	= :EDX
DEST	= :ECX
COUNT	= :EAX
@exit
.endl

.local	RANDOMIZE					; PROCEDURE | ASSEMBLER

; -------------------  ASM Block 00000044  -------------------


  mva $d20a RndSeed
  mva #$00  RndSeed+1


@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	RANDOM_02E9					; FUNCTION | ASSEMBLER | OVERLOAD
	sta RANGE

; -------------------  ASM Block 00000048  -------------------


;BYTE FUNC Rand(BYTE range)
; returns random number between 0 and
; range-1.  If range=0, then a random
; number between 0 and 255 is returned

  ldy $d20a   ; RANDOM

  lda range
  beq stop

  sta :ecx
  sty :eax

  jsr imulCL
  tay

stop  sty Result


@exit

; ------------------------------------------------------------

RANGE	= DATAORIGIN+$000B
RESULT	= DATAORIGIN+$000C

@VarData	= RANGE
@VarDataSize	= 1

	rts						; ret
.endl

.local	RANDOM_02EA					; FUNCTION | OVERLOAD

; optimize OK (system_atari.inc), line = 176

	lda RANGE+1
	ora RANGE
	jne l_02FE

; optimize OK (system_atari.inc), line = 177

	lda #$00
	sta RESULT
	sta RESULT+1
	jmp l_030C
l_02FE

; optimize OK (system_atari.inc), line = 180

	lda RNDSEED
	sta :ecx
	lda RNDSEED+1
	sta :ecx+1
	lda #$95
	sta :eax
	lda #$45
	sta :eax+1
	.ifdef fmulinit
	fmulu_16
	els
	imulCX
	eif
	lda :eax
	sta RNDSEED
	lda :eax+1
	sta RNDSEED+1

; optimize OK (system_atari.inc), line = 181

	lda RANGE
	sta @SMALLINT.MOD.B
	lda RANGE+1
	sta @SMALLINT.MOD.B+1
	lda RNDSEED
	sta @SMALLINT.MOD.A
	lda RNDSEED+1
	sta @SMALLINT.MOD.A+1
	jsr @SMALLINT.MOD
	lda @SMALLINT.MOD.RESULT
	sta RESULT
	lda @SMALLINT.MOD.RESULT+1
	sta RESULT+1

; -------------------  ASM Block 00000049  -------------------

	lda range+1
	bpl plus

	lda Result+1
	bmi ok
	bpl sign

plus	lda Result+1
	bpl ok

sign 	lda #0
	sub Result
	sta Result

	lda #0
	sbc Result+1
	sta Result+1
ok

l_030C
@exit

; ------------------------------------------------------------

RANGE	= DATAORIGIN+$000D
RESULT	= DATAORIGIN+$000F

@VarData	= RANGE
@VarDataSize	= 2

	rts						; ret
.endl

.local	CONCAT_032C					; FUNCTION | ASSEMBLER | OVERLOAD

; -------------------  ASM Block 00000052  -------------------

	cpw a #@buf
	beq skp

	mva #0 @buf
	@addString a
skp
	@addString b

	ldy #0
	mva:rne @buf,y adr.Result,y+

@exit

; ------------------------------------------------------------

A	= DATAORIGIN+$0011
B	= DATAORIGIN+$0013
adr.RESULT	= [DATAORIGIN+$0015] .array [256]
.var RESULT	= adr.RESULT .word

@VarData	= A
@VarDataSize	= 260

	rts						; ret
.endl

; ------------------------------------------------------------

__PORTB_BANKS	= $0101
M_PI_2	= $0648
D_PI_2	= $0192
D_PI_180	= $04
MGTIA	= $00
MVBXE	= $80
VBXE_XDLADR	= $00
VBXE_BCBTMP	= $E0
VBXE_BCBADR	= $0100
VBXE_MAPADR	= $1000
VBXE_CHBASE	= $1000
VBXE_OVRADR	= $5000
VBXE_WINDOW	= $B000
IDLI	= $00
IVBL	= $01
IVBLD	= $01
IVBLI	= $02
ITIM1	= $03
ITIM2	= $04
ITIM4	= $05
CH_DELCHR	= $FE
CH_ENTER	= $9B
CH_ESC	= $1B
CH_CURS_UP	= $1C
CH_CURS_DOWN	= $1D
CH_CURS_LEFT	= $1E
CH_CURS_RIGHT	= $1F
CH_TAB	= $7F
CH_EOL	= $9B
CH_CLR	= $7D
CH_BELL	= $FD
CH_DEL	= $7E
CH_DELLINE	= $9C
CH_INSLINE	= $9D
PAL_PMCOLOR0	= $00
PAL_PMCOLOR1	= $01
PAL_PMCOLOR2	= $02
PAL_PMCOLOR3	= $03
PAL_COLOR0	= $04
PAL_COLOR1	= $05
PAL_COLOR2	= $06
PAL_COLOR3	= $07
PAL_COLBAK	= $08
COLOR_BLACK	= $00
COLOR_WHITE	= $0E
COLOR_RED	= $32
COLOR_CYAN	= $96
COLOR_VIOLET	= $68
COLOR_GREEN	= $C4
COLOR_BLUE	= $74
COLOR_YELLOW	= $EE
COLOR_ORANGE	= $28
COLOR_BROWN	= $E4
COLOR_LIGHTRED	= $3C
COLOR_GRAY1	= $04
COLOR_GRAY2	= $06
COLOR_GRAY3	= $0A
COLOR_LIGHTGREEN	= $CC
COLOR_LIGHTBLUE	= $7C
FMOPENREAD	= $04
FMOPENWRITE	= $08
FMOPENAPPEND	= $09
FMOPENREADWRITE	= $0C
SCREENWIDTH	= DATAORIGIN+$0000
SCREENHEIGHT	= DATAORIGIN+$0002
DATESEPARATOR	= DATAORIGIN+$0004
RND	= $D20A
adr.PALETTE	= $02C0
.var PALETTE	= adr.PALETTE .word
adr.HPALETTE	= $D012
.var HPALETTE	= adr.HPALETTE .word
FILEMODE	= DATAORIGIN+$0005
GRAPHMODE	= DATAORIGIN+$0006
IORESULT	= DATAORIGIN+$0007
EOLN	= DATAORIGIN+$0008
RNDSEED	= DATAORIGIN+$0009

.endl							; UNIT SYSTEM

; ------------------------------------------------------------

.local	ATARI						; UNIT

; ------------------------------------------------------------

IRQENS	= $10
RTCLOK	= $12
RTCLOK1	= $12
RTCLOK2	= $13
RTCLOK3	= $14
ATRACT	= $4D
LMARGIN	= $52
RMARGIN	= $53
ROWCRS	= $54
COLCRS	= $55
DINDEX	= $57
SAVMSC	= $58
PALNTS	= $62
RAMTOP	= $6A
VDSLST	= $0200
SDLSTL	= $0230
TXTROW	= $0290
TXTCOL	= $0291
TINDEX	= $0293
TXTMSC	= $0294
SDMCTL	= $022F
GPRIOR	= $026F
CRSINH	= $02F0
CHACT	= $02F3
CHBAS	= $02F4
CH	= $02FC
FILDAT	= $02FD
PCOLR0	= $02C0
PCOLR1	= $02C1
PCOLR2	= $02C2
PCOLR3	= $02C3
COLOR0	= $02C4
COLOR1	= $02C5
COLOR2	= $02C6
COLOR3	= $02C7
COLOR4	= $02C8
COLBAKS	= $02C8
HPOSP0	= $D000
HPOSP1	= $D001
HPOSP2	= $D002
HPOSP3	= $D003
HPOSM0	= $D004
HPOSM1	= $D005
HPOSM2	= $D006
HPOSM3	= $D007
SIZEP0	= $D008
SIZEP1	= $D009
SIZEP2	= $D00A
SIZEP3	= $D00B
SIZEM	= $D00C
GRAFP0	= $D00D
GRAFP1	= $D00E
GRAFP2	= $D00F
GRAFP3	= $D010
GRAFM	= $D011
P0PF	= $D004
PAL	= $D014
TRIG3	= $D013
COLPM0	= $D012
COLPM1	= $D013
COLPM2	= $D014
COLPM3	= $D015
COLPF0	= $D016
COLPF1	= $D017
COLPF2	= $D018
COLPF3	= $D019
COLBK	= $D01A
PRIOR	= $D01B
GRACTL	= $D01D
HITCLR	= $D01E
CONSOL	= $D01F
AUDF1	= $D200
AUDC1	= $D201
AUDF2	= $D202
AUDC2	= $D203
AUDF3	= $D204
AUDC3	= $D205
AUDF4	= $D206
AUDC4	= $D207
AUDCTL	= $D208
KBCODE	= $D209
IRQEN	= $D20E
SKSTAT	= $D20F
PORTA	= $D300
PORTB	= $D301
PACTL	= $D302
DMACTL	= $D400
CHACTL	= $D401
DLISTL	= $D402
HSCROL	= $D404
VSCROL	= $D405
PMBASE	= $D407
CHBASE	= $D409
WSYNC	= $D40A
VCOUNT	= $D40B
PENH	= $D40C
PENV	= $D40D
NMIEN	= $D40E
NMIVEC	= $FFFA
RESETVEC	= $FFFC
IRQVEC	= $FFFE

.endl							; UNIT ATARI

; ------------------------------------------------------------

.local	JOYSTICK					; UNIT

; ------------------------------------------------------------

JOY_NONE	= $0F
JOY_UP	= $0E
JOY_DOWN	= $0D
JOY_LEFT	= $0B
JOY_LEFT_UP	= $0A
JOY_LEFT_DOWN	= $09
JOY_RIGHT	= $07
JOY_RIGHT_UP	= $06
JOY_RIGHT_DOWN	= $05
JOY_1	= $0278
JOY_2	= $0279
adr.STICK	= $0278
.var STICK	= adr.STICK .word
STICK0	= $0278
STICK1	= $0279
adr.STRIG	= $0284
.var STRIG	= adr.STRIG .word
STRIG0	= $0284
STRIG1	= $0285
adr.PADDL	= $0270
.var PADDL	= adr.PADDL .word
PADDL0	= $0270
PADDL1	= $0271
PADDL2	= $0272
PADDL3	= $0273
PADDL4	= $0274
PADDL5	= $0275
PADDL6	= $0276
PADDL7	= $0277
adr.PTRIG	= $027C
.var PTRIG	= adr.PTRIG .word
PTRIG0	= $027C
PTRIG1	= $027D
PTRIG2	= $027E
PTRIG3	= $027F
PTRIG4	= $0280
PTRIG5	= $0281
PTRIG6	= $0282
PTRIG7	= $0283
TRIG0	= $D010
TRIG1	= $D011
POT0	= $D200
ALLPOT	= $D208
POTGO	= $D20B

.endl							; UNIT JOYSTICK

; ------------------------------------------------------------

.local	MATH						; UNIT

; ------------------------------------------------------------

.endl							; UNIT MATH

; ------------------------------------------------------------

.local	PMG						; UNIT

; ------------------------------------------------------------

_P_MAX	= $0E
_M0_MAX	= $02
_M1_MAX	= $00
_M2_MAX	= $03
_M3_MAX	= $04
_PM_NORMAL_SIZE	= $00
_PM_DOUBLE_SIZE	= $01
_PM_QUAD_SIZE	= $03
_PM_SHOW_ON	= $03
_PM_SHOW_OFF	= $00
_PM_DOUBLE_RES	= $01
_PM_SINGLE_RES	= $02
adr.P_DATA	= [DATAORIGIN+$0115] .array [4] .word
.var P_DATA	= adr.P_DATA .word
adr.M_DATA	= [DATAORIGIN+$011D] .array [4] .word
.var M_DATA	= adr.M_DATA .word
PM_MEM	= DATAORIGIN+$0125
PM_OFFSET	= DATAORIGIN+$0127
PM_TOP	= DATAORIGIN+$0129
PM_SIZE	= DATAORIGIN+$012A

.endl							; UNIT PMG

; ------------------------------------------------------------

.local	XBIOS						; UNIT

.local	XBIOSOPENFILE					; PROCEDURE | ASSEMBLER

; -------------------  ASM Block 00000063  -------------------


    txa:pha
    mva #0 xBiosIOresult
    sta xBiosIOerror
    ldy filename
    ldx filename+1
    iny
    sne
    inx
    jsr xBIOS_OPEN_FILE
    bcc @+
    stx xBiosIOerror
    mva #1 xBiosIOresult 
@   pla:tax

; ------------------------------------------------------------

FILENAME	= DATAORIGIN+$0132

@VarData	= FILENAME
@VarDataSize	= 2

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	XBIOSLOADDATA					; PROCEDURE | ASSEMBLER

; -------------------  ASM Block 00000064  -------------------


    txa:pha
    mva #0 xBiosIOresult
    sta xBiosIOerror
    ldy dest
    ldx dest+1
    jsr xBIOS_LOAD_DATA
    bcc @+
    stx xBiosIOerror
    mva #1 xBiosIOresult 
@   pla:tax

; ------------------------------------------------------------

DEST	= DATAORIGIN+$0134

@VarData	= DEST
@VarDataSize	= 2

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	XBIOSWRITEDATA					; PROCEDURE | ASSEMBLER

; -------------------  ASM Block 00000066  -------------------


    txa:pha
    mva #0 xBiosIOresult
    sta xBiosIOerror
    ldy src
    ldx src+1
    jsr xBIOS_WRITE_DATA 
    bcc @+
    stx xBiosIOerror
    mva #1 xBiosIOresult 
@   pla:tax

; ------------------------------------------------------------

SRC	= DATAORIGIN+$0136

@VarData	= SRC
@VarDataSize	= 2

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	XBIOSGETBYTE					; FUNCTION | ASSEMBLER

; -------------------  ASM Block 00000068  -------------------


    txa:pha
    mva #0 xBiosIOresult
    sta xBiosIOerror
    jsr xBIOS_GET_BYTE  
    sta result
    bcc @+
    stx xBiosIOerror
    mva #1 xBiosIOresult 
@   pla:tax

@exit

; ------------------------------------------------------------

RESULT	= DATAORIGIN+$0138
	rts						; ret
.endl

.local	XBIOSFLUSHBUFFER				; PROCEDURE | ASSEMBLER

; -------------------  ASM Block 00000070  -------------------


    txa:pha
    mva #0 xBiosIOresult
    sta xBiosIOerror
    jsr xBIOS_FLUSH_BUFFER
    bcc @+
    stx xBiosIOerror
    mva #1 xBiosIOresult 
@   pla:tax

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	XBIOSSETLENGTH					; PROCEDURE | ASSEMBLER

; -------------------  ASM Block 00000071  -------------------


    txa:pha
    ldy len
    ldx len+1
    jsr xBIOS_SET_LENGTH
    pla:tax

; ------------------------------------------------------------

LEN	= DATAORIGIN+$0139

@VarData	= LEN
@VarDataSize	= 2

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	XBIOSSETFILEOFFSET				; PROCEDURE | ASSEMBLER

; -------------------  ASM Block 00000073  -------------------


    txa:pha
    mva #0 xBiosIOresult
    sta xBiosIOerror
    ldy pos
    ldx pos+1
    lda pos+2
    jsr xBIOS_SET_FILE_OFFSET 
//    bcc @+
    stx xBiosIOerror
    mva #1 xBiosIOresult 
    pla:tax

; ------------------------------------------------------------

POS	= DATAORIGIN+$013B

@VarData	= POS
@VarDataSize	= 4

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

; ------------------------------------------------------------

XBIOSIORESULT	= DATAORIGIN+$012C
XBIOSIOERROR	= DATAORIGIN+$012D
XBIOSDIRENTRYINDEX	= DATAORIGIN+$012E
XBIOSDIRENTRYSTATUS	= DATAORIGIN+$012F
XBIOSDIRENTRYSECTOR	= DATAORIGIN+$0130
XBIOS_ADDRESS	= $0800
XBIOS_VERSION	= $0802
XBIOS_RENAME_ENTRY	= $0803
XBIOS_LOAD_FILE	= $0806
XBIOS_OPEN_FILE	= $0809
XBIOS_LOAD_DATA	= $080C
XBIOS_WRITE_DATA	= $080F
XBIOS_OPEN_CURRENT_DIR	= $0812
XBIOS_GET_BYTE	= $0815
XBIOS_PUT_BYTE	= $0818
XBIOS_FLUSH_BUFFER	= $081B
XBIOS_SET_LENGTH	= $081E
XBIOS_SET_INIAD	= $0821
XBIOS_SET_FILE_OFFSET	= $0824
XBIOS_SET_RUNAD	= $0827
XBIOS_SET_DEFAULT_DEVICE	= $082A
XBIOS_OPEN_DIR	= $082D
XBIOS_LOAD_BINARY_FILE	= $0830
XBIOS_OPEN_DEFAULT_DIR	= $0833
XBIOS_SET_DEVICE	= $0836
XBIOS_RELOCATE_BUFFER	= $0839
XBIOS_GET_ENTRY	= $083C
XBIOS_OPEN_DEFAULT_FILE	= $083F
XBIOS_READ_SECTOR	= $0842
XBIOS_FIND_ENTRY	= $0845
XBIOS_SET_BUFFER_SIZE	= $0848
XDIRSIZE	= $0BE5
XSPEED	= $0BE6
XHSPEED	= $0BE7
XIRQEN	= $0BE8
XAUDCTL	= $0BE9
XFILE	= $0BEA
XDIR	= $0BEC
XIOV	= $0BEE
XBUFFERH	= $0BF0
XBUFSIZE	= $0BF1
XDAUX3	= $0BF2
XSEGMENT	= $0BF3
XNOTE	= $0BF5
XNOTEH	= $0BF7
XDEVICE	= $0BFC
XDCMD	= $0BFD
XDAUX1	= $0BFE
XDAUX2	= $0BFF

.endl							; UNIT XBIOS

; ------------------------------------------------------------

.local	XBAPLIB						; UNIT

.local	XBUNAPL						; PROCEDURE

; optimize OK (XBAPLIB), line = 43

	lda FNAM
	sta XBIOS.XBIOSOPENFILE.FILENAME
	lda FNAM+1
	sta XBIOS.XBIOSOPENFILE.FILENAME+1
	jsr XBIOS.XBIOSOPENFILE

; -------------------  ASM Block 00000086  -------------------

		stx @sp

		mwa outputPointer dest_ap

//		mva #$00 GET_BYTE+1

aPL_depack	lda #$80
		sta token
literal		lsr bl
		jsr xbios.xBIOS_GET_BYTE
write		jsr store
nxt_token	jsr get_token_bit
		bcc literal		; literal  -> 0
		jsr get_token_bit
		bcc block		; block    -> 10
		jsr get_token_bit
		bcc short_block		; short block -> 110

single_byte	lsr bl			; single byte -> 111
		lda #$10
@		pha
		jsr get_token_bit
		pla
		rol @
		bcc @-
		beq write
		jmp len01

aPL_done	jmp to_exit

short_block	jsr xbios.xBIOS_GET_BYTE
		lsr @
		beq aPL_done
		sta EBPL
		ldx #0
		stx EBPH
		ldx #$02
		bcc @+
		inx
@		sec
		ror  bl
		jmp len0203

block		jsr getgamma
		dex
		lda #$ff
bl		equ *-1
		bmi normalcodepair
		dex
		bne normalcodepair
		jsr getgamma
		lda #$ff
EBPL		equ *-1
		sta offsetL
		lda #$ff
EBPH		equ *-1
		sta offsetH
		jmp lenffff

normalcodepair	dex
		stx    offsetH
		stx    EBPH
		jsr    xbios.xBIOS_GET_BYTE
		sta    offsetL
		sta    EBPL
		jsr    getgamma
		lda    offsetH
		beq    _ceck7f
		cmp    #$7d
		bcs	 plus2
		cmp    #$05
		bcs	 plus1
		bcc    normal1               ; zawsze
_ceck7f		lda	 offsetL
		bmi    normal1
plus2		inx
		bne    plus1
		iny
plus1		inx
normal1
lenffff		iny
		sec
		ror bl
		bne domatch	; zawsze

getgamma	lda #$00
		pha
		lda #$01
		pha
@		jsr get_token_bit
		tsx
		rol $101,x
		rol $102,x
		jsr get_token_bit
		bcs @-
		pla
		tax
		pla
		tay
		rts

get_token_bit	asl    token
		bne    @+
		php
		jsr    xbios.xBIOS_GET_BYTE
		plp
		rol    @
		sta    token
@		rts
token		.byte $00

store		sta $ffff
dest_ap		equ *-2
		inw dest_ap
		rts

len01		ldx    #$01
len0203		ldy    #$00
		sta    offsetL
		sty    offsetH
		iny

domatch		lda dest_ap
		sec
		sbc #$ff
offsetL		equ *-1
		sta src
		lda dest_ap+1
		sbc #$ff
offsetH		equ *-1
		sta src+1
source		lda $ffff
src		equ *-2
		inw src
		jsr store
		dex
		bne source
		dey
		bne source
		jmp nxt_token


to_exit		lda #0
		tya
		sta:rne @buf,y+

		ldx @sp: #0

; ------------------------------------------------------------

FNAM	= DATAORIGIN+$013F
OUTPUTPOINTER	= DATAORIGIN+$0141

@VarData	= FNAM
@VarDataSize	= 4

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

; ------------------------------------------------------------

.endl							; UNIT XBAPLIB

; ------------------------------------------------------------

.local	CRT						; UNIT

.local	NOSOUND						; PROCEDURE | ASSEMBLER

; -------------------  ASM Block 00000096  -------------------

	lda #0
	sta $d208
	sta $d218

	sta $d20f
	sta $d21f

	sta wsync
	sta wsync

	ldy #3
	sty $d20f
	sty $d21f

	ldy #8
lp	sta $d200,y
	sta $d210,y
	dey
	bpl lp

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	SOUND						; PROCEDURE | ASSEMBLER

; -------------------  ASM Block 00000097  -------------------

	lda Chan
	and #7

	ldy #$10
	cmp #4
	scs
	ldy #$00
	sty npokey

	and #3

	asl @
	add #0
npokey	equ *-1
	tay

	lda #$00
	sta audctl
	lda #$03
	sta skctl

	lda Freq
	sta audf1,y

	lda Vol
	and #$0F
	sta _t

	lda Dist	; -> bit 7-6-5
	:4 asl @
	ora #0
_t	equ *-1
	sta audc1,y

; ------------------------------------------------------------

CHAN	= DATAORIGIN+$0144
FREQ	= DATAORIGIN+$0145
DIST	= DATAORIGIN+$0146
VOL	= DATAORIGIN+$0147

@VarData	= CHAN
@VarDataSize	= 4

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

; ------------------------------------------------------------

TEXTATTR	= DATAORIGIN+$0143
CONSOL	= $D01F
CN_START_SELECT_OPTION	= $00
CN_SELECT_OPTION	= $01
CN_START_OPTION	= $02
CN_OPTION	= $03
CN_START_SELECT	= $04
CN_SELECT	= $05
CN_START	= $06
CN_NONE	= $07
BW40	= $00
CO40	= $01
BW80	= $02
CO80	= $03
MONO	= $07
C40	= $01
C80	= $03
BLACK	= $00
WHITE	= $0F
RED	= $26
CYAN	= $AC
PURPLE	= $48
GREEN	= $B6
BLUE	= $86
YELLOW	= $DC
ORANGE	= $18
BROWN	= $F4
LIGHT_RED	= $2A
DARK_GREY	= $04
GREY	= $08
LIGHT_GREEN	= $BC
LIGHT_BLUE	= $9A
LIGHT_GREY	= $0C
BLINK	= $80

.endl							; UNIT CRT

; ------------------------------------------------------------

.local	CIO						; UNIT

; ------------------------------------------------------------

.endl							; UNIT CIO

; ------------------------------------------------------------

.local	APLIB						; UNIT

; ------------------------------------------------------------

.endl							; UNIT APLIB

; ------------------------------------------------------------

.local	B_UTILS						; UNIT

; ------------------------------------------------------------

BASE64CHARS	= DATAORIGIN+$0148
adr.BASE64INV	= [DATAORIGIN+$014A] .array [128]
.var BASE64INV	= adr.BASE64INV .word

.endl							; UNIT B_UTILS

; ------------------------------------------------------------

.local	MISC						; UNIT

.local	DETECTANTIC					; FUNCTION | ASSEMBLER

; -------------------  ASM Block 00000112  -------------------


// ANTIC PAL Test for Atari 8-bits
// (C) 2019 Guillermo Fuenzalida

antic_loop1
	lda vcount
	cmp #100
	bcc antic_loop1		// wait till scanline 200
	sta scanline
antic_loop2
	lda vcount
	cmp #10
	bmi antic_loop2_fin
	cmp scanline
	bmi antic_loop2
	sta scanline
	bpl antic_loop2

antic_loop2_fin
	ldy #$00
	lda #0
scanline equ *-1
	cmp #135
	bmi ntsc
	iny
ntsc
	sty Result


@exit

; ------------------------------------------------------------

RESULT	= DATAORIGIN+$01CA
	rts						; ret
.endl

; ------------------------------------------------------------

adr.BANKS	= $0101
.var BANKS	= adr.BANKS .word
DETECTOS	= $FFF7

.endl							; UNIT MISC

; ------------------------------------------------------------

.local	RMT						; UNIT

; ------------------------------------------------------------
; ------------------------------------------------------------
@UnitInit

; optimize FAIL ('MISC.DETECTANTIC', RMT), line = 175

	jsr MISC.DETECTANTIC
	lda MISC.DETECTANTIC.RESULT
	jeq l_03BB

; optimize OK (RMT), line = 176

	lda #$00
	jmp l_03C9
l_03BB

; optimize OK (RMT), line = 178

	lda #$04
l_03C9
	sta NTSC

	rts

; ------------------------------------------------------------

NTSC	= DATAORIGIN+$01CB

.endl							; UNIT RMT

; ------------------------------------------------------------

.local	B_PMG						; UNIT

; ------------------------------------------------------------

PMG_VDELAY_M0	= $01
PMG_VDELAY_M1	= $02
PMG_VDELAY_M2	= $04
PMG_VDELAY_M3	= $08
PMG_VDELAY_P0	= $10
PMG_VDELAY_P1	= $20
PMG_VDELAY_P2	= $40
PMG_VDELAY_P3	= $80
PMG_SIZE_NORMAL	= $00
PMG_SIZE_X2	= $01
PMG_SIZE_X4	= $03
PMG_MSIZE0_X2	= $01
PMG_MSIZE0_X4	= $03
PMG_MSIZE1_X2	= $04
PMG_MSIZE1_X4	= $0C
PMG_MSIZE2_X2	= $10
PMG_MSIZE2_X4	= $30
PMG_MSIZE3_X2	= $40
PMG_MSIZE4_X4	= $C0
PMG_GRACTL_MISSILES	= $01
PMG_GRACTL_PLAYERS	= $02
PMG_GRACTL_LATCH	= $04
PMG_GRACTL_DEFAULT	= $03
PMG_SDMCTL_DMA_MISSILE	= $04
PMG_SDMCTL_DMA_PLAYER	= $08
PMG_SDMCTL_DMA_BOTH	= $0C
PMG_SDMCTL_ONELINE	= $10
PMG_SDMCTL_SCREEN_DISABLED	= $00
PMG_SDMCTL_SCREEN_NARROW	= $01
PMG_SDMCTL_SCREEN_NORMAL	= $02
PMG_SDMCTL_SCREEN_WIDE	= $03
PMG_SDMCTL_DEFAULT	= $0E
PMG_COLLISION_PLAYER_TO_P0	= $01
PMG_COLLISION_PLAYER_TO_P1	= $02
PMG_COLLISION_PLAYER_TO_P2	= $04
PMG_COLLISION_PLAYER_TO_P3	= $08
PMG_5PLAYER	= $10
PMG_OVERLAP	= $20
PMG_SDMCTL	= $D400
PMG_SDMCTL_S	= $022F
PMG_GPRIOR	= $D01B
PMG_GPRIOR_S	= $026F
PMG_PCOLR0	= $D012
PMG_PCOLR1	= $D013
PMG_PCOLR2	= $D014
PMG_PCOLR3	= $D015
adr.PMG_PCOLR	= $D012
.var PMG_PCOLR	= adr.PMG_PCOLR .word
PMG_PCOLR0_S	= $02C0
PMG_PCOLR1_S	= $02C1
PMG_PCOLR2_S	= $02C2
PMG_PCOLR3_S	= $02C3
adr.PMG_PCOLR_S	= $02C0
.var PMG_PCOLR_S	= adr.PMG_PCOLR_S .word
PMG_HPOS0	= $D000
PMG_HPOS1	= $D001
PMG_HPOS2	= $D002
PMG_HPOS3	= $D003
adr.PMG_HPOS	= $D000
.var PMG_HPOS	= adr.PMG_HPOS .word
PMG_HPOSM0	= $D004
PMG_HPOSM1	= $D005
PMG_HPOSM2	= $D006
PMG_HPOSM3	= $D007
adr.PMG_HPOSM	= $D004
.var PMG_HPOSM	= adr.PMG_HPOSM .word
PMG_SIZEP0	= $D008
PMG_SIZEP1	= $D009
PMG_SIZEP2	= $D00A
PMG_SIZEP3	= $D00B
adr.PMG_SIZEP	= $D008
.var PMG_SIZEP	= adr.PMG_SIZEP .word
PMG_SIZEM	= $D00C
PMG_GRAFP0	= $D00D
PMG_GRAFP1	= $D00E
PMG_GRAFP2	= $D00F
PMG_GRAFP3	= $D010
adr.PMG_GRAFP	= $D00D
.var PMG_GRAFP	= adr.PMG_GRAFP .word
PMG_GRAFM	= $D011
PMG_P0PL	= $D00C
PMG_P1PL	= $D00D
PMG_P2PL	= $D00E
PMG_P3PL	= $D00F
adr.PMG_PPL	= $D00C
.var PMG_PPL	= adr.PMG_PPL .word
PMG_VDELAY	= $D01C
PMG_GRACTL	= $D01D
PMG_HITCLR	= $D01E
PMG_PMBASE	= $D407
PMG_ONELINE	= DATAORIGIN+$01DC
PMG_BASE	= DATAORIGIN+$01DD
PMG_SIZE	= DATAORIGIN+$01DF

.endl							; UNIT B_PMG

; ------------------------------------------------------------

.local	DOS						; UNIT

; ------------------------------------------------------------

PALNTSC	= $D014

.endl							; UNIT DOS

; ------------------------------------------------------------

.local	STRUTILS					; UNIT

; ------------------------------------------------------------

.endl							; UNIT STRUTILS

; ------------------------------------------------------------

.local	SYSUTILS					; UNIT

.local	INTTOSTR_03DC					; FUNCTION | ASSEMBLER | OVERLOAD

; ------------------------------------------------------------

; Generate Assignment for CARDINAL / INTEGER / REAL / SINGLE
; as Pointer
	lda :STACKORIGIN,x
	sta A
	lda :STACKORIGIN+STACKWIDTH,x
	sta A+1
	lda :STACKORIGIN+STACKWIDTH*2,x
	sta A+2
	lda :STACKORIGIN+STACKWIDTH*3,x
	sta A+3
	dex
@main

; -------------------  ASM Block 00000137  -------------------

	txa:pha

	inx

	@ValueToStr #@printINT

	ldx #$20
	mva:rpl @buf,x adr.Result,x-

	pla:tax

@exit

; ------------------------------------------------------------

; Push WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer

	inx
	mva RESULT :STACKORIGIN,x
	mva RESULT+1 :STACKORIGIN+STACKWIDTH,x

	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	eif

; ------------------------------------------------------------

A	= DATAORIGIN+$01E1
adr.RESULT	= [DATAORIGIN+$01E5] .array [33]
.var RESULT	= adr.RESULT .word

@VarData	= A
@VarDataSize	= 37

	rts						; ret
.endl

.local	INTTOSTR_03E2					; FUNCTION | ASSEMBLER | OVERLOAD

; ------------------------------------------------------------

; Generate Assignment for CARDINAL / INTEGER / REAL / SINGLE
; as Pointer
	lda :STACKORIGIN,x
	sta A
	lda :STACKORIGIN+STACKWIDTH,x
	sta A+1
	lda :STACKORIGIN+STACKWIDTH*2,x
	sta A+2
	lda :STACKORIGIN+STACKWIDTH*3,x
	sta A+3
	dex
@main

; -------------------  ASM Block 00000138  -------------------

	txa:pha

	inx

	@ValueToStr #@printCARD

	ldx #$20
	mva:rpl @buf,x adr.Result,x-

	pla:tax

@exit

; ------------------------------------------------------------

; Push WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer

	inx
	mva RESULT :STACKORIGIN,x
	mva RESULT+1 :STACKORIGIN+STACKWIDTH,x

	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	eif

; ------------------------------------------------------------

A	= DATAORIGIN+$0206
adr.RESULT	= [DATAORIGIN+$020A] .array [33]
.var RESULT	= adr.RESULT .word

@VarData	= A
@VarDataSize	= 37

	rts						; ret
.endl

.local	STRTOINT_03E8					; FUNCTION | ASSEMBLER | OVERLOAD

; -------------------  ASM Block 00000140  -------------------

	@StrToInt s

	mva edx Result
	mva edx+1 Result+1
	mva edx+2 Result+2
	mva edx+3 Result+3

@exit

; ------------------------------------------------------------

S	= DATAORIGIN+$022B
RESULT	= DATAORIGIN+$022D

@VarData	= S
@VarDataSize	= 2

	rts						; ret
.endl

; ------------------------------------------------------------

FAREADONLY	= $01
FAHIDDEN	= $02
FASYSFILE	= $04
FAVOLUMEID	= $08
FADIRECTORY	= $10
FAARCHIVE	= $20
FAANYFILE	= $3F

.endl							; UNIT SYSUTILS

; ------------------------------------------------------------

.local	B_SYSTEM					; UNIT

.local	SYSTEMOFF_0414					; PROCEDURE | ASSEMBLER | OVERLOAD
	sta PORT_B

; -------------------  ASM Block 00000146  -------------------


		;lda:cmp:req 20 ;; removed due to problem with nmien = 0 already set
		sei
		mva #0 NMIEN

		mva port_b PORTB
		mwa #__nmi NMIVEC

		lda <__iret
		sta IRQVEC
		sta __vblvec
		sta __dlivec

		lda >__iret
		sta IRQVEC+1
		sta __vblvec+1
		sta __dlivec+1

		mva #$40 NMIEN
		sta __nmien
		bne __stop
__nmi
		bit NMIST
		bpl __vbl
		jmp __dlivec
.def :__dlivec = *-2
		rti
__vbl
		inc rtclok+2
		bne __vblvec-1
		inc rtclok+1
		bne __vblvec-1
		inc rtclok
		jmp __vblvec
.def :__vblvec = *-2
.def :__iret
    	rti
__stop

; ------------------------------------------------------------

PORT_B	= DATAORIGIN+$0232

@VarData	= PORT_B
@VarDataSize	= 1

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	SYSTEMOFF_0415					; PROCEDURE | OVERLOAD

; optimize OK (B_SYSTEM), line = 180

	lda #$FE
	jsr SYSTEMOFF_0414
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	ENABLEDLI					; PROCEDURE | ASSEMBLER

; -------------------  ASM Block 00000153  -------------------


		lda:cmp:req 20
		mva #0 NMIEN
		mwa dliptr __dlivec
		mva #$c0 NMIEN
		sta __nmien

; ------------------------------------------------------------

DLIPTR	= DATAORIGIN+$0233

@VarData	= DLIPTR
@VarDataSize	= 2

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	DISABLEDLI					; PROCEDURE | ASSEMBLER

; -------------------  ASM Block 00000154  -------------------


		lda:cmp:req 20
		mva #$40 NMIEN
		sta __nmien

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	WAITFRAME					; PROCEDURE | ASSEMBLER

; -------------------  ASM Block 00000155  -------------------


    lda:cmp:req rtclok+2

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	WAITFRAMES					; PROCEDURE
	sta FRAMES

; --- WhileProlog
	jmp l_0423
l_0424

; optimize FAIL ('WAITFRAME', B_SYSTEM), line = 269

	jsr WAITFRAME

; optimize FAIL (0, B_SYSTEM), line = 270

	dec FRAMES
l_0423

; optimize OK (B_SYSTEM), line = 268

	lda FRAMES
	jne l_0424

; ------------------------------------------------------------

FRAMES	= DATAORIGIN+$0235

@VarData	= FRAMES
@VarDataSize	= 1

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	SETCHARSET					; PROCEDURE
	sta MSB

; optimize OK (B_SYSTEM), line = 276

	sta ATARI.CHBASE

; ------------------------------------------------------------

MSB	= DATAORIGIN+$0236

@VarData	= MSB
@VarDataSize	= 1

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

; ------------------------------------------------------------

__NMIEN	= DATAORIGIN+$0231
PORTB_SELFTEST_OFF	= $80
PORTB_BASIC_OFF	= $02
PORTB_SYSTEM_ON	= $01

.endl							; UNIT B_SYSTEM

; ------------------------------------------------------------

.local	B_CRT						; UNIT

.local	ATASCII2ANTIC_0440				; FUNCTION | OVERLOAD
	sta C

; -------------------  ASM Block 00000156  -------------------


        lda c
        asl
        php
        cmp #2*$60
        bcs @+
        sbc #2*$20-1
        bcs @+
        adc #2*$60
@       plp
        ror
        sta result;
    
@exit

; ------------------------------------------------------------

C	= DATAORIGIN+$0240
RESULT	= DATAORIGIN+$0241

@VarData	= C
@VarDataSize	= 1

	rts						; ret
.endl

.local	ANTIC2ATASCII_0444				; FUNCTION | OVERLOAD
	sta C

; -------------------  ASM Block 00000157  -------------------


        lda c
        asl
        php
        cmp #2*$60
        bcs @+
        sbc #2*$40-1
        bcs @+
        adc #2*$60
@       plp
        ror
        sta result;
    
@exit

; ------------------------------------------------------------

C	= DATAORIGIN+$0242
RESULT	= DATAORIGIN+$0243

@VarData	= C
@VarDataSize	= 1

	rts						; ret
.endl

.local	ATASCII2ANTIC_0448				; FUNCTION | OVERLOAD

; ------------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	lda :STACKORIGIN,x
	sta :bp2
	lda :STACKORIGIN+STACKWIDTH,x
	sta :bp2+1
	ldy #$00
	mva:rne (:bp2),y adr.S,y+
	mwa #adr.S S
	dex
@main

; optimize OK (B_CRT), line = 468

	lda adr.S
	sta adr.RESULT

; optimize OK (B_CRT), line = 469

	lda #$01
	sta I
	mva adr.S @FORTMP_045F_0

l_0462
; --- ForToDoCondition
	lda @FORTMP_045F_0::#$00
	cmp I
	jcc l_0470

; optimize FAIL (1, B_CRT), line = 470

	inx
	mva I :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	ldy I
	lda adr.S,y
	jsr ATASCII2ANTIC_0440
	ldy :STACKORIGIN,x
	lda ATASCII2ANTIC_0440.RESULT
	sta adr.RESULT,y
	dex

; --- ForToDoEpilog
	inc I
	jne l_0462
l_0470
@exit

; ------------------------------------------------------------

adr.S	= [DATAORIGIN+$0244] .array [256]
.var S	= adr.S .word
adr.RESULT	= [DATAORIGIN+$0344] .array [256]
.var RESULT	= adr.RESULT .word
I	= DATAORIGIN+$0444

@VarData	= S
@VarDataSize	= 513

	rts						; ret
.endl

.local	ANTIC2ATASCII_0483				; FUNCTION | OVERLOAD

; ------------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	lda :STACKORIGIN,x
	sta :bp2
	lda :STACKORIGIN+STACKWIDTH,x
	sta :bp2+1
	ldy #$00
	mva:rne (:bp2),y adr.S,y+
	mwa #adr.S S
	dex
@main

; optimize OK (B_CRT), line = 476

	lda adr.S
	sta adr.RESULT

; optimize OK (B_CRT), line = 477

	lda #$01
	sta I
	mva adr.S @FORTMP_049A_0

l_049D
; --- ForToDoCondition
	lda @FORTMP_049A_0::#$00
	cmp I
	jcc l_04AB

; optimize FAIL (1, B_CRT), line = 478

	inx
	mva I :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	ldy I
	lda adr.S,y
	jsr ANTIC2ATASCII_0444
	ldy :STACKORIGIN,x
	lda ANTIC2ATASCII_0444.RESULT
	sta adr.RESULT,y
	dex

; --- ForToDoEpilog
	inc I
	jne l_049D
l_04AB
@exit

; ------------------------------------------------------------

adr.S	= [DATAORIGIN+$0446] .array [256]
.var S	= adr.S .word
adr.RESULT	= [DATAORIGIN+$0546] .array [256]
.var RESULT	= adr.RESULT .word
I	= DATAORIGIN+$0646

@VarData	= S
@VarDataSize	= 513

	rts						; ret
.endl

.local	CRT_INIT_04BE					; PROCEDURE | OVERLOAD

; optimize OK (B_CRT), line = 483

	lda VRAM_ADDRESS
	sta CRT_VRAM
	lda VRAM_ADDRESS+1
	sta CRT_VRAM+1

; optimize OK (B_CRT), line = 484

	lda WIDTH
	sta CRT_SCREENWIDTH

; optimize OK (B_CRT), line = 485

	lda HEIGHT
	sta CRT_SCREENHEIGHT

; optimize OK (B_CRT), line = 486

	sta :ecx
	lda WIDTH
	sta :eax
	.ifdef fmulinit
	fmulu_8
	els
	imulCL
	eif
	sta CRT_SIZE+1
	lda :eax
	sta CRT_SIZE

; optimize OK (B_CRT), line = 487

	lda CRT_VRAM
	sta CRT_CURSOR
	lda CRT_VRAM+1
	sta CRT_CURSOR+1

; optimize OK (B_CRT), line = 488

	lda #$00
	sta CRT_LEFTMARGIN

; ------------------------------------------------------------

VRAM_ADDRESS	= DATAORIGIN+$0648
WIDTH	= DATAORIGIN+$064A
HEIGHT	= DATAORIGIN+$064B

@VarData	= VRAM_ADDRESS
@VarDataSize	= 4

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	CRT_CLEAR_04E8					; PROCEDURE | OVERLOAD

; optimize OK (B_CRT), line = 504

	lda CRT_VRAM
	sta SYSTEM.FILLCHAR_02BB.A
	lda CRT_VRAM+1
	sta SYSTEM.FILLCHAR_02BB.A+1
	lda CRT_SIZE
	sta SYSTEM.FILLCHAR_02BB.COUNT
	lda CRT_SIZE+1
	sta SYSTEM.FILLCHAR_02BB.COUNT+1
	lda #$00
	sta SYSTEM.FILLCHAR_02BB.VALUE
	.LOCAL +MAIN.SYSTEM.FILLCHAR_02BB
	m@INLINE
	.ENDL

; optimize OK (B_CRT), line = 505

	lda CRT_VRAM
	sta CRT_CURSOR
	lda CRT_VRAM+1
	sta CRT_CURSOR+1
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	CRT_GOTOXY					; PROCEDURE

; optimize OK (B_CRT), line = 516

	lda CRT_SCREENWIDTH
	sta :ecx
	lda Y
	sta :eax
	.ifdef fmulinit
	fmulu_8
	els
	imulCL
	eif
	lda :eax
	add X
	sta :STACKORIGIN+9
	lda :eax+1
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+9
	lda :STACKORIGIN+9
	add CRT_VRAM
	sta CRT_CURSOR
	lda :STACKORIGIN+STACKWIDTH+9
	adc CRT_VRAM+1
	sta CRT_CURSOR+1

; ------------------------------------------------------------

X	= DATAORIGIN+$064C
Y	= DATAORIGIN+$064D

@VarData	= X
@VarDataSize	= 2

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	CRT_WHEREY					; FUNCTION

; optimize OK (B_CRT), line = 521

	lda CRT_CURSOR
	sub CRT_VRAM
	sta @WORD.DIV.A
	lda CRT_CURSOR+1
	sbc CRT_VRAM+1
	sta @WORD.DIV.A+1
	lda CRT_SCREENWIDTH
	sta @WORD.DIV.B
	lda #$00
	sta @WORD.DIV.B+1
	jsr @WORD.DIV
	lda :eax
	sta RESULT
@exit

; ------------------------------------------------------------

RESULT	= DATAORIGIN+$064E
	rts						; ret
.endl

.local	CRT_WHEREX					; FUNCTION

; optimize OK (B_CRT), line = 526

	lda CRT_CURSOR
	sub CRT_VRAM
	sta @WORD.MOD.A
	lda CRT_CURSOR+1
	sbc CRT_VRAM+1
	sta @WORD.MOD.A+1
	lda CRT_SCREENWIDTH
	sta @WORD.MOD.B
	lda #$00
	sta @WORD.MOD.B+1
	jsr @WORD.MOD
	lda @WORD.MOD.RESULT
	sta RESULT
@exit

; ------------------------------------------------------------

RESULT	= DATAORIGIN+$064F
	rts						; ret
.endl

.local	CRT_WRITE_053A					; PROCEDURE | OVERLOAD

; ------------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	lda :STACKORIGIN,x
	sta :bp2
	lda :STACKORIGIN+STACKWIDTH,x
	sta :bp2+1
	ldy #$00
	mva:rne (:bp2),y adr.S,y+
	mwa #adr.S S
	dex
@main

; optimize OK (B_CRT), line = 531

	lda adr.S
	sta SYSTEM.MOVE_02BF.COUNT
	lda <adr.S+$01
	sta SYSTEM.MOVE_02BF.SOURCE
	lda >adr.S+$01
	sta SYSTEM.MOVE_02BF.SOURCE+1
	lda CRT_CURSOR
	sta SYSTEM.MOVE_02BF.DEST
	lda CRT_CURSOR+1
	sta SYSTEM.MOVE_02BF.DEST+1
	lda #$00
	sta SYSTEM.MOVE_02BF.COUNT+1
	.LOCAL +MAIN.SYSTEM.MOVE_02BF
	m@INLINE
	.ENDL

; optimize OK (B_CRT), line = 532

	lda adr.S
	add CRT_CURSOR
	sta CRT_CURSOR
	lda CRT_CURSOR+1
	adc #$00
	sta CRT_CURSOR+1

; ------------------------------------------------------------

adr.S	= [DATAORIGIN+$0650] .array [256]
.var S	= adr.S .word

@VarData	= S
@VarDataSize	= 256

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	CRT_WRITE_054D					; PROCEDURE | OVERLOAD
	sta C

; optimize OK (B_CRT), line = 537

	ldy CRT_CURSOR+1
	sty :bp+1
	ldy CRT_CURSOR
	lda C
	sta (:bp),y

; optimize FAIL (0, B_CRT), line = 538

	inc CRT_CURSOR
	sne
	inc CRT_CURSOR+1

; ------------------------------------------------------------

C	= DATAORIGIN+$0750

@VarData	= C
@VarDataSize	= 1

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	CRT_WRITE_055B					; PROCEDURE | OVERLOAD
	sta NUM

; optimize FAIL ('SYSUTILS.INTTOSTR_03E2', B_CRT), line = 543

	inx
	mva NUM :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	sta :STACKORIGIN+STACKWIDTH*2,x
	sta :STACKORIGIN+STACKWIDTH*3,x
	jsr SYSUTILS.INTTOSTR_03E2
	jsr ATASCII2ANTIC_0448
	inx
	mva ATASCII2ANTIC_0448.RESULT :STACKORIGIN,x
	mva ATASCII2ANTIC_0448.RESULT+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITE_053A

; ------------------------------------------------------------

NUM	= DATAORIGIN+$0751

@VarData	= NUM
@VarDataSize	= 1

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	CRT_WRITE_0565					; PROCEDURE | OVERLOAD

; optimize FAIL ('SYSUTILS.INTTOSTR_03E2', B_CRT), line = 548

	inx
	mva NUM :STACKORIGIN,x
	mva NUM+1 :STACKORIGIN+STACKWIDTH,x
	mva #$00 :STACKORIGIN+STACKWIDTH*2,x
	sta :STACKORIGIN+STACKWIDTH*3,x
	jsr SYSUTILS.INTTOSTR_03E2
	jsr ATASCII2ANTIC_0448
	inx
	mva ATASCII2ANTIC_0448.RESULT :STACKORIGIN,x
	mva ATASCII2ANTIC_0448.RESULT+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITE_053A

; ------------------------------------------------------------

NUM	= DATAORIGIN+$0752

@VarData	= NUM
@VarDataSize	= 2

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	CRT_WRITE_056E					; PROCEDURE | OVERLOAD

; optimize FAIL ('SYSUTILS.INTTOSTR_03DC', B_CRT), line = 558

	inx
	mva NUM :STACKORIGIN,x
	mva NUM+1 :STACKORIGIN+STACKWIDTH,x
	mva NUM+2 :STACKORIGIN+STACKWIDTH*2,x
	mva NUM+3 :STACKORIGIN+STACKWIDTH*3,x
	jsr SYSUTILS.INTTOSTR_03DC
	jsr ATASCII2ANTIC_0448
	inx
	mva ATASCII2ANTIC_0448.RESULT :STACKORIGIN,x
	mva ATASCII2ANTIC_0448.RESULT+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITE_053A

; ------------------------------------------------------------

NUM	= DATAORIGIN+$0754

@VarData	= NUM
@VarDataSize	= 4

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	CRT_PUT_0576					; PROCEDURE | OVERLOAD
	sta B

; optimize OK (B_CRT), line = 574

	ldy CRT_CURSOR+1
	sty :bp+1
	ldy CRT_CURSOR
	lda B
	sta (:bp),y

; optimize FAIL (0, B_CRT), line = 575

	inc CRT_CURSOR
	sne
	inc CRT_CURSOR+1

; ------------------------------------------------------------

B	= DATAORIGIN+$0758

@VarData	= B
@VarDataSize	= 1

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	CRT_KEYPRESSED					; FUNCTION

; optimize OK (B_CRT), line = 592

	lda #$00
	sta RESULT

; optimize OK (B_CRT), line = 593

	lda ATARI.SKSTAT
	and #$04
	jne l_05A1
	lda #$01
	sta RESULT
l_05A1
@exit

; ------------------------------------------------------------

RESULT	= DATAORIGIN+$0759
	rts						; ret
.endl

.local	CRT_READKEY					; FUNCTION

; optimize OK (B_CRT), line = 598

	lda KBCODE
	sta RESULT

; --- RepeatUntilProlog
l_05B3

; optimize FAIL ('CRT_KEYPRESSED', B_CRT), line = 599

	jsr CRT_KEYPRESSED
	ldy #1
	lda CRT_KEYPRESSED.RESULT
	beq @+
	dey
@
	sty :STACKORIGIN+1,x
	ldy #1
	lda RESULT
	cmp KBCODE
	bne @+
	dey
@
	tya
	ora :STACKORIGIN+1,x
	jeq l_05B3

; --- RepeatUntilProlog
l_05CA

; optimize FAIL ('CRT_KEYPRESSED', B_CRT), line = 600

	jsr CRT_KEYPRESSED
	lda CRT_KEYPRESSED.RESULT
	jeq l_05CA

; optimize OK (B_CRT), line = 601

	lda KBCODE
	sta RESULT
@exit

; ------------------------------------------------------------

RESULT	= DATAORIGIN+$075A
	rts						; ret
.endl

.local	CRT_READCHAR					; FUNCTION

; --- RepeatUntilProlog
l_05DA

; optimize FAIL ('CRT_READKEY', B_CRT), line = 607

	jsr CRT_READKEY
	ldy CRT_READKEY.RESULT
	lda adr.CRT_KEYCODE,y
	sta RESULT

; optimize OK (B_CRT), line = 608

	cmp #$FF
	jeq l_05DA
@exit

; ------------------------------------------------------------

RESULT	= DATAORIGIN+$075B
	rts						; ret
.endl

.local	CRT_READCHARI					; FUNCTION

; optimize FAIL ('CRT_READCHAR', B_CRT), line = 613

	jsr CRT_READCHAR
	lda CRT_READCHAR.RESULT
	jsr ATASCII2ANTIC_0440
	lda ATASCII2ANTIC_0440.RESULT
	sta RESULT
@exit

; ------------------------------------------------------------

RESULT	= DATAORIGIN+$075C
	rts						; ret
.endl

.local	CRT_READSTRINGI_05F8				; FUNCTION | OVERLOAD
	sta LIMIT

	mva #$00 adr.RESULT

; --- RepeatUntilProlog
l_05FC

; optimize FAIL ('CRT_READCHARI', B_CRT), line = 621

	jsr CRT_READCHARI
	lda CRT_READCHARI.RESULT
	sta A

; optimize OK (B_CRT), line = 622

	cmp #$DB
	jne l_0612
	jmp @exit
l_0612

; optimize OK (B_CRT), line = 623

	lda A
	cmp #$7E
	jne l_0639
	lda adr.RESULT
	jeq l_0639

; optimize FAIL (0, B_CRT), line = 624

	lda CRT_CURSOR
	bne @+
	dec CRT_CURSOR+1
@
	dec CRT_CURSOR

; optimize OK (B_CRT), line = 625

	ldy CRT_CURSOR+1
	sty :bp+1
	ldy CRT_CURSOR
	lda #$00
	sta (:bp),y

; optimize OK (B_CRT), line = 626

	dec adr.RESULT
	jmp l_064D
l_0639

; optimize OK (B_CRT), line = 628

	lda A
	cmp #$C2
	jeq l_069E
	cmp #$C1
	jeq l_069E
	cmp #$7F
	jeq l_069E
	cmp #$5B
	jeq l_069E
	cmp #$7E
	jeq l_069E
	lda adr.RESULT
	cmp LIMIT
	jcs l_069E

; optimize OK (B_CRT), line = 634

	lda A
	jsr CRT_PUT_0576

; optimize OK (B_CRT), line = 635

	inc adr.RESULT

; optimize OK (B_CRT), line = 636

	ldy adr.RESULT
	lda A
	sta adr.RESULT,y
l_069E
l_064D

; optimize OK (B_CRT), line = 638

	jmp l_05FC
@exit

; ------------------------------------------------------------

LIMIT	= DATAORIGIN+$075D
adr.RESULT	= [DATAORIGIN+$075E] .array [256]
.var RESULT	= adr.RESULT .word
A	= DATAORIGIN+$085E

@VarData	= LIMIT
@VarDataSize	= 258

	rts						; ret
.endl

.local	CRT_READSTRING_06B7				; FUNCTION | OVERLOAD
	sta LIMIT

; optimize OK (B_CRT), line = 648

	jsr CRT_READSTRINGI_05F8
	inx
	mva CRT_READSTRINGI_05F8.RESULT :STACKORIGIN,x
	mva CRT_READSTRINGI_05F8.RESULT+1 :STACKORIGIN+STACKWIDTH,x
	jsr ANTIC2ATASCII_0483
	inx
	lda ANTIC2ATASCII_0483.RESULT
	sta @move.src
	lda ANTIC2ATASCII_0483.RESULT+1
	sta @move.src+1
	mwy RESULT :bp2
	ldy #$00
	mva:rne (@move.src),y (:bp2),y+
	dex
@exit

; ------------------------------------------------------------

LIMIT	= DATAORIGIN+$085F
adr.RESULT	= [DATAORIGIN+$0860] .array [256]
.var RESULT	= adr.RESULT .word

@VarData	= LIMIT
@VarDataSize	= 257

	rts						; ret
.endl

.local	CRT_NEWLINE_06C0				; PROCEDURE | OVERLOAD
	sta OFFSET

; optimize OK (B_CRT), line = 670

	sta CRT_LEFTMARGIN

; optimize OK (B_CRT), line = 671

	lda CRT_CURSOR
	add CRT_SCREENWIDTH
	sta :STACKORIGIN+9
	lda CRT_CURSOR+1
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+9
	lda CRT_CURSOR
	sub CRT_VRAM
	sta @INTEGER.MOD.A
	lda CRT_CURSOR+1
	sbc CRT_VRAM+1
	sta @INTEGER.MOD.A+1
	lda #$00
	sbc #$00
	sta @INTEGER.MOD.A+2
	lda #$00
	sbc #$00
	sta @INTEGER.MOD.A+3
	lda CRT_SCREENWIDTH
	sta @INTEGER.MOD.B
	lda #$00
	sta @INTEGER.MOD.B+1
	sta @INTEGER.MOD.B+2
	sta @INTEGER.MOD.B+3
	jsr @INTEGER.MOD
	lda @INTEGER.MOD.RESULT
	sta :STACKORIGIN+10
	lda @INTEGER.MOD.RESULT+1
	sta :STACKORIGIN+STACKWIDTH+10
	lda :STACKORIGIN+9
	sub :STACKORIGIN+10
	tay
	lda :STACKORIGIN+STACKWIDTH+9
	sbc :STACKORIGIN+STACKWIDTH+10
	sta CRT_CURSOR+1
	tya
	add OFFSET
	sta CRT_CURSOR
	scc
	inc CRT_CURSOR+1

; ------------------------------------------------------------

OFFSET	= DATAORIGIN+$0960

@VarData	= OFFSET
@VarDataSize	= 1

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	CRT_NEWLINE_06EB				; PROCEDURE | OVERLOAD

; optimize OK (B_CRT), line = 676

	lda CRT_LEFTMARGIN
	jsr CRT_NEWLINE_06C0
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	CRT_WRITECENTERED_06F6				; PROCEDURE | OVERLOAD

; ------------------------------------------------------------

; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
; as Pointer
	lda :STACKORIGIN,x
	sta ROW
	dex
	jmi @main

; ------------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	lda :STACKORIGIN,x
	sta :bp2
	lda :STACKORIGIN+STACKWIDTH,x
	sta :bp2+1
	ldy #$00
	mva:rne (:bp2),y adr.S,y+
	mwa #adr.S S
	dex
@main

; optimize OK (B_CRT), line = 690

	lda CRT_SCREENWIDTH
	lsr @
	sta :STACKORIGIN+9
	lda adr.S
	lsr @
	sta :STACKORIGIN+10
	lda :STACKORIGIN+9
	sub :STACKORIGIN+10
	sub #$01
	sta OFF

; optimize OK (B_CRT), line = 691

	lda CRT_CURSOR
	add OFF
	sta CRT_CURSOR
	scc
	inc CRT_CURSOR+1

; optimize OK (B_CRT), line = 692

	lda OFF
	sta CRT_GOTOXY.X
	lda ROW
	sta CRT_GOTOXY.Y
	jsr CRT_GOTOXY

; optimize FAIL ('CRT_WRITE_053A', B_CRT), line = 693

	inx
	mva S :STACKORIGIN,x
	mva S+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITE_053A

; ------------------------------------------------------------

ROW	= DATAORIGIN+$0961
adr.S	= [DATAORIGIN+$0962] .array [256]
.var S	= adr.S .word
OFF	= DATAORIGIN+$0A62

@VarData	= ROW
@VarDataSize	= 258

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	CRT_WRITERIGHTALIGNED_0722			; PROCEDURE | OVERLOAD

; ------------------------------------------------------------

; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
; as Pointer
	lda :STACKORIGIN,x
	sta ROW
	dex
	jmi @main

; ------------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	lda :STACKORIGIN,x
	sta :bp2
	lda :STACKORIGIN+STACKWIDTH,x
	sta :bp2+1
	ldy #$00
	mva:rne (:bp2),y adr.S,y+
	mwa #adr.S S
	dex
@main

; optimize OK (B_CRT), line = 704

	lda CRT_SCREENWIDTH
	sub adr.S
	sta OFF

; optimize OK (B_CRT), line = 705

	lda CRT_CURSOR
	add OFF
	sta CRT_CURSOR
	scc
	inc CRT_CURSOR+1

; optimize OK (B_CRT), line = 706

	lda OFF
	sta CRT_GOTOXY.X
	lda ROW
	sta CRT_GOTOXY.Y
	jsr CRT_GOTOXY

; optimize FAIL ('CRT_WRITE_053A', B_CRT), line = 707

	inx
	mva S :STACKORIGIN,x
	mva S+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITE_053A

; ------------------------------------------------------------

ROW	= DATAORIGIN+$0A63
adr.S	= [DATAORIGIN+$0A64] .array [256]
.var S	= adr.S .word
OFF	= DATAORIGIN+$0B64

@VarData	= ROW
@VarDataSize	= 258

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	CRT_CLEARROW_0742				; PROCEDURE | OVERLOAD
	sta ROW

; optimize OK (B_CRT), line = 717

	lda CRT_LEFTMARGIN
	sta CRT_GOTOXY.X
	lda ROW
	sta CRT_GOTOXY.Y
	jsr CRT_GOTOXY

; optimize OK (B_CRT), line = 718

	lda CRT_SCREENWIDTH
	sta :ecx
	lda ROW
	sta :eax
	.ifdef fmulinit
	fmulu_8
	els
	imulCL
	eif
	lda CRT_VRAM
	add :eax
	sta SYSTEM.FILLBYTE_02BD.A
	lda CRT_VRAM+1
	adc :eax+1
	sta SYSTEM.FILLBYTE_02BD.A+1
	lda CRT_SCREENWIDTH
	sta SYSTEM.FILLBYTE_02BD.COUNT
	lda #$00
	sta SYSTEM.FILLBYTE_02BD.COUNT+1
	sta SYSTEM.FILLBYTE_02BD.VALUE
	.LOCAL +MAIN.SYSTEM.FILLBYTE_02BD
	m@INLINE
	.ENDL

; ------------------------------------------------------------

ROW	= DATAORIGIN+$0B65

@VarData	= ROW
@VarDataSize	= 1

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	CRT_INVERT					; PROCEDURE

; optimize OK (B_CRT), line = 734

	lda CRT_SCREENWIDTH
	sta :ecx
	lda Y
	sta :eax
	.ifdef fmulinit
	fmulu_8
	els
	imulCL
	eif
	lda CRT_VRAM
	add :eax
	tay
	lda CRT_VRAM+1
	adc :eax+1
	sta CURSOR+1
	tya
	add X
	sta CURSOR
	scc
	inc CURSOR+1

; --- WhileProlog
	jmp l_077C
l_077D

; optimize OK (B_CRT), line = 736

	ldy CURSOR+1
	sty :bp+1
	ldy CURSOR
	lda (:bp),y
	eor #$80
	sta (:bp),y

; optimize FAIL (0, B_CRT), line = 737

	dec WIDTH

; optimize FAIL (0, B_CRT), line = 738

	inc CURSOR
	sne
	inc CURSOR+1
l_077C

; optimize OK (B_CRT), line = 735

	lda WIDTH
	jne l_077D

; ------------------------------------------------------------

X	= DATAORIGIN+$0B66
Y	= DATAORIGIN+$0B67
WIDTH	= DATAORIGIN+$0B68
CURSOR	= DATAORIGIN+$0B69

@VarData	= X
@VarDataSize	= 5

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

; ------------------------------------------------------------

DEFAULT_SCREENWIDTH	= $28
DEFAULT_SCREENHEIGHT	= $18
CHAR_RETURN	= $9B
CHAR_ESCAPE	= $1B
CHAR_BACKSPACE	= $7E
CHAR_TAB	= $7F
CHAR_INVERSE	= $81
CHAR_CAPS	= $82
ICHAR_RETURN	= $DB
ICHAR_ESCAPE	= $5B
ICHAR_BACKSPACE	= $7E
ICHAR_TAB	= $7F
ICHAR_INVERSE	= $C1
ICHAR_CAPS	= $C2
adr.CRT_KEYCODE	= CODEORIGIN+$025D
.var CRT_KEYCODE	= adr.CRT_KEYCODE .word
CRT_VRAM	= DATAORIGIN+$0237
CRT_SIZE	= DATAORIGIN+$0239
CRT_SCREENWIDTH	= DATAORIGIN+$023B
CRT_SCREENHEIGHT	= DATAORIGIN+$023C
CRT_CURSOR	= DATAORIGIN+$023D
CRT_LEFTMARGIN	= DATAORIGIN+$023F
KBCODE	= $D209
CONSOL	= $D01F

.endl							; UNIT B_CRT

.local	GETRANDOM					; FUNCTION

; optimize OK (helpers.pas), line = 12

	lda MINP
	sta PROP
	lda MINP+1
	sta PROP+1

; --- RepeatUntilProlog
l_07A5

; optimize FAIL ('B_CRT.CRT_KEYPRESSED', helpers.pas), line = 14

	jsr B_CRT.CRT_KEYPRESSED
	lda B_CRT.CRT_KEYPRESSED.RESULT
	jne l_07A5

; --- RepeatUntilProlog
l_07AE

; optimize OK (helpers.pas), line = 17

	lda PROP
	add STEPS
	sta PROP
	lda PROP+1
	adc STEPS+1
	sta PROP+1

; optimize OK (helpers.pas), line = 18

	lda MAXP+1
	cmp PROP+1
	bne @+
	lda MAXP
	cmp PROP
@
	jcs l_07CA

; optimize OK (helpers.pas), line = 19

	lda MINP
	sta PROP
	lda MINP+1
	sta PROP+1
l_07CA

; optimize OK (helpers.pas), line = 20

	lda X
	sta B_CRT.CRT_GOTOXY.X
	lda Y
	sta B_CRT.CRT_GOTOXY.Y
	jsr B_CRT.CRT_GOTOXY

; optimize FAIL ('B_SYSTEM.WAITFRAME', helpers.pas), line = 21

	jsr B_SYSTEM.WAITFRAME

; optimize OK (helpers.pas), line = 22

	lda PROP
	sta B_CRT.CRT_WRITE_0565.NUM
	lda PROP+1
	sta B_CRT.CRT_WRITE_0565.NUM+1
	jsr B_CRT.CRT_WRITE_0565

; optimize FAIL ('B_CRT.CRT_WRITE_053A', helpers.pas), line = 23

	inx
	mva #$76 :STACKORIGIN,x
	mva #$0D :STACKORIGIN+STACKWIDTH,x
	jsr B_CRT.CRT_WRITE_053A

; optimize FAIL ('B_CRT.CRT_KEYPRESSED', helpers.pas), line = 25

	jsr B_CRT.CRT_KEYPRESSED
	lda B_CRT.CRT_KEYPRESSED.RESULT
	jeq l_07AE

; optimize OK (helpers.pas), line = 26

	lda PROP
	sta RESULT
	lda PROP+1
	sta RESULT+1
@exit

; ------------------------------------------------------------

MINP	= DATAORIGIN+$1008
MAXP	= DATAORIGIN+$100A
STEPS	= DATAORIGIN+$100C
X	= DATAORIGIN+$100E
Y	= DATAORIGIN+$100F
RESULT	= DATAORIGIN+$1010
PROP	= DATAORIGIN+$1012

@VarData	= MINP
@VarDataSize	= 10

	rts						; ret
.endl

.local	EFFECTWAIT					; PROCEDURE

; optimize OK (helpers.pas), line = 33

	lda #$78
	jsr B_SYSTEM.WAITFRAMES
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	READKEYANDSTICK					; FUNCTION

; -------------------  ASM Block 00000158  -------------------

;
        phr
  loop:
        lda $d300
        and #$0f
        cmp #$0f 
        bne foundstick

        lda consol		; START
        cmp #$05
        beq foundsave
        cmp #$03
        beq foundload

        lda skctl		; ANY KEY
        and #$04
        bne loop

        lda kbcode
        jmp loopend
  stickdata:
        // right, left, down, up --> 7= 0111=right 11=1011=left, 13=1101=down, 14=1110=up
        dta 0,0,0,0,    0,0, $73, 0,   0,0, $02, 0,     0, $26, $60
  foundstick:
        tay
        lda stickdata,y
        jmp loopend
  foundsave:
        lda #$1f 
        jmp loopend
  foundload:
        lda #$1e
        // check for key
  loopend:
        sta ch
        plr
  
; optimize OK (helpers.pas), line = 80

	lda CH
	sta RESULT
@exit

; ------------------------------------------------------------

RESULT	= DATAORIGIN+$1014
CH	= DATAORIGIN+$1015

@VarData	= CH
@VarDataSize	= 1

	rts						; ret
.endl

.local	CHECKKEYANDSTICK				; FUNCTION

; optimize OK (helpers.pas), line = 90

	lda #$00
	sta CH

; -------------------  ASM Block 00000159  -------------------

;
        phr

        lda $d300
        and #$0f
        cmp #$0f   
        bne foundstick

        lda consol		; START
        and #1
        beq foundconsol

        lda skctl		; ANY KEY
        and #$04
        bne loopend_zero

        lda kbcode
        jmp loopend
  stickdata:
        dta 0,0,0,0,0,0, $73, 0,0,0, $02, 0, 0, $26, $60
  foundstick:
        tay
        lda stickdata,y
        jmp loopend
  foundconsol:
        // check for key
  loopend_zero:
        lda #$00
  loopend:
        sta ch
        plr
  
; optimize OK (helpers.pas), line = 124

	lda CH
	sta RESULT
@exit

; ------------------------------------------------------------

RESULT	= DATAORIGIN+$1016
CH	= DATAORIGIN+$1017

@VarData	= CH
@VarDataSize	= 1

	rts						; ret
.endl

.local	WAITFORKEY					; PROCEDURE

; optimize FAIL ('B_CRT.CRT_WHEREY', helpers.pas), line = 131

	inx
	mva WAITKEY_STRING :STACKORIGIN,x
	mva WAITKEY_STRING+1 :STACKORIGIN+STACKWIDTH,x
	jsr B_CRT.CRT_WHEREY
	inx
	lda B_CRT.CRT_WHEREY.RESULT
	add #$02
	sta :STACKORIGIN,x
	jsr B_CRT.CRT_WRITECENTERED_06F6

; optimize FAIL ('B_CRT.CRT_READKEY', helpers.pas), line = 132

	jsr B_CRT.CRT_READKEY
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	CRT_WRITELN2					; PROCEDURE

; ------------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	lda :STACKORIGIN,x
	sta :bp2
	lda :STACKORIGIN+STACKWIDTH,x
	sta :bp2+1
	ldy #$00
	mva:rne (:bp2),y adr.S,y+
	mwa #adr.S S
	dex
@main

; optimize FAIL ('B_CRT.CRT_WRITE_053A', helpers.pas), line = 138

	inx
	mva S :STACKORIGIN,x
	mva S+1 :STACKORIGIN+STACKWIDTH,x
	jsr B_CRT.CRT_WRITE_053A

; optimize FAIL ('B_CRT.CRT_NEWLINE_06EB', helpers.pas), line = 139

	jsr B_CRT.CRT_NEWLINE_06EB

; optimize FAIL ('B_CRT.CRT_NEWLINE_06EB', helpers.pas), line = 140

	jsr B_CRT.CRT_NEWLINE_06EB

; ------------------------------------------------------------

adr.S	= [DATAORIGIN+$1018] .array [256]
.var S	= adr.S .word

@VarData	= S
@VarDataSize	= 256

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	CRT_WRITELN					; PROCEDURE

; ------------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	lda :STACKORIGIN,x
	sta :bp2
	lda :STACKORIGIN+STACKWIDTH,x
	sta :bp2+1
	ldy #$00
	mva:rne (:bp2),y adr.S,y+
	mwa #adr.S S
	dex
@main

; optimize FAIL ('B_CRT.CRT_WRITE_053A', helpers.pas), line = 146

	inx
	mva S :STACKORIGIN,x
	mva S+1 :STACKORIGIN+STACKWIDTH,x
	jsr B_CRT.CRT_WRITE_053A

; optimize FAIL ('B_CRT.CRT_NEWLINE_06EB', helpers.pas), line = 147

	jsr B_CRT.CRT_NEWLINE_06EB

; ------------------------------------------------------------

adr.S	= [DATAORIGIN+$1118] .array [256]
.var S	= adr.S .word

@VarData	= S
@VarDataSize	= 256

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	GETANSWER					; FUNCTION

; --- RepeatUntilProlog
l_0830

; optimize FAIL ('B_CRT.CRT_READKEY', helpers.pas), line = 156

	jsr B_CRT.CRT_READKEY
	lda B_CRT.CRT_READKEY.RESULT
	sta RESULT

; optimize OK (helpers.pas), line = 157

	lda A
	cmp RESULT
	jeq l_0830x
	lda B
	cmp RESULT
	jne l_0830
l_0830x

; optimize OK (helpers.pas), line = 158

	ldy #1
	lda RESULT
	cmp B
	beq @+
	dey
@
	tya
	sta RESULT
@exit

; ------------------------------------------------------------

A	= DATAORIGIN+$1218
B	= DATAORIGIN+$1219
RESULT	= DATAORIGIN+$121A

@VarData	= A
@VarDataSize	= 2

	rts						; ret
.endl

.local	GETYESNO					; FUNCTION

; optimize OK (helpers.pas), line = 165

	lda #$23
	sta GETANSWER.A
	lda #$2B
	sta GETANSWER.B
	jsr GETANSWER
	lda GETANSWER.RESULT
	sta RESULT
@exit

; ------------------------------------------------------------

RESULT	= DATAORIGIN+$121B
	rts						; ret
.endl

.local	READVALUE					; FUNCTION

; optimize FAIL ('B_CRT.CRT_WHEREX', helpers.pas), line = 174

	jsr B_CRT.CRT_WHEREX
	lda B_CRT.CRT_WHEREX.RESULT
	sta X

; optimize FAIL ('B_CRT.CRT_WHEREY', helpers.pas), line = 175

	jsr B_CRT.CRT_WHEREY
	lda B_CRT.CRT_WHEREY.RESULT
	sta Y

; --- RepeatUntilProlog
l_0876

; optimize OK (helpers.pas), line = 178

	lda X
	sta B_CRT.CRT_GOTOXY.X
	lda Y
	sta B_CRT.CRT_GOTOXY.Y
	jsr B_CRT.CRT_GOTOXY

; optimize FAIL ('B_CRT.CRT_WRITE_053A', helpers.pas), line = 179

	inx
	mva #$7A :STACKORIGIN,x
	mva #$0D :STACKORIGIN+STACKWIDTH,x
	jsr B_CRT.CRT_WRITE_053A

; optimize OK (helpers.pas), line = 180

	lda X
	sta B_CRT.CRT_GOTOXY.X
	lda Y
	sta B_CRT.CRT_GOTOXY.Y
	jsr B_CRT.CRT_GOTOXY

; optimize OK (helpers.pas), line = 182

	lda #$05
	jsr B_CRT.CRT_READSTRINGI_05F8
	inx
	lda B_CRT.CRT_READSTRINGI_05F8.RESULT
	sta @move.src
	lda B_CRT.CRT_READSTRINGI_05F8.RESULT+1
	sta @move.src+1
	mwy K :bp2
	ldy #$00
	mva:rne (@move.src),y (:bp2),y+

; optimize FAIL ('B_CRT.ANTIC2ATASCII_0483', helpers.pas), line = 183

	mva K :STACKORIGIN,x
	mva K+1 :STACKORIGIN+STACKWIDTH,x
	jsr B_CRT.ANTIC2ATASCII_0483
	inx
	lda B_CRT.ANTIC2ATASCII_0483.RESULT
	sta @move.src
	lda B_CRT.ANTIC2ATASCII_0483.RESULT+1
	sta @move.src+1
	mwy K :bp2
	ldy #$00
	mva:rne (@move.src),y (:bp2),y+
	dex

; optimize OK (helpers.pas), line = 184

	lda K
	sta SYSUTILS.STRTOINT_03E8.S
	lda K+1
	sta SYSUTILS.STRTOINT_03E8.S+1
	jsr SYSUTILS.STRTOINT_03E8
	lda SYSUTILS.STRTOINT_03E8.RESULT
	sta IVALUE
	lda SYSUTILS.STRTOINT_03E8.RESULT+1
	sta IVALUE+1

; optimize OK (helpers.pas), line = 185

	ldy #1
	lda IVALUE
	cmp MINVALUE
	lda IVALUE+1
	sbc MINVALUE+1
	svc
	eor #$80
	bpl @+
	dey
@
	sty :STACKORIGIN+9
	ldy #1
	lda MAXVALUE
	cmp IVALUE
	lda MAXVALUE+1
	sbc IVALUE+1
	svc
	eor #$80
	bpl @+
	dey
@
	tya
	and :STACKORIGIN+9
	sta :STACKORIGIN+9
	ldy #1
	lda IVALUE+1
	ora IVALUE
	beq @+
	dey
@
	tya
	ora :STACKORIGIN+9
	jeq l_0876

; optimize OK (helpers.pas), line = 189

	lda IVALUE
	sta RESULT
	lda IVALUE+1
	sta RESULT+1
@exit

; ------------------------------------------------------------

MINVALUE	= DATAORIGIN+$121C
MAXVALUE	= DATAORIGIN+$121E
RESULT	= DATAORIGIN+$1220
IVALUE	= DATAORIGIN+$1222
X	= DATAORIGIN+$1224
Y	= DATAORIGIN+$1225
adr.K	= [DATAORIGIN+$1226] .array [256]
.var K	= adr.K .word

@VarData	= MINVALUE
@VarDataSize	= 264

	rts						; ret
.endl

.local	READVALUENOZERO					; FUNCTION

; optimize FAIL ('B_CRT.CRT_WHEREX', helpers.pas), line = 201

	jsr B_CRT.CRT_WHEREX
	lda B_CRT.CRT_WHEREX.RESULT
	sta X

; optimize FAIL ('B_CRT.CRT_WHEREY', helpers.pas), line = 202

	jsr B_CRT.CRT_WHEREY
	lda B_CRT.CRT_WHEREY.RESULT
	sta Y

; --- RepeatUntilProlog
l_08C7

; optimize OK (helpers.pas), line = 205

	lda X
	sta B_CRT.CRT_GOTOXY.X
	lda Y
	sta B_CRT.CRT_GOTOXY.Y
	jsr B_CRT.CRT_GOTOXY

; optimize FAIL ('B_CRT.CRT_WRITE_053A', helpers.pas), line = 206

	inx
	mva #$7A :STACKORIGIN,x
	mva #$0D :STACKORIGIN+STACKWIDTH,x
	jsr B_CRT.CRT_WRITE_053A

; optimize OK (helpers.pas), line = 207

	lda X
	sta B_CRT.CRT_GOTOXY.X
	lda Y
	sta B_CRT.CRT_GOTOXY.Y
	jsr B_CRT.CRT_GOTOXY

; optimize OK (helpers.pas), line = 209

	lda #$05
	jsr B_CRT.CRT_READSTRINGI_05F8
	inx
	lda B_CRT.CRT_READSTRINGI_05F8.RESULT
	sta @move.src
	lda B_CRT.CRT_READSTRINGI_05F8.RESULT+1
	sta @move.src+1
	mwy K :bp2
	ldy #$00
	mva:rne (@move.src),y (:bp2),y+

; optimize FAIL ('B_CRT.ANTIC2ATASCII_0483', helpers.pas), line = 210

	mva K :STACKORIGIN,x
	mva K+1 :STACKORIGIN+STACKWIDTH,x
	jsr B_CRT.ANTIC2ATASCII_0483
	inx
	lda B_CRT.ANTIC2ATASCII_0483.RESULT
	sta @move.src
	lda B_CRT.ANTIC2ATASCII_0483.RESULT+1
	sta @move.src+1
	mwy K :bp2
	ldy #$00
	mva:rne (@move.src),y (:bp2),y+
	dex

; optimize OK (helpers.pas), line = 211

	lda K
	sta SYSUTILS.STRTOINT_03E8.S
	lda K+1
	sta SYSUTILS.STRTOINT_03E8.S+1
	jsr SYSUTILS.STRTOINT_03E8
	lda SYSUTILS.STRTOINT_03E8.RESULT
	sta IVALUE
	lda SYSUTILS.STRTOINT_03E8.RESULT+1
	sta IVALUE+1

; optimize OK (helpers.pas), line = 212

	lda IVALUE
	cmp MINVALUE
	lda IVALUE+1
	sbc MINVALUE+1
	svc
	eor #$80
	jmi l_08C7
	lda MAXVALUE
	cmp IVALUE
	lda MAXVALUE+1
	sbc IVALUE+1
	svc
	eor #$80
	jmi l_08C7

; optimize OK (helpers.pas), line = 213

	lda IVALUE
	sta RESULT
	lda IVALUE+1
	sta RESULT+1
@exit

; ------------------------------------------------------------

MINVALUE	= DATAORIGIN+$1326
MAXVALUE	= DATAORIGIN+$1328
RESULT	= DATAORIGIN+$132A
IVALUE	= DATAORIGIN+$132C
X	= DATAORIGIN+$132E
Y	= DATAORIGIN+$132F
adr.K	= [DATAORIGIN+$1330] .array [256]
.var K	= adr.K .word

@VarData	= MINVALUE
@VarDataSize	= 264

	rts						; ret
.endl

.local	LOADGANGSTER					; PROCEDURE
	sta G

; optimize OK (helpers.pas), line = 221

	lda GANGSTERFILENAME
	sta XBIOS.XBIOSOPENFILE.FILENAME
	lda GANGSTERFILENAME+1
	sta XBIOS.XBIOSOPENFILE.FILENAME+1
	jsr XBIOS.XBIOSOPENFILE

; optimize OK (helpers.pas), line = 222

	lda XBIOS.XBIOSIORESULT
	jeq l_0919

; optimize FAIL ('B_CRT.CRT_WRITE_053A', helpers.pas), line = 224

	inx
	mva #$82 :STACKORIGIN,x
	mva #$0D :STACKORIGIN+STACKWIDTH,x
	jsr B_CRT.CRT_WRITE_053A

; optimize FAIL ('WAITFORKEY', helpers.pas), line = 225

	jsr WAITFORKEY
l_0919

; optimize OK (helpers.pas), line = 227

	lda #$00
	sta P+2
	sta P+3
	sta P
	lda G
	sta P+1

; optimize OK (helpers.pas), line = 228

	lda P
	sta XBIOS.XBIOSSETFILEOFFSET.POS
	lda P+1
	sta XBIOS.XBIOSSETFILEOFFSET.POS+1
	lda P+2
	sta XBIOS.XBIOSSETFILEOFFSET.POS+2
	lda P+3
	sta XBIOS.XBIOSSETFILEOFFSET.POS+3
	jsr XBIOS.XBIOSSETFILEOFFSET

; optimize OK (helpers.pas), line = 229

	lda #$FF
	sta XBIOS.XBIOSSETLENGTH.LEN
	lda #$00
	sta XBIOS.XBIOSSETLENGTH.LEN+1
	jsr XBIOS.XBIOSSETLENGTH

; optimize OK (helpers.pas), line = 230

	lda #$00
	sta K

l_0936
; --- ForToDoCondition
	jsr XBIOS.XBIOSGETBYTE
	lda XBIOS.XBIOSGETBYTE.RESULT
	sta B

; optimize OK (helpers.pas), line = 233

	ldy K
	lda B
	sta $E600,y

; --- ForToDoEpilog
	inc K
	jne l_0936
l_0944

; optimize FAIL ('CRT_WRITELN', helpers.pas), line = 242

	inx
	mva BUF_GANGSTERTEXT1 :STACKORIGIN,x
	mva BUF_GANGSTERTEXT1+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN

; optimize FAIL ('CRT_WRITELN', helpers.pas), line = 243

	inx
	mva BUF_GANGSTERTEXT2 :STACKORIGIN,x
	mva BUF_GANGSTERTEXT2+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN

; optimize FAIL ('CRT_WRITELN', helpers.pas), line = 244

	inx
	mva BUF_GANGSTERTEXT3 :STACKORIGIN,x
	mva BUF_GANGSTERTEXT3+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN

; optimize FAIL ('CRT_WRITELN', helpers.pas), line = 245

	inx
	mva BUF_GANGSTERTEXT4 :STACKORIGIN,x
	mva BUF_GANGSTERTEXT4+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN

; optimize FAIL ('CRT_WRITELN', helpers.pas), line = 246

	inx
	mva BUF_GANGSTERTEXT5 :STACKORIGIN,x
	mva BUF_GANGSTERTEXT5+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN

; ------------------------------------------------------------

G	= DATAORIGIN+$1430
B	= DATAORIGIN+$1431
K	= DATAORIGIN+$1432
P	= DATAORIGIN+$1433

@VarData	= G
@VarDataSize	= 7

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	DLI_MAP						; PROCEDURE | ASSEMBLER | INTERRUPT

; -------------------  ASM Block 00000160  -------------------


dli:
    phr ; store registers

dlijmp:
    jmp dli1

dli1:
    lda #>MAP_FNT_ADDRESS
    sta $D409 ; CHBAS_real
    sta WSYNC

    mva #$0e atari.colpf0
    mva #$06 atari.colpf1
    mva #$88 atari.colpf2
    mva #$2a atari.colpf3
    mva #$00 atari.colbk

    ; move PMG to current position
    lda PLAYERPOS_X
    sta HPOSP0
    sta HPOSP1
    sta HPOSP2
    sta HPOSP3

    lda #<dli2
    sta dlijmp+1
    lda #>dli2
    sta dlijmp+2

    plr
    rti

dli2:
    mva #$ff atari.colpf1 ; lum
    mva #$00 atari.colpf2 ; hue

    lda #>MAINFONT_ADR
    sta $D409 ; CHBAS_real

    ; deactivate PMG by moving it out of screen
    lda #$0
    sta HPOSP0
    sta HPOSP1
    sta HPOSP2
    sta HPOSP3
    sta WSYNC

    ; next
    lda #<dli3
    sta dlijmp+1
    lda #>dli3
    sta dlijmp+2

    plr
    rti

dli3:
    sta WSYNC
    mva #$ff atari.colpf1 ; lum
    mva #$00 atari.colpf2 ; hue

    lda #<dli1
    sta dlijmp+1
    lda #>dli1
    sta dlijmp+2

    plr
    rti

	rti						; ret
.endl

.local	DLI_BLACK_CONSOLE				; PROCEDURE | ASSEMBLER | INTERRUPT

; -------------------  ASM Block 00000161  -------------------


    phr ; store registers
    mva #$0 atari.colpf0                 ;---- outline color
    mva #$0 atari.colpf1                ;---- dark color
    mva #$0 atari.colpf2                ;---- face shadow color
    mva #$0 atari.colbk                 ;---- back color
    plr                                  ;---- restore registers

	rti						; ret
.endl

.local	DLI_CONSOLE					; PROCEDURE | ASSEMBLER | INTERRUPT

; -------------------  ASM Block 00000162  -------------------


    phr ; store registers
    mva loccolbk atari.colbk
    mva loccolpf0 atari.colpf0                 ;---- outline color
    mva loccolpf1 atari.colpf1                 ;---- outline color
    mva loccolpf2 atari.colpf2                 ;---- outline color
    plr                                  ;---- restore registers

	rti						; ret
.endl

.local	WAITFRAMES					; PROCEDURE
	sta FRAMES

; --- WhileProlog
	jmp l_0970
l_0971

; optimize FAIL ('B_SYSTEM.WAITFRAME', console.pas), line = 13

	jsr B_SYSTEM.WAITFRAME

; optimize FAIL (0, console.pas), line = 14

	dec FRAMES
l_0970

; optimize OK (console.pas), line = 11

	lda FRAMES
	jne l_0971

; ------------------------------------------------------------

FRAMES	= DATAORIGIN+$1438

@VarData	= FRAMES
@VarDataSize	= 1

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	BLACKCONSOLE					; PROCEDURE

; optimize OK (console.pas), line = 28

	lda CONSOLESTATE
	jne l_0998
	jmp @exit
l_0998

; optimize OK (console.pas), line = 29

	lda <DLI_BLACK_CONSOLE
	sta B_SYSTEM.ENABLEDLI.DLIPTR
	lda >DLI_BLACK_CONSOLE
	sta B_SYSTEM.ENABLEDLI.DLIPTR+1
	jsr B_SYSTEM.ENABLEDLI

; optimize OK (console.pas), line = 30

	lda #$40
	sta ATARI.DLISTL
	lda #$FC
	sta ATARI.DLISTL+1

; optimize OK (console.pas), line = 31

	lda #$00
	sta CONSOLESTATE
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	ENABLECONSOLE					; PROCEDURE

; optimize OK (console.pas), line = 37

	lda CONSOLESTATE
	cmp #$01
	jne l_09BA
	jmp @exit
l_09BA

; optimize OK (console.pas), line = 39

	lda <DLI_CONSOLE
	sta B_SYSTEM.ENABLEDLI.DLIPTR
	lda >DLI_CONSOLE
	sta B_SYSTEM.ENABLEDLI.DLIPTR+1
	jsr B_SYSTEM.ENABLEDLI

; optimize OK (console.pas), line = 40

	lda #$00
	sta ATARI.DLISTL
	lda #$FC
	sta ATARI.DLISTL+1

; optimize OK (console.pas), line = 41

	lda #$CC
	jsr B_SYSTEM.SETCHARSET

; optimize OK (console.pas), line = 43

	lda #$00
	sta B_CRT.CRT_INIT_04BE.VRAM_ADDRESS
	lda #$C8
	sta B_CRT.CRT_INIT_04BE.VRAM_ADDRESS+1
	lda #$28
	sta B_CRT.CRT_INIT_04BE.WIDTH
	lda #$19
	sta B_CRT.CRT_INIT_04BE.HEIGHT
	jsr B_CRT.CRT_INIT_04BE

; optimize OK (console.pas), line = 44

	lda #$01
	sta CONSOLESTATE
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	ENABLEMAPCONSOLE				; PROCEDURE

; optimize OK (console.pas), line = 50

	lda CONSOLESTATE
	cmp #$02
	jne l_09E2
	jmp @exit
l_09E2

; optimize OK (console.pas), line = 51

	lda <DLI_MAP
	sta B_SYSTEM.ENABLEDLI.DLIPTR
	lda >DLI_MAP
	sta B_SYSTEM.ENABLEDLI.DLIPTR+1
	jsr B_SYSTEM.ENABLEDLI

; optimize OK (console.pas), line = 52

	lda #$80
	sta ATARI.DLISTL
	lda #$FC
	sta ATARI.DLISTL+1

; optimize OK (console.pas), line = 53

	lda #$F0
	jsr B_SYSTEM.SETCHARSET

; optimize OK (console.pas), line = 54

	lda #$00
	sta B_CRT.CRT_INIT_04BE.VRAM_ADDRESS
	lda #$F4
	sta B_CRT.CRT_INIT_04BE.VRAM_ADDRESS+1
	lda #$28
	sta B_CRT.CRT_INIT_04BE.WIDTH
	lda #$19
	sta B_CRT.CRT_INIT_04BE.HEIGHT
	jsr B_CRT.CRT_INIT_04BE

; optimize OK (console.pas), line = 55

	lda #$02
	sta CONSOLESTATE
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	SHOWLOCATIONHEADER				; PROCEDURE

; optimize FAIL ('ENABLECONSOLE', locations.pas), line = 43

	jsr ENABLECONSOLE

; optimize FAIL ('B_CRT.CRT_CLEAR_04E8', locations.pas), line = 44

	jsr B_CRT.CRT_CLEAR_04E8

; optimize FAIL ('B_CRT.CRT_WRITECENTERED_06F6', locations.pas), line = 45

	inx
	mva LOC_NAME :STACKORIGIN,x
	mva LOC_NAME+1 :STACKORIGIN+STACKWIDTH,x
	inx
	mva #$01 :STACKORIGIN,x
	jsr B_CRT.CRT_WRITECENTERED_06F6

; optimize OK (locations.pas), line = 46

	lda #$00
	sta B_CRT.CRT_INVERT.X
	lda #$01
	sta B_CRT.CRT_INVERT.Y
	lda B_CRT.CRT_SCREENWIDTH
	sta B_CRT.CRT_INVERT.WIDTH
	jsr B_CRT.CRT_INVERT
	mva #$01 adr.CURRENTSUBLOCATIONNAME
	mva #$00 adr.CURRENTSUBLOCATIONNAME+1

; optimize OK (locations.pas), line = 49

	lda #$00
	sta IDX

l_0A0D
; --- ForToDoCondition
	ldy IDX
	cpy #$04
	jcs l_0A1B

; optimize OK (locations.pas), line = 51

	lda adr.LOC_MAP_PLACES,y
	cmp CURRENTMAP
	jne l_0A32

; optimize OK (locations.pas), line = 52

	lda IDX
	asl @
	tay
	lda adr.LOC_SUBLOCATION_NAMES,y
	sta @move.src
	lda adr.LOC_SUBLOCATION_NAMES+1,y
	sta @move.src+1
	@moveSTRING CURRENTSUBLOCATIONNAME #41
l_0A32

; --- ForToDoEpilog
	inc IDX
	jne l_0A0D
l_0A1B

; optimize FAIL ('B_CRT.CRT_WRITECENTERED_06F6', locations.pas), line = 54

	inx
	mva CURRENTSUBLOCATIONNAME :STACKORIGIN,x
	mva CURRENTSUBLOCATIONNAME+1 :STACKORIGIN+STACKWIDTH,x
	inx
	mva #$02 :STACKORIGIN,x
	jsr B_CRT.CRT_WRITECENTERED_06F6

; optimize OK (locations.pas), line = 55

	lda #$00
	sta B_CRT.CRT_GOTOXY.X
	lda #$04
	sta B_CRT.CRT_GOTOXY.Y
	jsr B_CRT.CRT_GOTOXY

; ------------------------------------------------------------

IDX	= DATAORIGIN+$1464
adr.SUBLOCATION	= [DATAORIGIN+$1465] .array [41]
.var SUBLOCATION	= adr.SUBLOCATION .word

@VarData	= IDX
@VarDataSize	= 42

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	LOADLOCATION					; PROCEDURE
	sta L

; optimize OK (locations.pas), line = 62

	lda LASTLOCATIONSTRINGS
	cmp L
	jne l_0A5E
	jmp @exit
l_0A5E

; optimize OK (locations.pas), line = 63

	lda L
	sta LASTLOCATIONSTRINGS

; optimize OK (locations.pas), line = 64

	lda L
	sta @CASETMP_0009
	cmp #$01
	jne l_0A72
@

; optimize OK (locations.pas), line = 65

	lda LOCABANKFNAME
	sta LOCFNAME
	lda LOCABANKFNAME+1
	sta LOCFNAME+1
	jmp a_0009
l_0A72
	cmp #$02
	jne l_0A80

; optimize OK (locations.pas), line = 66

	lda LOCAFORGFNAME
	sta LOCFNAME
	lda LOCAFORGFNAME+1
	sta LOCFNAME+1
	jmp a_0009
l_0A80
	cmp #$03
	jne l_0A8E

; optimize OK (locations.pas), line = 67

	lda LOCAMONYFNAME
	sta LOCFNAME
	lda LOCAMONYFNAME+1
	sta LOCFNAME+1
	jmp a_0009
l_0A8E
	cmp #$04
	jne l_0A9C

; optimize OK (locations.pas), line = 68

	lda LOCALOANFNAME
	sta LOCFNAME
	lda LOCALOANFNAME+1
	sta LOCFNAME+1
	jmp a_0009
l_0A9C
	cmp #$05
	jne l_0AAA

; optimize OK (locations.pas), line = 69

	lda LOCAPOLIFNAME
	sta LOCFNAME
	lda LOCAPOLIFNAME+1
	sta LOCFNAME+1
	jmp a_0009
l_0AAA
	cmp #$06
	jne l_0AB8

; optimize OK (locations.pas), line = 70

	lda LOCACARSFNAME
	sta LOCFNAME
	lda LOCACARSFNAME+1
	sta LOCFNAME+1
	jmp a_0009
l_0AB8
	cmp #$07
	jne l_0AC6

; optimize OK (locations.pas), line = 71

	lda LOCAPUBBFNAME
	sta LOCFNAME
	lda LOCAPUBBFNAME+1
	sta LOCFNAME+1
	jmp a_0009
l_0AC6
	cmp #$14
	jne l_0AD4

; optimize OK (locations.pas), line = 72

	lda LOCAPUBCFNAME
	sta LOCFNAME
	lda LOCAPUBCFNAME+1
	sta LOCFNAME+1
	jmp a_0009
l_0AD4
	cmp #$09
	jne l_0AE2

; optimize OK (locations.pas), line = 73

	lda LOCASTORFNAME
	sta LOCFNAME
	lda LOCASTORFNAME+1
	sta LOCFNAME+1
	jmp a_0009
l_0AE2
	cmp #$0A
	jne l_0AF0

; optimize OK (locations.pas), line = 74

	lda LOCAHIDEFNAME
	sta LOCFNAME
	lda LOCAHIDEFNAME+1
	sta LOCFNAME+1
	jmp a_0009
l_0AF0
	cmp #$0B
	jne l_0AFE

; optimize OK (locations.pas), line = 75

	lda LOCAGAMBFNAME
	sta LOCFNAME
	lda LOCAGAMBFNAME+1
	sta LOCFNAME+1
	jmp a_0009
l_0AFE
	cmp #$0C
	jne l_0B0C

; optimize OK (locations.pas), line = 76

	lda LOCASUBWFNAME
	sta LOCFNAME
	lda LOCASUBWFNAME+1
	sta LOCFNAME+1
	jmp a_0009
l_0B0C
	cmp #$0D
	jne l_0B1A

; optimize OK (locations.pas), line = 77

	lda LOCAARMSFNAME
	sta LOCFNAME
	lda LOCAARMSFNAME+1
	sta LOCFNAME+1
	jmp a_0009
l_0B1A
	cmp #$13
	jne l_0B28

; optimize OK (locations.pas), line = 78

	lda LOCAMAINFNAME
	sta LOCFNAME
	lda LOCAMAINFNAME+1
	sta LOCFNAME+1
	jmp a_0009
l_0B28
	cmp #$16
	jne l_0B36

; optimize OK (locations.pas), line = 79

	lda LOCAJOBBFNAME
	sta LOCFNAME
	lda LOCAJOBBFNAME+1
	sta LOCFNAME+1
	jmp a_0009
l_0B36
	cmp #$18
	jne l_0B44

; optimize OK (locations.pas), line = 80

	lda LOCAMONYFNAME
	sta LOCFNAME
	lda LOCAMONYFNAME+1
	sta LOCFNAME+1
	jmp a_0009
l_0B44
	cmp #$17
	jne l_0B52

; optimize OK (locations.pas), line = 81

	lda LOCACENTFNAME
	sta LOCFNAME
	lda LOCACENTFNAME+1
	sta LOCFNAME+1
	jmp a_0009
l_0B52
	cmp #$19
	jne l_0B60

; optimize OK (locations.pas), line = 82

	lda LOCACOURFNAME
	sta LOCFNAME
	lda LOCACOURFNAME+1
	sta LOCFNAME+1
	jmp a_0009
l_0B60
	cmp #$1A
	jne l_0B6E

; optimize OK (locations.pas), line = 83

	lda LOCACAUGFNAME
	sta LOCFNAME
	lda LOCACAUGFNAME+1
	sta LOCFNAME+1
	jmp a_0009
l_0B6E
	cmp #$1B
	jne l_0B7C

; optimize OK (locations.pas), line = 84

	lda LOCAROADFNAME
	sta LOCFNAME
	lda LOCAROADFNAME+1
	sta LOCFNAME+1
	jmp a_0009
l_0B7C
	cmp #$15
	jne l_0B8A

; optimize OK (locations.pas), line = 85

	lda LOCAUPDTFNAME
	sta LOCFNAME
	lda LOCAUPDTFNAME+1
	sta LOCFNAME+1
	jmp a_0009
l_0B8A
	cmp #$1C
	jne l_0B98

; optimize OK (locations.pas), line = 86

	lda LOCASETUFNAME
	sta LOCFNAME
	lda LOCASETUFNAME+1
	sta LOCFNAME+1
l_0B98
a_0009

; optimize OK (locations.pas), line = 88

	lda LOCFNAME
	sta XBAPLIB.XBUNAPL.FNAM
	lda LOCFNAME+1
	sta XBAPLIB.XBUNAPL.FNAM+1
	lda #$80
	sta XBAPLIB.XBUNAPL.OUTPUTPOINTER
	lda #$BE
	sta XBAPLIB.XBUNAPL.OUTPUTPOINTER+1
	jsr XBAPLIB.XBUNAPL

; ------------------------------------------------------------

L	= DATAORIGIN+$148E
LOCFNAME	= DATAORIGIN+$148F
@CASETMP_0009	= DATAORIGIN+$1491

@VarData	= L
@VarDataSize	= 4

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	SHOWLOCATION					; FUNCTION
	sta L

; optimize OK (locations.pas), line = 97

	jsr LOADLOCATION

; optimize OK (locations.pas), line = 98

	lda #$63
	sta CURRENTSUBLOCATION

; optimize OK (locations.pas), line = 99

	lda #$00
	sta I

l_0BD0
; --- ForToDoCondition
	ldy I
	cpy #$04
	jcs l_0BDE

; optimize OK (locations.pas), line = 100

	lda adr.LOC_MAP_PLACES,y
	cmp CURRENTMAP
	jne l_0BF5
	lda I
	sta CURRENTSUBLOCATION
l_0BF5

; --- ForToDoEpilog
	inc I
	jne l_0BD0
l_0BDE

; optimize OK (locations.pas), line = 101

	lda CURRENTSUBLOCATION
	cmp #$63
	jne l_0C15

; --- RepeatUntilProlog
l_0C17
	jmp l_0C17
l_0C15

; optimize OK (locations.pas), line = 102

	lda LOC_NOPTIONS
	jne l_0C30

; optimize OK (locations.pas), line = 104

	lda #$63
	sta RESULT
	jmp @exit
l_0C30

; optimize FAIL ('SHOWLOCATIONHEADER', locations.pas), line = 108

	jsr SHOWLOCATIONHEADER

; optimize OK (locations.pas), line = 111

	lda #$00
	sta B_CRT.CRT_GOTOXY.X
	lda #$04
	sta B_CRT.CRT_GOTOXY.Y
	jsr B_CRT.CRT_GOTOXY

; optimize FAIL ('B_CRT.CRT_WRITE_053A', locations.pas), line = 112

	inx
	mva LOC_DESCRIPTION_1 :STACKORIGIN,x
	mva LOC_DESCRIPTION_1+1 :STACKORIGIN+STACKWIDTH,x
	jsr B_CRT.CRT_WRITE_053A

; optimize OK (locations.pas), line = 113

	lda #$00
	sta B_CRT.CRT_GOTOXY.X
	lda #$05
	sta B_CRT.CRT_GOTOXY.Y
	jsr B_CRT.CRT_GOTOXY

; optimize FAIL ('B_CRT.CRT_WRITE_053A', locations.pas), line = 114

	inx
	mva LOC_DESCRIPTION_2 :STACKORIGIN,x
	mva LOC_DESCRIPTION_2+1 :STACKORIGIN+STACKWIDTH,x
	jsr B_CRT.CRT_WRITE_053A

; optimize OK (locations.pas), line = 116

	lda #$00
	sta B_CRT.CRT_GOTOXY.X
	lda #$07
	sta B_CRT.CRT_GOTOXY.Y
	jsr B_CRT.CRT_GOTOXY

; optimize OK (locations.pas), line = 117

	lda #$00
	sta I

l_0C50
; --- ForToDoCondition
	lda I
	cmp #$0A
	jcs l_0C5E

; optimize OK (locations.pas), line = 119

	asl @
	tay
	lda adr.LOC_OPTIONS,y
	sta @move.src
	lda adr.LOC_OPTIONS+1,y
	sta @move.src+1
	@moveSTRING TMPS #41

; optimize OK (locations.pas), line = 120

	lda adr.TMPS
	jne l_0C72
	jmp b_0C50					; break
l_0C72

; optimize OK (locations.pas), line = 122

	lda adr.TMPS+$01
	jne l_0C88

; optimize FAIL ('CRT_WRITELN', locations.pas), line = 123
	jmp l_0C95
l_0C88

; optimize FAIL ('B_CRT.CRT_NEWLINE_06EB', locations.pas), line = 126

	jsr B_CRT.CRT_NEWLINE_06EB

; optimize FAIL ('CRT_WRITELN', locations.pas), line = 127
l_0C95

	inx
	mva TMPS :STACKORIGIN,x
	mva TMPS+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN

; --- ForToDoEpilog
	inc I
	jne l_0C50
l_0C5E
b_0C50

; --- RepeatUntilProlog
l_0C9F

; optimize FAIL ('B_CRT.CRT_READKEY', locations.pas), line = 133

	jsr B_CRT.CRT_READKEY
	lda B_CRT.CRT_READKEY.RESULT
	sta CHOICE

; optimize OK (locations.pas), line = 134

	tay
	lda B_CRT.adr.CRT_KEYCODE,y
	sta I

; optimize OK (locations.pas), line = 135

	cmp #$31
	jcc l_0C9F
	lda #$31
	add LOC_NOPTIONS
	sta :STACKORIGIN+11
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+11
	lda #$00
	cmp :STACKORIGIN+STACKWIDTH+11
	bne @+
	lda I
	cmp :STACKORIGIN+11
@
	jcs l_0C9F
@

; optimize OK (locations.pas), line = 136

	lda I
	sub #$30
	sta RESULT
@exit

; ------------------------------------------------------------

L	= DATAORIGIN+$1492
RESULT	= DATAORIGIN+$1493
I	= DATAORIGIN+$1494
CHOICE	= DATAORIGIN+$1495
adr.TMPS	= [DATAORIGIN+$1496] .array [41]
.var TMPS	= adr.TMPS .word

@VarData	= L
@VarDataSize	= 44

	rts						; ret
.endl

.local	NEXTPLAYER					; PROCEDURE

; optimize OK (player.pas), line = 9

	inc CURRENTPLAYER

; optimize OK (player.pas), line = 10

	lda NPLAYERS
	sub #$01
	sta :STACKORIGIN+10
	lda #$00
	sbc #$00
	sta :STACKORIGIN+STACKWIDTH+10
	lda :STACKORIGIN+10
	cmp CURRENTPLAYER
	lda :STACKORIGIN+STACKWIDTH+10
	sbc #$00
	svc
	eor #$80
	jpl l_0CFF

; optimize OK (player.pas), line = 12

	lda CURRENTPLAYER
	sub NPLAYERS
	sta CURRENTPLAYER

; optimize OK (player.pas), line = 13

	inc CURRENTMONTH

; optimize OK (player.pas), line = 14

	lda CURRENTMONTH
	cmp #$0D
	jcc l_0D28

; optimize OK (player.pas), line = 15

	inc CURRENTYEAR

; optimize OK (player.pas), line = 16

	lda #$01
	sta CURRENTMONTH
l_0D28
l_0CFF
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	INITPLAYERS					; PROCEDURE

; optimize OK (player.pas), line = 27

	lda #$00
	tay

l_0D48
; --- ForToDoCondition
	cpy #$04
	jcs l_0D56

; optimize OK (player.pas), line = 29

	lda #$03
	sta adr.PLMAPPOSX,y

; optimize OK (player.pas), line = 30

	lda #$02
	sta adr.PLMAPPOSY,y

; optimize OK (player.pas), line = 31

	lda #$00
	sta adr.PLCURRENTMAP,y

; --- ForToDoEpilog
	iny
	jne l_0D48
l_0D56
	sty K

; ------------------------------------------------------------

K	= DATAORIGIN+$14BF

@VarData	= K
@VarDataSize	= 1

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	PLAYERSTURN					; PROCEDURE

; optimize FAIL ('B_CRT.CRT_CLEAR_04E8', player.pas), line = 48

	jsr B_CRT.CRT_CLEAR_04E8

; optimize FAIL ('B_CRT.CRT_WRITECENTERED_06F6', player.pas), line = 49

	inx
	mva LOC_STRING_1 :STACKORIGIN,x
	mva LOC_STRING_1+1 :STACKORIGIN+STACKWIDTH,x
	inx
	mva #$04 :STACKORIGIN,x
	jsr B_CRT.CRT_WRITECENTERED_06F6

; optimize FAIL ('B_CRT.CRT_WRITECENTERED_06F6', player.pas), line = 50

	inx
	mva CURRENTPLAYER :STACKORIGIN,x
	inx
	mva #$03 :STACKORIGIN,x
	jsr shlEAX_CL.BYTE
	dex
	lda :STACKORIGIN+STACKWIDTH,x
	asl :STACKORIGIN,x
	rol @
	sta :STACKORIGIN+STACKWIDTH,x
	ldy :STACKORIGIN,x
	lda adr.GANGSTERNAMES,y
	sta :STACKORIGIN,x
	lda adr.GANGSTERNAMES+1,y
	sta :STACKORIGIN+STACKWIDTH,x
	inx
	mva #$05 :STACKORIGIN,x
	jsr B_CRT.CRT_WRITECENTERED_06F6

; optimize FAIL ('B_CRT.CRT_WRITECENTERED_06F6', player.pas), line = 51

	inx
	mva LOC_STRING_2 :STACKORIGIN,x
	mva LOC_STRING_2+1 :STACKORIGIN+STACKWIDTH,x
	inx
	mva #$06 :STACKORIGIN,x
	jsr B_CRT.CRT_WRITECENTERED_06F6

; optimize OK (player.pas), line = 53

	lda #$00
	sta CRT.SOUND.CHAN
	lda #$64
	sta CRT.SOUND.FREQ
	lda #$0A
	sta CRT.SOUND.DIST
	lda #$0F
	sta CRT.SOUND.VOL
	jsr CRT.SOUND

; optimize OK (player.pas), line = 54

	lda #$1E
	jsr WAITFRAMES

; optimize OK (player.pas), line = 55

	lda #$00
	sta CRT.SOUND.CHAN
	lda #$60
	sta CRT.SOUND.FREQ
	lda #$0A
	sta CRT.SOUND.DIST
	lda #$0F
	sta CRT.SOUND.VOL
	jsr CRT.SOUND

; optimize OK (player.pas), line = 56

	lda #$14
	jsr WAITFRAMES

; optimize OK (player.pas), line = 57

	lda #$00
	sta CRT.SOUND.CHAN
	lda #$79
	sta CRT.SOUND.FREQ
	lda #$0A
	sta CRT.SOUND.DIST
	lda #$0F
	sta CRT.SOUND.VOL
	jsr CRT.SOUND

; optimize OK (player.pas), line = 58

	lda #$0A
	jsr WAITFRAMES

; optimize FAIL ('CRT.NOSOUND', player.pas), line = 71

	jsr CRT.NOSOUND

; optimize FAIL ('WAITFORKEY', player.pas), line = 72

	jsr WAITFORKEY

; optimize FAIL ('B_CRT.CRT_NEWLINE_06EB', player.pas), line = 73

	jsr B_CRT.CRT_NEWLINE_06EB

; optimize FAIL ('B_CRT.CRT_NEWLINE_06EB', player.pas), line = 74

	jsr B_CRT.CRT_NEWLINE_06EB
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	PLACECURRENTPLAYER				; PROCEDURE

; optimize OK (player.pas), line = 81

	ldy CURRENTPLAYER
	lda adr.PLMAPPOSX,y
	sta MAPPOS_X

; optimize OK (player.pas), line = 82

	lda adr.PLMAPPOSY,y
	sta MAPPOS_Y

; optimize OK (player.pas), line = 83

	lda #$00
	sta :STACKORIGIN+STACKWIDTH+10
	lda MAPPOS_X
	asl @
	rol :STACKORIGIN+STACKWIDTH+10
	asl @
	asl @
	add #$31
	sta PLAYERPOS_X

; optimize OK (player.pas), line = 84

	lda #$00
	sta :STACKORIGIN+STACKWIDTH+10
	lda MAPPOS_Y
	asl @
	rol :STACKORIGIN+STACKWIDTH+10
	asl @
	asl @
	add #$24
	sta PLAYERPOS_Y

; optimize OK (player.pas), line = 85

	lda adr.PLCURRENTMAP,y
	sta CURRENTMAP
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	ADDMONEY					; PROCEDURE

; optimize OK (helpersGame.pas), line = 7

	lda CURRENTPLAYER
	asl @
	asl @
	tay
	lda adr.PLMONEY,y
	add AMOUNT
	sta :STACKORIGIN+10
	lda adr.PLMONEY+1,y
	adc AMOUNT+1
	sta :STACKORIGIN+STACKWIDTH+10
	lda adr.PLMONEY+2,y
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+10
	lda adr.PLMONEY+3,y
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+10
	lda :STACKORIGIN+10
	sta adr.PLMONEY,y
	lda :STACKORIGIN+STACKWIDTH+10
	sta adr.PLMONEY+1,y
	lda :STACKORIGIN+STACKWIDTH*2+10
	sta adr.PLMONEY+2,y
	lda :STACKORIGIN+STACKWIDTH*3+10
	sta adr.PLMONEY+3,y

; ------------------------------------------------------------

AMOUNT	= DATAORIGIN+$14C0

@VarData	= AMOUNT
@VarDataSize	= 2

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	SUBMONEY					; PROCEDURE

; optimize OK (helpersGame.pas), line = 13

	lda CURRENTPLAYER
	asl @
	asl @
	tay
	lda adr.PLMONEY,y
	sub AMOUNT
	sta :STACKORIGIN+10
	lda adr.PLMONEY+1,y
	sbc AMOUNT+1
	sta :STACKORIGIN+STACKWIDTH+10
	lda adr.PLMONEY+2,y
	sbc #$00
	sta :STACKORIGIN+STACKWIDTH*2+10
	lda adr.PLMONEY+3,y
	sbc #$00
	sta :STACKORIGIN+STACKWIDTH*3+10
	lda :STACKORIGIN+10
	sta adr.PLMONEY,y
	lda :STACKORIGIN+STACKWIDTH+10
	sta adr.PLMONEY+1,y
	lda :STACKORIGIN+STACKWIDTH*2+10
	sta adr.PLMONEY+2,y
	lda :STACKORIGIN+STACKWIDTH*3+10
	sta adr.PLMONEY+3,y

; ------------------------------------------------------------

AMOUNT	= DATAORIGIN+$14C2

@VarData	= AMOUNT
@VarDataSize	= 2

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	CRACKEDBANK					; PROCEDURE

; optimize OK (helpersGame.pas), line = 21

	lda #$01
	jsr LOADLOCATION

; optimize OK (helpersGame.pas), line = 22

	lda #$00
	jsr SYSTEM.RANDOM_02E9
	inx
	mva SYSTEM.RANDOM_02E9.RESULT :STACKORIGIN,x
	inx
	mva #$0B :STACKORIGIN,x
	jsr imulBYTE
	lda :eax
	add #$A0
	sta :STACKORIGIN-1,x
	lda :eax+1
	adc #$0F
	sta :STACKORIGIN-1+STACKWIDTH,x
	lda :STACKORIGIN-1,x
	add P
	sta M
	lda :STACKORIGIN-1+STACKWIDTH,x
	adc P+1
	sta M+1
	dex
	dex

; optimize FAIL ('ENABLECONSOLE', helpersGame.pas), line = 25

	jsr ENABLECONSOLE

; optimize FAIL ('SHOWLOCATIONHEADER', helpersGame.pas), line = 26

	jsr SHOWLOCATIONHEADER

; optimize FAIL ('B_CRT.CRT_WRITECENTERED_06F6', helpersGame.pas), line = 27

	inx
	mva LOC_STRING_10 :STACKORIGIN,x
	mva LOC_STRING_10+1 :STACKORIGIN+STACKWIDTH,x
	inx
	mva #$06 :STACKORIGIN,x
	jsr B_CRT.CRT_WRITECENTERED_06F6

; optimize OK (helpersGame.pas), line = 28

	lda #$07
	sta K

; optimize OK (helpersGame.pas), line = 31

	lda P+1
	bne @+
	lda P
	cmp #$01
@
	jne l_0E35

; optimize OK (helpersGame.pas), line = 33

	ldy CURRENTPLAYER
	lda adr.PLOPPORTUNITY,y
	ora #$02
	jeq l_0E4F

; optimize FAIL ('B_CRT.CRT_WRITECENTERED_06F6', helpersGame.pas), line = 35

	inx
	mva LOC_STRING_15 :STACKORIGIN,x
	mva LOC_STRING_15+1 :STACKORIGIN+STACKWIDTH,x
	inx
	mva #$07 :STACKORIGIN,x
	jsr B_CRT.CRT_WRITECENTERED_06F6

; optimize OK (helpersGame.pas), line = 36

	lda K
	add #$02
	sta K

; optimize OK (helpersGame.pas), line = 37

	lda M
	add #$4C
	sta M
	lda M+1
	adc #$1D
	sta M+1
l_0E4F

; optimize OK (helpersGame.pas), line = 39

	ldy CURRENTPLAYER
	lda adr.PLOPPORTUNITY,y
	and #$FD
	sta adr.PLOPPORTUNITY,y
l_0E35

; optimize FAIL ('B_CRT.CRT_WRITECENTERED_06F6', helpersGame.pas), line = 42

	inx
	mva LOC_STRING_14 :STACKORIGIN,x
	mva LOC_STRING_14+1 :STACKORIGIN+STACKWIDTH,x
	inx
	mva K :STACKORIGIN,x
	jsr B_CRT.CRT_WRITECENTERED_06F6

; optimize OK (helpersGame.pas), line = 43

	lda K
	add #$01
	sta B_CRT.CRT_GOTOXY.Y
	lda #$11
	sta B_CRT.CRT_GOTOXY.X
	jsr B_CRT.CRT_GOTOXY

; optimize OK (helpersGame.pas), line = 44

	lda M
	sta B_CRT.CRT_WRITE_0565.NUM
	lda M+1
	sta B_CRT.CRT_WRITE_0565.NUM+1
	jsr B_CRT.CRT_WRITE_0565

; optimize FAIL ('CRT_WRITELN', helpersGame.pas), line = 45

	inx
	mva #$9D :STACKORIGIN,x
	mva #$0D :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN

; optimize FAIL ('WAITFORKEY', helpersGame.pas), line = 46

	jsr WAITFORKEY

; optimize OK (helpersGame.pas), line = 47

	lda M
	sta ADDMONEY.AMOUNT
	lda M+1
	sta ADDMONEY.AMOUNT+1
	jsr ADDMONEY

; optimize OK (helpersGame.pas), line = 48

	ldy CURRENTPLAYER
	lda adr.PLNEWPOINTS,y
	add #$04
	sta adr.PLNEWPOINTS,y

; ------------------------------------------------------------

P	= DATAORIGIN+$14C4
M	= DATAORIGIN+$14C6
K	= DATAORIGIN+$14C8

@VarData	= P
@VarDataSize	= 5

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	PREPAREFIGHTAGAINSTPOLICE			; PROCEDURE

; optimize OK (helpersGame.pas), line = 58

	lda adr.FP_GANG+$02
	sta @move.dst
	lda adr.FP_GANG+1+$02
	sta @move.dst+1
	lda FIGHT_POLICE_STRING_1
	sta @move.src
	lda FIGHT_POLICE_STRING_1+1
	sta @move.src+1
	ldy #$00
	lda (@move.src),y
	add #1
	sta @move.cnt
	scc
	iny
	sty @move.cnt+1
	jsr @move

; optimize OK (helpersGame.pas), line = 59

	lda #$01
	sta adr.FP_AI+$01

; optimize OK (helpersGame.pas), line = 60

	ldy CURRENTPLAYER
	lda adr.PLRANK,y
	cmp #$05
	jcc l_0EC7

; optimize FAIL (2, helpersGame.pas), line = 61

	inx
	mva #$01 :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	inx
	mva #$05 :STACKORIGIN,x
	lda adr.PLRANK,y
	lsr @
	jsr SYSTEM.RANDOM_02E9
	lda :STACKORIGIN,x
	add SYSTEM.RANDOM_02E9.RESULT
	ldy :STACKORIGIN-1,x
	sta adr.FP_N,y
	dex
	dex
	jmp l_0EE4
l_0EC7

; optimize OK (helpersGame.pas), line = 63

	lda #$05
	sta adr.FP_N+$01
l_0EE4

; optimize OK (helpersGame.pas), line = 64

	lda #$00
	sta K
	lda adr.FP_N+$01
	sub #$01
	sta @FORTMP_0EF6_0

l_0EF9
; --- ForToDoCondition
	lda @FORTMP_0EF6_0::#$00
	cmp K
	jcc l_0F07

; optimize FAIL (1, helpersGame.pas), line = 66

	inx
	mva #$10 :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	inx
	mva K :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	jsr addAX_CX
	dex
	lda #$02
	jsr SYSTEM.RANDOM_02E9
	ldy :STACKORIGIN,x
	lda SYSTEM.RANDOM_02E9.RESULT
	sta adr.FP_SEX,y
	dex

; optimize OK (helpersGame.pas), line = 67

	lda K
	asl @
	tay
	lda adr.FP_NAME+$20,y
	sta @move.dst
	lda adr.FP_NAME+1+$20,y
	sta @move.dst+1
	lda FIGHT_POLICE_STRING_2
	sta @move.src
	lda FIGHT_POLICE_STRING_2+1
	sta @move.src+1
	ldy #$00
	lda (@move.src),y
	add #1
	sta @move.cnt
	scc
	iny
	sty @move.cnt+1
	jsr @move

; optimize OK (helpersGame.pas), line = 68

	ldy CURRENTPLAYER
	lda adr.PLRANK,y
	ldy #1
	cmp #$06
	bcs @+
	dey
@
	tya
	sta :STACKORIGIN+11
	lda #$00
	sta :STACKORIGIN+STACKWIDTH+11
	lda :STACKORIGIN+11
	asl @
	rol :STACKORIGIN+STACKWIDTH+11
	add #$05
	ldy K
	sta adr.FP_WEAPON+$10,y

; optimize FAIL (2, helpersGame.pas), line = 69

	inx
	mva #$10 :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	inx
	mva K :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	jsr addAX_CX
	mva #$12 :STACKORIGIN,x
	inx
	mva #$02 :STACKORIGIN,x
	inx
	ldy CURRENTPLAYER
	lda adr.PLRANK,y
	sta :STACKORIGIN,x
	jsr imulBYTE
	lda :eax
	sta :STACKORIGIN-1,x
	lda :eax+1
	sta :STACKORIGIN-1+STACKWIDTH,x
	dex
	mva #$00 :STACKORIGIN-1+STACKWIDTH,x
	jsr addAL_CL
	dex
	lda #$0A
	jsr SYSTEM.RANDOM_02E9
	lda :STACKORIGIN,x
	sub SYSTEM.RANDOM_02E9.RESULT
	ldy :STACKORIGIN-1,x
	sta adr.FP_ENERGY,y
	dex
	dex

; --- ForToDoEpilog
	inc K
	jne l_0EF9
l_0F07

; ------------------------------------------------------------

K	= DATAORIGIN+$14C9

@VarData	= K
@VarDataSize	= 1

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	PAYMONEY					; FUNCTION

; optimize OK (helpersGame.pas), line = 94

	lda CURRENTPLAYER
	asl @
	asl @
	tay
	lda adr.PLMONEY,y
	sta :STACKORIGIN+9
	lda adr.PLMONEY+1,y
	sta :STACKORIGIN+STACKWIDTH+9
	lda adr.PLMONEY+2,y
	sta :STACKORIGIN+STACKWIDTH*2+9
	lda adr.PLMONEY+3,y
	sta :STACKORIGIN+STACKWIDTH*3+9
	lda PRICE
	sta :STACKORIGIN+10
	ldy #$00
	lda PRICE+1
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+10
	sty :STACKORIGIN+STACKWIDTH*2+10
	sty :STACKORIGIN+STACKWIDTH*3+10
	.LOCAL
	lda :STACKORIGIN+STACKWIDTH*3+9
	sub :STACKORIGIN+STACKWIDTH*3+10
	bne L4
	lda :STACKORIGIN+STACKWIDTH*2+9
	cmp :STACKORIGIN+STACKWIDTH*2+10
	bne L1
	lda :STACKORIGIN+STACKWIDTH+9
	cmp :STACKORIGIN+STACKWIDTH+10
	bne L1
	lda :STACKORIGIN+9
	cmp :STACKORIGIN+10
L1	beq L5
	bcs L3
	lda #$FF
	bne L5
L3	lda #$01
	bne L5
L4	bvc L5
	eor #$FF
	ora #$01
L5
	.ENDL
	jpl l_0F77

; optimize FAIL ('B_CRT.CRT_NEWLINE_06EB', helpersGame.pas), line = 96

	jsr B_CRT.CRT_NEWLINE_06EB

; optimize FAIL ('CRT_WRITELN', helpersGame.pas), line = 97

	inx
	mva NOT_ENOUGH_MONEY_STRING :STACKORIGIN,x
	mva NOT_ENOUGH_MONEY_STRING+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN

; optimize FAIL ('B_CRT.CRT_READKEY', helpersGame.pas), line = 98

	jsr B_CRT.CRT_READKEY

; optimize OK (helpersGame.pas), line = 99

	lda #$00
	sta RESULT
	jmp @exit
l_0F77

; optimize OK (helpersGame.pas), line = 102

	lda PRICE
	sta SUBMONEY.AMOUNT
	lda PRICE+1
	sta SUBMONEY.AMOUNT+1
	jsr SUBMONEY

; optimize OK (helpersGame.pas), line = 103

	lda #$01
	sta RESULT
@exit

; ------------------------------------------------------------

PRICE	= DATAORIGIN+$14CB
RESULT	= DATAORIGIN+$14CD

@VarData	= PRICE
@VarDataSize	= 2

	rts						; ret
.endl

.local	SELECTGANGSTER					; PROCEDURE

; optimize OK (helpersGame.pas), line = 111

	ldy CURRENTPLAYER
	lda adr.PLNGANGSTERS,y
	cmp #$01
	jne l_0FA3

; optimize OK (helpersGame.pas), line = 112

	lda CURRENTPLAYER
	asl @
	asl @
	asl @
	sta CURRENTGANGSTER
	jmp @exit
l_0FA3

; optimize OK (helpersGame.pas), line = 116

	lda #$00
	sta J

; optimize FAIL ('B_CRT.CRT_WHEREY', helpersGame.pas), line = 117

	jsr B_CRT.CRT_WHEREY
	lda B_CRT.CRT_WHEREY.RESULT
	sub #$01
	sta Y

; optimize OK (helpersGame.pas), line = 118

	lda #$00
	sta K

l_0FC5
; --- ForToDoCondition
	ldy K
	cpy #$20
	jcs l_0FD3

; optimize OK (helpersGame.pas), line = 120

	lda adr.PLGANGSTERS,y
	cmp CURRENTPLAYER
	jne l_0FEA

; optimize OK (helpersGame.pas), line = 122

	lda #$00
	sta X

; optimize OK (helpersGame.pas), line = 123

	lda J
	and #$01
	cmp #$01
	jne l_1005

; optimize OK (helpersGame.pas), line = 124

	lda #$14
	sta X
	jmp l_1013
l_1005

; optimize OK (helpersGame.pas), line = 126

	lda Y
	add #$03
	sta Y
l_1013

; optimize OK (helpersGame.pas), line = 127

	lda X
	sta B_CRT.CRT_GOTOXY.X
	lda Y
	sta B_CRT.CRT_GOTOXY.Y
	jsr B_CRT.CRT_GOTOXY

; optimize OK (helpersGame.pas), line = 128

	lda J
	add #$01
	sta B_CRT.CRT_WRITE_0565.NUM
	lda #$00
	adc #$00
	sta B_CRT.CRT_WRITE_0565.NUM+1
	jsr B_CRT.CRT_WRITE_0565

; optimize FAIL ('B_CRT.CRT_WRITE_053A', helpersGame.pas), line = 129

	inx
	mva #$A1 :STACKORIGIN,x
	mva #$0D :STACKORIGIN+STACKWIDTH,x
	jsr B_CRT.CRT_WRITE_053A

; optimize FAIL ('B_CRT.CRT_WRITE_053A', helpersGame.pas), line = 130

	inx
	lda K
	asl @
	tay
	lda adr.GANGSTERNAMES,y
	sta :STACKORIGIN,x
	lda adr.GANGSTERNAMES+1,y
	sta :STACKORIGIN+STACKWIDTH,x
	jsr B_CRT.CRT_WRITE_053A

; optimize OK (helpersGame.pas), line = 131

	lda Y
	add #$01
	sta B_CRT.CRT_GOTOXY.Y
	lda X
	sta B_CRT.CRT_GOTOXY.X
	jsr B_CRT.CRT_GOTOXY

; optimize FAIL ('B_CRT.CRT_WRITE_053A', helpersGame.pas), line = 132

	inx
	mva #$A6 :STACKORIGIN,x
	mva #$0D :STACKORIGIN+STACKWIDTH,x
	jsr B_CRT.CRT_WRITE_053A

; optimize OK (helpersGame.pas), line = 133

	ldy K
	lda adr.GANGSTERHEALTH,y
	jsr B_CRT.CRT_WRITE_055B

; optimize FAIL ('B_CRT.CRT_WRITE_053A', helpersGame.pas), line = 134

	inx
	mva #$AA :STACKORIGIN,x
	mva #$0D :STACKORIGIN+STACKWIDTH,x
	jsr B_CRT.CRT_WRITE_053A

; optimize OK (helpersGame.pas), line = 135

	ldy K
	lda adr.GANGSTERBRUT,y
	jsr B_CRT.CRT_WRITE_055B

; optimize FAIL ('B_CRT.CRT_WRITE_053A', helpersGame.pas), line = 136

	inx
	mva #$AF :STACKORIGIN,x
	mva #$0D :STACKORIGIN+STACKWIDTH,x
	jsr B_CRT.CRT_WRITE_053A

; optimize OK (helpersGame.pas), line = 137

	ldy K
	lda adr.GANGSTERINT,y
	jsr B_CRT.CRT_WRITE_055B

; optimize FAIL ('B_CRT.CRT_WRITE_053A', helpersGame.pas), line = 138

	inx
	mva #$B4 :STACKORIGIN,x
	mva #$0D :STACKORIGIN+STACKWIDTH,x
	jsr B_CRT.CRT_WRITE_053A

; optimize OK (helpersGame.pas), line = 139

	ldy K
	lda adr.GANGSTERSTR,y
	jsr B_CRT.CRT_WRITE_055B

; optimize OK (helpersGame.pas), line = 140

	ldy J
	lda K
	sta adr.MAP,y

; optimize OK (helpersGame.pas), line = 141

	inc J
l_0FEA

; --- ForToDoEpilog
	inc K
	jne l_0FC5
l_0FD3

; optimize FAIL ('B_CRT.CRT_NEWLINE_06EB', helpersGame.pas), line = 144

	jsr B_CRT.CRT_NEWLINE_06EB

; optimize FAIL ('B_CRT.CRT_NEWLINE_06EB', helpersGame.pas), line = 145

	jsr B_CRT.CRT_NEWLINE_06EB

; optimize FAIL ('B_CRT.CRT_WRITE_053A', helpersGame.pas), line = 146

	inx
	mva YOUR_CHOICE_STRING :STACKORIGIN,x
	mva YOUR_CHOICE_STRING+1 :STACKORIGIN+STACKWIDTH,x
	jsr B_CRT.CRT_WRITE_053A

; optimize OK (helpersGame.pas), line = 147

	lda #$01
	sta READVALUE.MINVALUE
	lda #$00
	sta READVALUE.MINVALUE+1
	lda J
	sta READVALUE.MAXVALUE
	lda #$00
	sta READVALUE.MAXVALUE+1
	jsr READVALUE
	lda READVALUE.RESULT
	sta X

; optimize OK (helpersGame.pas), line = 148

	jne l_109C
	lda #$63
	jmp l_10AA
l_109C

; optimize OK (helpersGame.pas), line = 149

	ldy X
	lda adr.MAP-$01,y
l_10AA
	sta CURRENTGANGSTER

; optimize FAIL ('B_CRT.CRT_NEWLINE_06EB', helpersGame.pas), line = 150

	jsr B_CRT.CRT_NEWLINE_06EB

; ------------------------------------------------------------

J	= DATAORIGIN+$14CE
K	= DATAORIGIN+$14CF
X	= DATAORIGIN+$14D0
Y	= DATAORIGIN+$14D1
adr.MAP	= [DATAORIGIN+$14D2] .array [9]
.var MAP	= adr.MAP .word

@VarData	= J
@VarDataSize	= 13

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	SAVEGAME					; PROCEDURE

; optimize FAIL ('ENABLECONSOLE', helpersGame.pas), line = 175

	jsr ENABLECONSOLE

; optimize FAIL ('B_CRT.CRT_CLEAR_04E8', helpersGame.pas), line = 176

	jsr B_CRT.CRT_CLEAR_04E8

; optimize FAIL ('B_CRT.CRT_WRITECENTERED_06F6', helpersGame.pas), line = 177

	inx
	mva #$B9 :STACKORIGIN,x
	mva #$0D :STACKORIGIN+STACKWIDTH,x
	inx
	mva #$01 :STACKORIGIN,x
	jsr B_CRT.CRT_WRITECENTERED_06F6

; optimize OK (helpersGame.pas), line = 178

	lda SAVEFNAME
	sta XBIOS.XBIOSOPENFILE.FILENAME
	lda SAVEFNAME+1
	sta XBIOS.XBIOSOPENFILE.FILENAME+1
	jsr XBIOS.XBIOSOPENFILE

; optimize OK (helpersGame.pas), line = 179

	lda #$00
	sta XBIOS.XBIOSSETLENGTH.LEN
	lda #$10
	sta XBIOS.XBIOSSETLENGTH.LEN+1
	jsr XBIOS.XBIOSSETLENGTH

; optimize OK (helpersGame.pas), line = 180

	lda #$00
	sta XBIOS.XBIOSWRITEDATA.SRC
	lda #$E0
	sta XBIOS.XBIOSWRITEDATA.SRC+1
	jsr XBIOS.XBIOSWRITEDATA

; optimize FAIL ('XBIOS.XBIOSFLUSHBUFFER', helpersGame.pas), line = 186

	jsr XBIOS.XBIOSFLUSHBUFFER

; optimize FAIL ('WAITFORKEY', helpersGame.pas), line = 187

	jsr WAITFORKEY

; optimize FAIL ('ENABLEMAPCONSOLE', helpersGame.pas), line = 188

	jsr ENABLEMAPCONSOLE
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	LOADGAME					; PROCEDURE

; optimize FAIL ('ENABLECONSOLE', helpersGame.pas), line = 195

	jsr ENABLECONSOLE

; optimize FAIL ('B_CRT.CRT_CLEAR_04E8', helpersGame.pas), line = 196

	jsr B_CRT.CRT_CLEAR_04E8

; optimize FAIL ('B_CRT.CRT_WRITECENTERED_06F6', helpersGame.pas), line = 197

	inx
	mva #$C4 :STACKORIGIN,x
	mva #$0D :STACKORIGIN+STACKWIDTH,x
	inx
	mva #$01 :STACKORIGIN,x
	jsr B_CRT.CRT_WRITECENTERED_06F6

; optimize OK (helpersGame.pas), line = 198

	lda SAVEFNAME
	sta XBIOS.XBIOSOPENFILE.FILENAME
	lda SAVEFNAME+1
	sta XBIOS.XBIOSOPENFILE.FILENAME+1
	jsr XBIOS.XBIOSOPENFILE

; optimize OK (helpersGame.pas), line = 201

	lda #$63
	sta TMP

; optimize OK (helpersGame.pas), line = 202

	lda #$01
	sta XBIOS.XBIOSSETLENGTH.LEN
	lda #$00
	sta XBIOS.XBIOSSETLENGTH.LEN+1
	jsr XBIOS.XBIOSSETLENGTH

; optimize OK (helpersGame.pas), line = 203

	lda <TMP
	sta XBIOS.XBIOSLOADDATA.DEST
	lda >TMP
	sta XBIOS.XBIOSLOADDATA.DEST+1
	jsr XBIOS.XBIOSLOADDATA

; optimize OK (helpersGame.pas), line = 204

	lda TMP
	cmp #$05
	jcs l_10FDx
	cmp #$00
	jne l_10FD
l_10FDx

; optimize FAIL ('B_CRT.CRT_WRITECENTERED_06F6', helpersGame.pas), line = 205

	inx
	mva #$D0 :STACKORIGIN,x
	mva #$0D :STACKORIGIN+STACKWIDTH,x
	inx
	mva #$03 :STACKORIGIN,x
	jsr B_CRT.CRT_WRITECENTERED_06F6

; optimize FAIL ('WAITFORKEY', helpersGame.pas), line = 206

	jsr WAITFORKEY

; optimize FAIL ('ENABLEMAPCONSOLE', helpersGame.pas), line = 207

	jsr ENABLEMAPCONSOLE
	jmp @exit
l_10FD

; optimize OK (helpersGame.pas), line = 216

	lda SAVEFNAME
	sta XBIOS.XBIOSOPENFILE.FILENAME
	lda SAVEFNAME+1
	sta XBIOS.XBIOSOPENFILE.FILENAME+1
	jsr XBIOS.XBIOSOPENFILE

; optimize OK (helpersGame.pas), line = 217

	lda #$00
	sta XBIOS.XBIOSSETLENGTH.LEN
	lda #$10
	sta XBIOS.XBIOSSETLENGTH.LEN+1
	jsr XBIOS.XBIOSSETLENGTH

; optimize OK (helpersGame.pas), line = 218

	lda #$00
	sta XBIOS.XBIOSLOADDATA.DEST
	lda #$E0
	sta XBIOS.XBIOSLOADDATA.DEST+1
	jsr XBIOS.XBIOSLOADDATA

; optimize FAIL ('XBIOS.XBIOSFLUSHBUFFER', helpersGame.pas), line = 223

	jsr XBIOS.XBIOSFLUSHBUFFER

; optimize FAIL ('WAITFORKEY', helpersGame.pas), line = 224

	jsr WAITFORKEY

; optimize FAIL ('PLACECURRENTPLAYER', helpersGame.pas), line = 225

	jsr PLACECURRENTPLAYER

; optimize FAIL ('LOADMAP', helpersGame.pas), line = 226

	jsr LOADMAP

; optimize FAIL ('ENABLEMAPCONSOLE', helpersGame.pas), line = 227

	jsr ENABLEMAPCONSOLE

; ------------------------------------------------------------

TMP	= DATAORIGIN+$14DB

@VarData	= TMP
@VarDataSize	= 1

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	GOTOCOURT					; FUNCTION

; optimize OK (sprites.pas), line = 18

	lda #$04
	jsr SYSTEM.RANDOM_02E9
	lda SYSTEM.RANDOM_02E9.RESULT
	sta R

; optimize OK (sprites.pas), line = 19

	sta @CASETMP_000A
	cmp #$00
	jne l_1125
@

; optimize OK (sprites.pas), line = 21

	lda #$0F
	sta I
	lda #$02
	sta J
	sta K
	jmp a_000A
l_1125
	cmp #$01
	jne l_113A

; optimize OK (sprites.pas), line = 24

	lda #$10
	sta I
	lda #$02
	sta J
	lda #$05
	sta K
	jmp a_000A
l_113A
	cmp #$02
	jne l_114F

; optimize OK (sprites.pas), line = 27

	lda #$02
	sta I
	lda #$0A
	sta J
	lda #$09
	sta K
	jmp a_000A
l_114F
	cmp #$03
	jne l_1164

; optimize OK (sprites.pas), line = 30

	lda #$0D
	sta I
	lda #$0A
	sta J
	lda #$04
	sta K
l_1164
a_000A

; optimize FAIL ('BLACKCONSOLE', sprites.pas), line = 33

	jsr BLACKCONSOLE

; optimize OK (sprites.pas), line = 35

	ldy CURRENTPLAYER
	lda I
	sta adr.PLMAPPOSX,y

; optimize OK (sprites.pas), line = 36

	lda J
	sta adr.PLMAPPOSY,y

; optimize OK (sprites.pas), line = 37

	lda K
	sta adr.PLCURRENTMAP,y

; optimize FAIL ('PLACECURRENTPLAYER', sprites.pas), line = 38

	jsr PLACECURRENTPLAYER

; optimize OK (sprites.pas), line = 39

	lda MAPPOS_X
	sta OLDMAPPOS_X

; optimize OK (sprites.pas), line = 40

	lda MAPPOS_Y
	sta OLDMAPPOS_Y

; optimize FAIL ('PRELOADMAP', sprites.pas), line = 41

	jsr PRELOADMAP

; optimize OK (sprites.pas), line = 43

	lda #$19
	jsr LOADLOCATION

; optimize FAIL ('ENABLECONSOLE', sprites.pas), line = 44

	jsr ENABLECONSOLE

; optimize OK (sprites.pas), line = 45

	ldy CURRENTPLAYER
	lda adr.PLNEWPOINTS,y
	add #$02
	sta adr.PLNEWPOINTS,y

; optimize OK (sprites.pas), line = 46

	lda adr.PLRANK,y
	lsr @
	add #$01
	sta PRISONTIME

; optimize FAIL ('SHOWLOCATIONHEADER', sprites.pas), line = 48

	jsr SHOWLOCATIONHEADER

; optimize OK (sprites.pas), line = 50

	ldy CURRENTPLAYER
	lda adr.PLRANK,y
	cmp #$05
	jcc l_11DC

; optimize FAIL ('CRT_WRITELN2', sprites.pas), line = 52

	inx
	mva LOC_STRING_1 :STACKORIGIN,x
	mva LOC_STRING_1+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN2

; optimize FAIL ('GETYESNO', sprites.pas), line = 53

	jsr GETYESNO
	lda GETYESNO.RESULT
	sta R

; optimize OK (sprites.pas), line = 54

	cmp #$01
	jne l_11F6

; optimize FAIL ('B_CRT.CRT_WRITE_053A', sprites.pas), line = 56

	inx
	mva LOC_STRING_2 :STACKORIGIN,x
	mva LOC_STRING_2+1 :STACKORIGIN+STACKWIDTH,x
	jsr B_CRT.CRT_WRITE_053A

; optimize OK (sprites.pas), line = 57

	lda #$00
	sta READVALUE.MINVALUE
	sta READVALUE.MINVALUE+1
	lda #$10
	sta READVALUE.MAXVALUE
	lda #$27
	sta READVALUE.MAXVALUE+1
	jsr READVALUE
	lda READVALUE.RESULT
	sta LAWYER
	lda READVALUE.RESULT+1
	sta LAWYER+1

; optimize FAIL ('B_CRT.CRT_NEWLINE_06EB', sprites.pas), line = 58

	jsr B_CRT.CRT_NEWLINE_06EB

; optimize FAIL ('B_CRT.CRT_NEWLINE_06EB', sprites.pas), line = 59

	jsr B_CRT.CRT_NEWLINE_06EB

; optimize OK (sprites.pas), line = 60

	lda LAWYER
	sta PAYMONEY.PRICE
	lda LAWYER+1
	sta PAYMONEY.PRICE+1
	jsr PAYMONEY
	lda PAYMONEY.RESULT
	sta T

; optimize OK (sprites.pas), line = 61

	cmp #$01
	jne l_121A

; optimize OK (sprites.pas), line = 64

	lda LAWYER+1
	lsr @
	lsr @
	add #$01
	sta CHANGE

; optimize OK (sprites.pas), line = 65

	jsr SYSTEM.RANDOM_02E9
	lda SYSTEM.RANDOM_02E9.RESULT
	add #$01
	sta CHANGE

; optimize OK (sprites.pas), line = 66

	lda PRISONTIME
	sub CHANGE
	sta PRISONTIME

; optimize OK (sprites.pas), line = 67

	jpl l_1251

; optimize OK (sprites.pas), line = 68

	lda #$00
	sta PRISONTIME
l_1251

; optimize OK (sprites.pas), line = 69

	ldy CURRENTPLAYER
	lda PRISONTIME
	sta adr.PLPRISON,y

; optimize OK (sprites.pas), line = 70

	lda PRISONTIME
	jne l_1273

; optimize FAIL ('CRT_WRITELN', sprites.pas), line = 72

	inx
	mva LOC_STRING_3 :STACKORIGIN,x
	mva LOC_STRING_3+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN

; optimize FAIL ('WAITFORKEY', sprites.pas), line = 73

	jsr WAITFORKEY

; optimize OK (sprites.pas), line = 74

	lda #$01
	sta RESULT
	jmp @exit
l_1273

; optimize FAIL ('CRT_WRITELN', sprites.pas), line = 77

	inx
	mva LOC_STRING_4 :STACKORIGIN,x
	mva LOC_STRING_4+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN

; optimize OK (sprites.pas), line = 78

	ldy #$00
	lda PRISONTIME
	spl
	dey
	sta B_CRT.CRT_WRITE_056E.NUM
	sty B_CRT.CRT_WRITE_056E.NUM+1
	sty B_CRT.CRT_WRITE_056E.NUM+2
	sty B_CRT.CRT_WRITE_056E.NUM+3
	jsr B_CRT.CRT_WRITE_056E

; optimize FAIL ('CRT_WRITELN', sprites.pas), line = 79

	inx
	mva LOC_STRING_5 :STACKORIGIN,x
	mva LOC_STRING_5+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN

; optimize FAIL ('WAITFORKEY', sprites.pas), line = 80

	jsr WAITFORKEY

; optimize OK (sprites.pas), line = 81

	lda #$01
	sta RESULT
	jmp @exit
l_121A
l_11F6
l_11DC

; optimize OK (sprites.pas), line = 88

	ldy CURRENTPLAYER
	lda PRISONTIME
	sta adr.PLPRISON,y

; optimize FAIL ('B_CRT.CRT_WRITE_053A', sprites.pas), line = 89

	inx
	mva LOC_STRING_6 :STACKORIGIN,x
	mva LOC_STRING_6+1 :STACKORIGIN+STACKWIDTH,x
	jsr B_CRT.CRT_WRITE_053A

; optimize OK (sprites.pas), line = 90

	ldy #$00
	lda PRISONTIME
	spl
	dey
	sta B_CRT.CRT_WRITE_056E.NUM
	sty B_CRT.CRT_WRITE_056E.NUM+1
	sty B_CRT.CRT_WRITE_056E.NUM+2
	sty B_CRT.CRT_WRITE_056E.NUM+3
	jsr B_CRT.CRT_WRITE_056E

; optimize FAIL ('B_CRT.CRT_WRITE_053A', sprites.pas), line = 91

	inx
	mva LOC_STRING_7 :STACKORIGIN,x
	mva LOC_STRING_7+1 :STACKORIGIN+STACKWIDTH,x
	jsr B_CRT.CRT_WRITE_053A

; optimize OK (sprites.pas), line = 92

	ldy CURRENTPLAYER
	lda #$00
	sta adr.PLJOB,y

; optimize OK (sprites.pas), line = 93

	lda adr.PLNEWPOINTS,y
	sub #$06
	sta adr.PLNEWPOINTS,y

; optimize FAIL ('WAITFORKEY', sprites.pas), line = 94

	jsr WAITFORKEY

; optimize OK (sprites.pas), line = 95

	lda #$01
	sta RESULT
@exit

; ------------------------------------------------------------

RESULT	= DATAORIGIN+$14DC
LAWYER	= DATAORIGIN+$14DD
PRISONTIME	= DATAORIGIN+$14DF
R	= DATAORIGIN+$14E0
I	= DATAORIGIN+$14E1
J	= DATAORIGIN+$14E2
K	= DATAORIGIN+$14E3
T	= DATAORIGIN+$14E4
CHANGE	= DATAORIGIN+$14E5
@CASETMP_000A	= DATAORIGIN+$14E6

@VarData	= LAWYER
@VarDataSize	= 10

	rts						; ret
.endl

.local	GOTCAUGHT					; FUNCTION

; optimize OK (sprites.pas), line = 108

	lda #$1A
	jsr LOADLOCATION

; optimize FAIL ('ENABLECONSOLE', sprites.pas), line = 109

	jsr ENABLECONSOLE

; optimize FAIL ('SHOWLOCATIONHEADER', sprites.pas), line = 111

	jsr SHOWLOCATIONHEADER

; optimize FAIL (1, sprites.pas), line = 114

	inx
	ldy CURRENTPLAYER
	lda adr.PLBRIBE,y
	sta :STACKORIGIN,x
	inx
	ldy #1
	lda :STACKORIGIN-1,x
	bne @+
	dey
@
	dex
	sty :STACKORIGIN,x
	lda #$02
	jsr SYSTEM.RANDOM_02E9
	dex
	ldy #1
	lda SYSTEM.RANDOM_02E9.RESULT
	cmp #$01
	beq @+
	dey
@
	tya
	and :STACKORIGIN+1,x
	jeq l_12EA

; optimize FAIL ('CRT_WRITELN', sprites.pas), line = 116

	inx
	mva LOC_STRING_1 :STACKORIGIN,x
	mva LOC_STRING_1+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN

; optimize FAIL ('CRT_WRITELN', sprites.pas), line = 117

	inx
	mva LOC_STRING_2 :STACKORIGIN,x
	mva LOC_STRING_2+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN

; optimize FAIL ('WAITFORKEY', sprites.pas), line = 118

	jsr WAITFORKEY

; optimize OK (sprites.pas), line = 119

	lda #$00
	sta RESULT
	jmp @exit
l_12EA

; optimize FAIL ('CRT_WRITELN2', sprites.pas), line = 123

	inx
	mva LOC_STRING_3 :STACKORIGIN,x
	mva LOC_STRING_3+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN2

; optimize FAIL ('CRT_WRITELN', sprites.pas), line = 124

	inx
	mva LOC_STRING_4 :STACKORIGIN,x
	mva LOC_STRING_4+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN

; optimize FAIL ('CRT_WRITELN', sprites.pas), line = 125

	inx
	mva LOC_STRING_5 :STACKORIGIN,x
	mva LOC_STRING_5+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN

; optimize FAIL ('CRT_WRITELN2', sprites.pas), line = 126

	inx
	mva LOC_STRING_6 :STACKORIGIN,x
	mva LOC_STRING_6+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN2

; optimize FAIL ('B_CRT.CRT_WRITE_053A', sprites.pas), line = 128

	inx
	mva LOC_STRING_7 :STACKORIGIN,x
	mva LOC_STRING_7+1 :STACKORIGIN+STACKWIDTH,x
	jsr B_CRT.CRT_WRITE_053A

; optimize OK (sprites.pas), line = 129

	lda #$01
	sta READVALUENOZERO.MINVALUE
	lda #$00
	sta READVALUENOZERO.MINVALUE+1
	lda #$03
	sta READVALUENOZERO.MAXVALUE
	lda #$00
	sta READVALUENOZERO.MAXVALUE+1
	jsr READVALUENOZERO
	lda READVALUENOZERO.RESULT
	sta A

; optimize FAIL ('B_CRT.CRT_NEWLINE_06EB', sprites.pas), line = 130

	jsr B_CRT.CRT_NEWLINE_06EB

; optimize FAIL ('B_CRT.CRT_NEWLINE_06EB', sprites.pas), line = 131

	jsr B_CRT.CRT_NEWLINE_06EB

; optimize OK (sprites.pas), line = 132

	lda A
	cmp #$01
	jne l_1321

; optimize OK (sprites.pas), line = 134

	ldy CURRENTPLAYER
	lda adr.PLRANK,y
	sta :eax
	lda #$00
	sta :eax+1
	lda #$F4
	sta :ecx
	lda #$01
	sta :ecx+1
	.ifdef fmulinit
	fmulu_16
	els
	imulCX_AL
	eif
	lda #$F4
	add :eax
	sta PRICE
	lda #$01
	adc :eax+1
	sta PRICE+1

; optimize FAIL ('B_CRT.CRT_WRITE_053A', sprites.pas), line = 135

	inx
	mva LOC_STRING_8 :STACKORIGIN,x
	mva LOC_STRING_8+1 :STACKORIGIN+STACKWIDTH,x
	jsr B_CRT.CRT_WRITE_053A

; optimize OK (sprites.pas), line = 136

	lda PRICE
	sta B_CRT.CRT_WRITE_0565.NUM
	lda PRICE+1
	sta B_CRT.CRT_WRITE_0565.NUM+1
	jsr B_CRT.CRT_WRITE_0565

; optimize FAIL ('CRT_WRITELN2', sprites.pas), line = 137

	inx
	mva LOC_STRING_9 :STACKORIGIN,x
	mva LOC_STRING_9+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN2

; optimize FAIL ('GETYESNO', sprites.pas), line = 138

	jsr GETYESNO
	lda GETYESNO.RESULT
	sta R

; optimize OK (sprites.pas), line = 139

	cmp #$01
	jne l_1352

; optimize OK (sprites.pas), line = 141

	lda PRICE
	sta PAYMONEY.PRICE
	lda PRICE+1
	sta PAYMONEY.PRICE+1
	jsr PAYMONEY
	lda PAYMONEY.RESULT
	jne l_1365

; optimize FAIL ('GOTOCOURT', sprites.pas), line = 144

	jsr GOTOCOURT
	lda GOTOCOURT.RESULT
	sta RESULT
	jmp @exit
l_1365

; optimize OK (sprites.pas), line = 149

	lda #$05
	jsr SYSTEM.RANDOM_02E9
	lda SYSTEM.RANDOM_02E9.RESULT
	jne l_1384

; optimize FAIL ('CRT_WRITELN', sprites.pas), line = 151

	inx
	mva LOC_STRING_10 :STACKORIGIN,x
	mva LOC_STRING_10+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN

; optimize FAIL ('WAITFORKEY', sprites.pas), line = 152

	jsr WAITFORKEY

; optimize FAIL ('GOTOCOURT', sprites.pas), line = 153

	jsr GOTOCOURT
	lda GOTOCOURT.RESULT
	sta RESULT
	jmp @exit
l_1384

; optimize FAIL ('CRT_WRITELN', sprites.pas), line = 158

	inx
	mva LOC_STRING_11 :STACKORIGIN,x
	mva LOC_STRING_11+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN

; optimize FAIL ('WAITFORKEY', sprites.pas), line = 159

	jsr WAITFORKEY

; optimize OK (sprites.pas), line = 160

	lda #$00
	sta RESULT
	jmp @exit
l_1373
	jmp l_13A0
l_1352

; optimize OK (sprites.pas), line = 166

	ldy CURRENTPLAYER
	lda adr.PLNEWPOINTS,y
	add #$02
	sta adr.PLNEWPOINTS,y

; optimize FAIL ('GOTOCOURT', sprites.pas), line = 168

	jsr GOTOCOURT
	lda GOTOCOURT.RESULT
	sta RESULT
l_13A0
l_1321

; optimize OK (sprites.pas), line = 172

	lda A
	cmp #$02
	jne l_13C8

; optimize OK (sprites.pas), line = 175

	lda #$50
	jsr SYSTEM.RANDOM_02E9
	inx
	mva SYSTEM.RANDOM_02E9.RESULT :STACKORIGIN,x
	inx
	ldy CURRENTPLAYER
	lda adr.PLCAR,y
	tay
	lda adr.CARRANGE,y
	ldy #1
	cmp :STACKORIGIN-1,x
	bcc @+
	dey
@
	dex
	dex
	tya
	jeq l_13E2

; optimize OK (sprites.pas), line = 177

	ldy CURRENTPLAYER
	lda adr.PLNEWPOINTS,y
	sub #$05
	sta adr.PLNEWPOINTS,y

; optimize FAIL ('CRT_WRITELN', sprites.pas), line = 179

	inx
	mva LOC_STRING_12 :STACKORIGIN,x
	mva LOC_STRING_12+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN

; optimize FAIL ('CRT_WRITELN', sprites.pas), line = 180

	inx
	mva LOC_STRING_13 :STACKORIGIN,x
	mva LOC_STRING_13+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN

; optimize FAIL ('WAITFORKEY', sprites.pas), line = 181

	jsr WAITFORKEY

; optimize FAIL ('GOTOCOURT', sprites.pas), line = 182

	jsr GOTOCOURT
	lda GOTOCOURT.RESULT
	sta RESULT
	jmp @exit
l_13E2

; optimize FAIL ('CRT_WRITELN', sprites.pas), line = 185

	inx
	mva LOC_STRING_14 :STACKORIGIN,x
	mva LOC_STRING_14+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN

; optimize OK (sprites.pas), line = 186

	ldy CURRENTPLAYER
	lda adr.PLNEWPOINTS,y
	add #$02
	sta adr.PLNEWPOINTS,y

; optimize FAIL ('WAITFORKEY', sprites.pas), line = 188

	jsr WAITFORKEY

; optimize OK (sprites.pas), line = 189

	lda #$00
	sta RESULT
	jmp @exit
l_13C8

; optimize OK (sprites.pas), line = 193

	lda A
	cmp #$03
	jne l_142C

; optimize FAIL ('GOTOCOURT', sprites.pas), line = 194

	jsr GOTOCOURT
	lda GOTOCOURT.RESULT
	sta RESULT
l_142C
@exit

; ------------------------------------------------------------

RESULT	= DATAORIGIN+$14E7
A	= DATAORIGIN+$14E8
R	= DATAORIGIN+$14E9
PRICE	= DATAORIGIN+$14EA

@VarData	= A
@VarDataSize	= 4

	rts						; ret
.endl

.local	ROADBLOCK					; FUNCTION

; optimize OK (sprites.pas), line = 200

	lda #$00
	sta RESULT

; optimize OK (sprites.pas), line = 202

	ldy CURRENTPLAYER
	lda adr.PLRANK,y
	cmp #$04
	jcs l_1450
	jmp @exit
l_1450

; optimize OK (sprites.pas), line = 203

	lda #$C0
	jsr SYSTEM.RANDOM_02E9
	lda SYSTEM.RANDOM_02E9.RESULT
	jeq l_1464
	jmp @exit
l_1464

; optimize OK (sprites.pas), line = 205

	lda #$1B
	jsr LOADLOCATION

; optimize FAIL ('ENABLECONSOLE', sprites.pas), line = 206

	jsr ENABLECONSOLE

; optimize FAIL ('SHOWLOCATIONHEADER', sprites.pas), line = 207

	jsr SHOWLOCATIONHEADER

; optimize FAIL ('CRT_WRITELN', sprites.pas), line = 209

	inx
	mva LOC_STRING_1 :STACKORIGIN,x
	mva LOC_STRING_1+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN

; optimize FAIL ('B_CRT.CRT_NEWLINE_06EB', sprites.pas), line = 210

	jsr B_CRT.CRT_NEWLINE_06EB

; optimize OK (sprites.pas), line = 211

	lda #$B4
	jsr WAITFRAMES

; optimize OK (sprites.pas), line = 212

	lda #$00
	sta RESULT

; optimize OK (sprites.pas), line = 213

	lda #$02
	jsr SYSTEM.RANDOM_02E9
	lda SYSTEM.RANDOM_02E9.RESULT
	jne l_1486

; optimize OK (sprites.pas), line = 215

	lda #$01
	sta RESULT

; optimize OK (sprites.pas), line = 216

	ldy CURRENTPLAYER
	lda adr.PLFAKEMONEY,y
	jeq l_14A0

; optimize FAIL ('CRT_WRITELN', sprites.pas), line = 217

	inx
	mva LOC_STRING_2 :STACKORIGIN,x
	mva LOC_STRING_2+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN
	jmp l_14AD
l_14A0

; optimize OK (sprites.pas), line = 218

	ldy CURRENTPLAYER
	lda adr.PLALCOHOL,y
	jeq l_14C2

; optimize FAIL ('CRT_WRITELN', sprites.pas), line = 220

	inx
	mva LOC_STRING_3 :STACKORIGIN,x
	mva LOC_STRING_3+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN

; optimize FAIL ('CRT_WRITELN', sprites.pas), line = 221

	inx
	mva LOC_STRING_4 :STACKORIGIN,x
	mva LOC_STRING_4+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN

; optimize OK (sprites.pas), line = 222

	ldy CURRENTPLAYER
	lda #$00
	sta adr.PLALCOHOL,y
	jmp l_14D9
l_14C2

; optimize OK (sprites.pas), line = 224

	ldy CURRENTPLAYER
	lda adr.PLFORGEDID,y
	jne l_14EE

; optimize FAIL ('CRT_WRITELN', sprites.pas), line = 225

	inx
	mva LOC_STRING_5 :STACKORIGIN,x
	mva LOC_STRING_5+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN
	jmp l_14FB
l_14EE

; optimize OK (sprites.pas), line = 227

	sta RESULT
l_14FB
l_14D9
l_14AD
l_1486

; optimize OK (sprites.pas), line = 230

	lda RESULT
	jne l_1513

; optimize FAIL ('CRT_WRITELN', sprites.pas), line = 231

	inx
	mva LOC_STRING_6 :STACKORIGIN,x
	mva LOC_STRING_6+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN
l_1513

; optimize FAIL ('WAITFORKEY', sprites.pas), line = 232

	jsr WAITFORKEY
@exit

; ------------------------------------------------------------

RESULT	= DATAORIGIN+$14EC
	rts						; ret
.endl

.local	PAINTPLAYER					; PROCEDURE
	sta CLEAR

; optimize OK (sprites.pas), line = 245

	lda #$00
	sta PLAYEROFS

; optimize OK (sprites.pas), line = 246

	lda CURRENTPLAYER
	sta :STACKORIGIN+9
	lda #$00
	asl :STACKORIGIN+9
	rol @
	asl :STACKORIGIN+9
	rol @
	asl :STACKORIGIN+9
	rol @
	sta :STACKORIGIN+STACKWIDTH+9
	lda :STACKORIGIN+9
	add #$00
	tay
	lda :STACKORIGIN+STACKWIDTH+9
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+9
	lda adr.GANGSTERSEX,y
	cmp #$01
	jne l_153B
	lda #$30
	sta PLAYEROFS
l_153B

; optimize OK (sprites.pas), line = 247

	lda #$0C
	sta PLAYERHEIGHT

; optimize OK (sprites.pas), line = 249

	lda PLAYERPOS_Y
	sta SYSTEM.MOVE_02BE.DEST
	lda #$DC
	sta SYSTEM.MOVE_02BE.DEST+1
	lda PLAYEROFS
	sta SYSTEM.MOVE_02BE.SOURCE
	lda #$D8
	sta SYSTEM.MOVE_02BE.SOURCE+1
	lda PLAYERHEIGHT
	sta SYSTEM.MOVE_02BE.COUNT
	lda #$00
	sta SYSTEM.MOVE_02BE.COUNT+1
	.LOCAL +MAIN.SYSTEM.MOVE_02BE
	m@INLINE
	.ENDL

; optimize OK (sprites.pas), line = 250

	lda PLAYERPOS_Y
	sta SYSTEM.MOVE_02BE.DEST
	lda #$DD
	sta SYSTEM.MOVE_02BE.DEST+1
	lda PLAYERHEIGHT
	add PLAYEROFS
	sta SYSTEM.MOVE_02BE.SOURCE
	lda #$D8
	adc #$00
	sta SYSTEM.MOVE_02BE.SOURCE+1
	lda PLAYERHEIGHT
	sta SYSTEM.MOVE_02BE.COUNT
	lda #$00
	sta SYSTEM.MOVE_02BE.COUNT+1
	.LOCAL +MAIN.SYSTEM.MOVE_02BE
	m@INLINE
	.ENDL

; optimize OK (sprites.pas), line = 251

	lda PLAYERPOS_Y
	sta SYSTEM.MOVE_02BE.DEST
	lda #$DE
	sta SYSTEM.MOVE_02BE.DEST+1
	lda #$00
	sta :STACKORIGIN+STACKWIDTH+12
	lda PLAYERHEIGHT
	asl @
	rol :STACKORIGIN+STACKWIDTH+12
	add PLAYEROFS
	sta SYSTEM.MOVE_02BE.SOURCE
	lda #$D8
	adc :STACKORIGIN+STACKWIDTH+12
	sta SYSTEM.MOVE_02BE.SOURCE+1
	lda PLAYERHEIGHT
	sta SYSTEM.MOVE_02BE.COUNT
	lda #$00
	sta SYSTEM.MOVE_02BE.COUNT+1
	.LOCAL +MAIN.SYSTEM.MOVE_02BE
	m@INLINE
	.ENDL

; optimize OK (sprites.pas), line = 252

	lda PLAYERPOS_Y
	sta SYSTEM.MOVE_02BE.DEST
	lda #$DF
	sta SYSTEM.MOVE_02BE.DEST+1
	lda #$00
	sta :STACKORIGIN+STACKWIDTH+12
	lda PLAYERHEIGHT
	asl @
	rol :STACKORIGIN+STACKWIDTH+12
	add PLAYERHEIGHT
	sta :STACKORIGIN+12
	lda :STACKORIGIN+STACKWIDTH+12
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+12
	lda PLAYEROFS
	add :STACKORIGIN+12
	sta SYSTEM.MOVE_02BE.SOURCE
	lda #$D8
	adc :STACKORIGIN+STACKWIDTH+12
	sta SYSTEM.MOVE_02BE.SOURCE+1
	lda PLAYERHEIGHT
	sta SYSTEM.MOVE_02BE.COUNT
	lda #$00
	sta SYSTEM.MOVE_02BE.COUNT+1
	.LOCAL +MAIN.SYSTEM.MOVE_02BE
	m@INLINE
	.ENDL

; optimize OK (sprites.pas), line = 253

	lda CLEAR
	cmp #$01
	jne l_15CA

; optimize OK (sprites.pas), line = 255

	ldy PLAYERPOS_Y
	dey
	sty PLAYEROFS

; optimize OK (sprites.pas), line = 256

	lda PLAYEROFS
	sta :bp2
	lda #$DC
	sta :bp2+1
	lda #$00
	ldy #$00
	sta:rpl (:bp2),y-

; optimize OK (sprites.pas), line = 257

	lda PLAYEROFS
	sta :bp2
	lda #$DD
	sta :bp2+1
	lda #$00
	ldy #$00
	sta:rpl (:bp2),y-

; optimize OK (sprites.pas), line = 258

	lda PLAYEROFS
	sta :bp2
	lda #$DE
	sta :bp2+1
	lda #$00
	ldy #$00
	sta:rpl (:bp2),y-

; optimize OK (sprites.pas), line = 259

	lda PLAYEROFS
	sta :bp2
	lda #$DF
	sta :bp2+1
	lda #$00
	ldy #$00
	sta:rpl (:bp2),y-

; optimize OK (sprites.pas), line = 261

	lda PLAYERPOS_Y
	add PLAYERHEIGHT
	sta PLAYEROFS

; optimize OK (sprites.pas), line = 262

	sta SYSTEM.FILLCHAR_02BB.A
	lda #$DC
	sta SYSTEM.FILLCHAR_02BB.A+1
	lda #$01
	sta SYSTEM.FILLCHAR_02BB.COUNT
	lda #$00
	sta SYSTEM.FILLCHAR_02BB.COUNT+1
	sta SYSTEM.FILLCHAR_02BB.VALUE
	.LOCAL +MAIN.SYSTEM.FILLCHAR_02BB
	m@INLINE
	.ENDL

; optimize OK (sprites.pas), line = 263

	lda PLAYEROFS
	sta :bp2
	lda #$DD
	sta :bp2+1
	lda #$00
	ldy #$00
	sta:rpl (:bp2),y-

; optimize OK (sprites.pas), line = 264

	lda PLAYEROFS
	sta :bp2
	lda #$DE
	sta :bp2+1
	lda #$00
	ldy #$00
	sta:rpl (:bp2),y-

; optimize OK (sprites.pas), line = 265

	lda PLAYEROFS
	sta :bp2
	lda #$DF
	sta :bp2+1
	lda #$00
	ldy #$00
	sta:rpl (:bp2),y-
l_15CA

; ------------------------------------------------------------

CLEAR	= DATAORIGIN+$14ED
PLAYERHEIGHT	= DATAORIGIN+$14EE
PLAYEROFS	= DATAORIGIN+$14EF

@VarData	= CLEAR
@VarDataSize	= 3

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	MOVECURRENTPLAYER				; FUNCTION
	sta CH

; optimize OK (sprites.pas), line = 281

	lda #$10
	sta RESULT

; optimize OK (sprites.pas), line = 283

	lda #$00
	sta DIR_X

; optimize OK (sprites.pas), line = 284

	sta DIR_Y

; optimize OK (sprites.pas), line = 285

	lda CH
	sta @CASETMP_000B
	cmp #$02
	jne l_166E
@

; optimize OK (sprites.pas), line = 286

	lda #$FF
	sta DIR_X
	jmp a_000B
l_166E
	cmp #$73
	jne l_167B

; optimize OK (sprites.pas), line = 287

	lda #$01
	sta DIR_X
	jmp a_000B
l_167B
	cmp #$60
	jne l_1688

; optimize OK (sprites.pas), line = 288

	lda #$FF
	sta DIR_Y
	jmp a_000B
l_1688
	cmp #$26
	jne l_1695

; optimize OK (sprites.pas), line = 289

	lda #$01
	sta DIR_Y
	jmp a_000B
l_1695

; optimize OK (sprites.pas), line = 292

	lda #$01
	jsr WAITFRAMES
	jmp @exit
a_000B

; optimize OK (sprites.pas), line = 299

	lda #$00
	sta LEAVEMAP

; optimize OK (sprites.pas), line = 300

	lda MAPPOS_X
	cmp #$13
	jne l_16C5
	lda DIR_X
	cmp #$01
	jne l_16C5
	lda #$01
	sta LEAVEMAP
l_16C5

; optimize OK (sprites.pas), line = 301

	lda MAPPOS_X
	jne l_16EA
	lda DIR_X
	cmp #$FF
	jne l_16EA
	lda #$01
	sta LEAVEMAP
l_16EA

; optimize OK (sprites.pas), line = 302

	lda MAPPOS_Y
	cmp #$11
	jne l_170F
	lda DIR_Y
	cmp #$01
	jne l_170F
	lda #$01
	sta LEAVEMAP
l_170F

; optimize OK (sprites.pas), line = 303

	lda MAPPOS_Y
	jne l_1734
	lda DIR_Y
	cmp #$FF
	jne l_1734
	lda #$01
	sta LEAVEMAP
l_1734

; optimize OK (sprites.pas), line = 304

	lda LEAVEMAP
	jne l_174D

; optimize OK (sprites.pas), line = 306

	lda MAPPOS_Y
	add #$01
	sta :STACKORIGIN+10
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+10
	ldy #$00
	lda DIR_Y
	spl
	dey
	add :STACKORIGIN+10
	sta :eax
	tya
	adc :STACKORIGIN+STACKWIDTH+10
	sta :eax+1
	lda #$28
	sta :ecx
	lda #$00
	sta :ecx+1
	.ifdef fmulinit
	fmulu_16
	els
	imulCX
	eif
	lda :eax
	sta :STACKORIGIN+9
	lda #$F8
	add :eax+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda MAPPOS_X
	sta :STACKORIGIN+10
	lda #$00
	asl :STACKORIGIN+10
	rol @
	sta :STACKORIGIN+STACKWIDTH+10
	lda :STACKORIGIN+9
	add :STACKORIGIN+10
	sta :STACKORIGIN+9
	lda :STACKORIGIN+STACKWIDTH+9
	adc :STACKORIGIN+STACKWIDTH+10
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #$00
	lda DIR_X
	spl
	dey
	sty :STACKORIGIN+STACKWIDTH+10
	asl @
	rol :STACKORIGIN+STACKWIDTH+10
	add :STACKORIGIN+9
	tay
	lda :STACKORIGIN+STACKWIDTH+9
	adc :STACKORIGIN+STACKWIDTH+10
	sta :bp+1
	lda (:bp),y
	sta LENCID

; optimize OK (sprites.pas), line = 309

	sta @CASETMP_000C
	cmp #$41
	jne l_1786
@

; optimize OK (sprites.pas), line = 310

	lda #$0D
	sta CURLOC
	jmp a_000C
l_1786
	cmp #$42
	jne l_1793

; optimize OK (sprites.pas), line = 311

	lda #$06
	sta CURLOC
	jmp a_000C
l_1793
	cmp #$43
	jne l_17A0

; optimize OK (sprites.pas), line = 312

	lda #$02
	sta CURLOC
	jmp a_000C
l_17A0
	cmp #$44
	jne l_17AD

; optimize OK (sprites.pas), line = 313

	lda #$04
	sta CURLOC
	jmp a_000C
l_17AD
	cmp #$45
	jne l_17BA

; optimize OK (sprites.pas), line = 314

	lda #$07
	sta CURLOC
	jmp a_000C
l_17BA
	cmp #$46
	jne l_17C7

; optimize OK (sprites.pas), line = 315

	lda #$0C
	sta CURLOC
	jmp a_000C
l_17C7
	cmp #$47
	jne l_17D4

; optimize OK (sprites.pas), line = 316

	lda #$01
	sta CURLOC
	jmp a_000C
l_17D4
	cmp #$48
	jne l_17E1

; optimize OK (sprites.pas), line = 317

	lda #$0B
	sta CURLOC
	jmp a_000C
l_17E1
	cmp #$49
	jne l_17EE

; optimize OK (sprites.pas), line = 318

	lda #$0A
	sta CURLOC
	jmp a_000C
l_17EE
	cmp #$4A
	jne l_17FB

; optimize OK (sprites.pas), line = 319

	lda #$05
	sta CURLOC
	jmp a_000C
l_17FB
	cmp #$4B
	jne l_1808

; optimize OK (sprites.pas), line = 320

	lda #$09
	sta CURLOC
	jmp a_000C
l_1808
	cmp #$4C
	jne l_1815

; optimize OK (sprites.pas), line = 321

	lda #$17
	sta CURLOC
	jmp a_000C
l_1815
	cmp #$4D
	jne l_1822

; optimize OK (sprites.pas), line = 322

	lda #$03
	sta CURLOC
	jmp a_000C
l_1822
	cmp #$4E
	jne l_182F

; optimize OK (sprites.pas), line = 323

	lda #$18
	sta CURLOC
	jmp a_000C
l_182F
	cmp #$2E
	jne l_183C

; optimize OK (sprites.pas), line = 324

	lda #$10
	sta CURLOC
	jmp a_000C
l_183C

; optimize OK (sprites.pas), line = 326

	lda #$0F
	sta CURLOC
a_000C
l_174D

; optimize OK (sprites.pas), line = 330

	lda CURLOC
	cmp #$0F
	jne l_186B

; optimize OK (sprites.pas), line = 332

	lda #$10
	sta RESULT
	jmp @exit
l_186B

; optimize OK (sprites.pas), line = 336

	ldy CURRENTPLAYER
	lda adr.PLSTEPS,y
	sub #$01
	sta adr.PLSTEPS,y

; optimize OK (sprites.pas), line = 337

	lda MAPPOS_X
	sta OLDMAPPOS_X

; optimize OK (sprites.pas), line = 338

	lda MAPPOS_Y
	sta OLDMAPPOS_Y

; optimize OK (sprites.pas), line = 339

	lda PLAYERPOS_X
	sta OLDPLAYERPOS_X

; optimize OK (sprites.pas), line = 340

	lda PLAYERPOS_Y
	sta OLDPLAYERPOS_Y

; optimize OK (sprites.pas), line = 341

	lda MAPPOS_X
	add DIR_X
	sta MAPPOS_X

; optimize OK (sprites.pas), line = 342

	lda MAPPOS_Y
	add DIR_Y
	sta MAPPOS_Y

; optimize OK (sprites.pas), line = 345

	lda DIR_Y
	jeq l_18C4

; optimize OK (sprites.pas), line = 347

	lda #$00
	sta J

l_18CE
; --- ForToDoCondition
	lda J
	cmp #$08
	jcs l_18DC

; optimize OK (sprites.pas), line = 350

	lda PLAYERPOS_Y
	add DIR_Y
	sta PLAYERPOS_Y

; optimize OK (sprites.pas), line = 351

	lda #$01
	jsr PAINTPLAYER

; optimize OK (sprites.pas), line = 352

	lda #$01
	jsr WAITFRAMES

; --- ForToDoEpilog
	inc J
	jne l_18CE
l_18DC
l_18C4

; optimize OK (sprites.pas), line = 356

	lda DIR_X
	jeq l_1905

; optimize OK (sprites.pas), line = 358

	lda #$00
	sta J

l_190F
; --- ForToDoCondition
	lda J
	cmp #$08
	jcs l_191D

; optimize OK (sprites.pas), line = 360

	lda PLAYERPOS_X
	add DIR_X
	sta PLAYERPOS_X

; optimize OK (sprites.pas), line = 361

	lda #$00
	jsr PAINTPLAYER

; optimize OK (sprites.pas), line = 362

	lda #$01
	jsr WAITFRAMES

; --- ForToDoEpilog
	inc J
	jne l_190F
l_191D
l_1905

; optimize OK (sprites.pas), line = 367

	lda CURLOC
	cmp #$10
	jne l_1946

; optimize FAIL ('ROADBLOCK', sprites.pas), line = 370

	jsr ROADBLOCK
	lda ROADBLOCK.RESULT
	sta J

; optimize OK (sprites.pas), line = 371

	jeq l_195D

; optimize FAIL ('GOTCAUGHT', sprites.pas), line = 374

	jsr GOTCAUGHT
	lda GOTCAUGHT.RESULT
	sta R

; optimize OK (sprites.pas), line = 375

	jne l_1974

; optimize OK (sprites.pas), line = 377

	lda #$10
	sta RESULT

; optimize FAIL ('ENABLEMAPCONSOLE', sprites.pas), line = 378

	jsr ENABLEMAPCONSOLE
	jmp l_1983
l_1974

; optimize OK (sprites.pas), line = 383

	lda #$11
	sta RESULT
	jmp @exit
l_1983
	jmp l_1990
l_195D

; optimize FAIL ('ENABLEMAPCONSOLE', sprites.pas), line = 389

	jsr ENABLEMAPCONSOLE
l_1990
l_1946

; optimize OK (sprites.pas), line = 392

	lda CURLOC
	sta RESULT
@exit

; ------------------------------------------------------------

CH	= DATAORIGIN+$14F0
RESULT	= DATAORIGIN+$14F1
J	= DATAORIGIN+$14F2
DIR_X	= DATAORIGIN+$14F3
DIR_Y	= DATAORIGIN+$14F4
LENCID	= DATAORIGIN+$14F5
LEAVEMAP	= DATAORIGIN+$14F6
CURLOC	= DATAORIGIN+$14F7
R	= DATAORIGIN+$14F8
@CASETMP_000B	= DATAORIGIN+$14F9
@CASETMP_000C	= DATAORIGIN+$14FA

@VarData	= CH
@VarDataSize	= 10

	rts						; ret
.endl

.local	CLEARSPRITES					; PROCEDURE

; optimize OK (sprites.pas), line = 398

	lda #$00
	m@fill $DB00 10
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	ENABLESPRITES					; PROCEDURE

; optimize FAIL ('CLEARSPRITES', sprites.pas), line = 405

	jsr CLEARSPRITES

; -------------------  ASM Block 00000163  -------------------

;
        // we need to put it into registers directly,  because we do not have
        // the OS activated, so we have no routine that copies shadow to registers.
        lda #$3e        // single line, both players & missiles
        sta SDMCTL      // shadow of DMACTL
        sta DMACTL
        lda #1          // players in front of playfields
        sta $26f        // shadow of PRIOR WHY GPRIOR DOES NOT EXIST?
        sta $D01B
        lda #3          // turn on missiles & players
        sta GRACTL      // no shadow for this one
        lda #>PMG_BASE_ADR      // high byte of player storage
        sta PMBASE      // missiles = $7b00, player0 = $7c00

        lda #$00     // eyes and tie
        sta PCOLR0
        lda #$14   // face/beard
        sta PCOLR1
        lda #$74        // main player color
        sta PCOLR2
        lda #$0e   //face and shirt
        sta PCOLR3
    
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	FIGHT_PUTPLAYER					; PROCEDURE

; optimize OK (fight_utils.pas), line = 8

	lda S
	asl @
	asl @
	asl @
	asl @
	asl @
	asl @
	asl @
	sta :STACKORIGIN+9
	lda D
	asl @
	add :STACKORIGIN+9
	sta S

; optimize OK (fight_utils.pas), line = 9

	lda X
	cmp #$01
	jne l_19D0

; optimize OK (fight_utils.pas), line = 10

	lda S
	add #$04
	sta S
l_19D0

; optimize OK (fight_utils.pas), line = 11

	lda S
	add #$02
	sta :STACKORIGIN+9
	lda #$F4
	add P+1
	sta :bp+1
	ldy P
	lda :STACKORIGIN+9
	sta (:bp),y

; optimize OK (fight_utils.pas), line = 12

	lda S
	add #$03
	sta :STACKORIGIN+9
	lda #$01
	add P
	tay
	lda #$F4
	adc P+1
	sta :bp+1
	lda :STACKORIGIN+9
	sta (:bp),y

; optimize OK (fight_utils.pas), line = 13

	lda S
	add #$0A
	sta :STACKORIGIN+9
	lda #$28
	add P
	tay
	lda #$F4
	adc P+1
	sta :bp+1
	lda :STACKORIGIN+9
	sta (:bp),y

; optimize OK (fight_utils.pas), line = 14

	lda S
	add #$0B
	sta :STACKORIGIN+9
	lda #$29
	add P
	tay
	lda #$F4
	adc P+1
	sta :bp+1
	lda :STACKORIGIN+9
	sta (:bp),y

; ------------------------------------------------------------

P	= DATAORIGIN+$14FB
S	= DATAORIGIN+$14FD
D	= DATAORIGIN+$14FE
X	= DATAORIGIN+$14FF

@VarData	= P
@VarDataSize	= 5

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	FIGHT_DRAWCURRENTPLAYER				; PROCEDURE

; optimize OK (fight_utils.pas), line = 23

	lda FP_CURRENTSITE
	asl @
	asl @
	asl @
	asl @
	asl @
	asl @
	asl @
	sta :STACKORIGIN+9
	lda FP_CURRENTSITE
	asl @
	add :STACKORIGIN+9
	sta S

; optimize OK (fight_utils.pas), line = 24

	ldy FP_CURRENTPLAYER
	lda adr.FP_SEX,y
	cmp #$01
	jne l_1A4E

; optimize OK (fight_utils.pas), line = 25

	lda S
	add #$04
	sta S
l_1A4E

; optimize OK (fight_utils.pas), line = 26

	lda FP_CURRENTPLAYER
	asl @
	tay
	lda adr.FP_POSW,y
	sta P
	lda adr.FP_POSW+1,y
	sta P+1

; optimize OK (fight_utils.pas), line = 27

	lda S
	add #$02
	sta :STACKORIGIN+9
	lda #$F4
	add P+1
	sta :bp+1
	ldy P
	lda :STACKORIGIN+9
	sta (:bp),y

; optimize OK (fight_utils.pas), line = 28

	lda S
	add #$03
	sta :STACKORIGIN+9
	lda #$01
	add P
	tay
	lda #$F4
	adc P+1
	sta :bp+1
	lda :STACKORIGIN+9
	sta (:bp),y

; optimize OK (fight_utils.pas), line = 29

	lda S
	add #$0A
	sta :STACKORIGIN+9
	lda #$28
	add P
	tay
	lda #$F4
	adc P+1
	sta :bp+1
	lda :STACKORIGIN+9
	sta (:bp),y

; optimize OK (fight_utils.pas), line = 30

	lda S
	add #$0B
	sta :STACKORIGIN+9
	lda #$29
	add P
	tay
	lda #$F4
	adc P+1
	sta :bp+1
	lda :STACKORIGIN+9
	sta (:bp),y

; ------------------------------------------------------------

P	= DATAORIGIN+$1500
S	= DATAORIGIN+$1502

@VarData	= P
@VarDataSize	= 3

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	FIGHT_CLEARPLAYER				; PROCEDURE

; optimize OK (fight_utils.pas), line = 36

	lda #$F4
	add P+1
	sta :bp+1
	ldy P
	lda #$00
	sta (:bp),y

; optimize OK (fight_utils.pas), line = 37

	lda #$01
	add P
	tay
	lda #$F4
	adc P+1
	sta :bp+1
	lda #$00
	sta (:bp),y

; optimize OK (fight_utils.pas), line = 38

	lda #$28
	add P
	tay
	lda #$F4
	adc P+1
	sta :bp+1
	lda #$00
	sta (:bp),y

; optimize OK (fight_utils.pas), line = 39

	lda #$29
	add P
	tay
	lda #$F4
	adc P+1
	sta :bp+1
	lda #$00
	sta (:bp),y

; ------------------------------------------------------------

P	= DATAORIGIN+$1503

@VarData	= P
@VarDataSize	= 2

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	FIGHT_CLEARCURRENTPLAYER			; PROCEDURE

; optimize OK (fight_utils.pas), line = 46

	lda FP_CURRENTPLAYER
	asl @
	tay
	lda adr.FP_POSW,y
	sta P
	lda adr.FP_POSW+1,y
	sta P+1

; optimize OK (fight_utils.pas), line = 47

	lda #$F4
	add P+1
	sta :bp+1
	ldy P
	lda #$00
	sta (:bp),y

; optimize OK (fight_utils.pas), line = 48

	lda #$01
	add P
	tay
	lda #$F4
	adc P+1
	sta :bp+1
	lda #$00
	sta (:bp),y

; optimize OK (fight_utils.pas), line = 49

	lda #$28
	add P
	tay
	lda #$F4
	adc P+1
	sta :bp+1
	lda #$00
	sta (:bp),y

; optimize OK (fight_utils.pas), line = 50

	lda #$29
	add P
	tay
	lda #$F4
	adc P+1
	sta :bp+1
	lda #$00
	sta (:bp),y

; ------------------------------------------------------------

P	= DATAORIGIN+$1505

@VarData	= P
@VarDataSize	= 2

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	FIGHT_DRAWPLAYERS				; PROCEDURE

; optimize OK (fight_utils.pas), line = 59

	lda #$00
	sta S

l_1B1C
; --- ForToDoCondition
	lda S
	cmp #$02
	jcs l_1B2A

; optimize OK (fight_utils.pas), line = 60

	lda #$00
	sta I
	ldy S
	lda adr.FP_N,y
	sub #$01
	sta @FORTMP_1B39_0

l_1B3C
; --- ForToDoCondition
	lda @FORTMP_1B39_0::#$00
	cmp I
	jcc l_1B4A

; optimize OK (fight_utils.pas), line = 62

	lda S
	asl @
	asl @
	asl @
	asl @
	add I
	sta Q

; optimize OK (fight_utils.pas), line = 63

	tay
	lda adr.FP_ENERGY,y
	jeq l_1B6F

; optimize OK (fight_utils.pas), line = 65

	lda adr.FP_SEX,y
	sta FIGHT_PUTPLAYER.X
	lda Q
	asl @
	tay
	lda adr.FP_POSW,y
	sta FIGHT_PUTPLAYER.P
	lda adr.FP_POSW+1,y
	sta FIGHT_PUTPLAYER.P+1
	lda S
	sta FIGHT_PUTPLAYER.S
	sta FIGHT_PUTPLAYER.D
	jsr FIGHT_PUTPLAYER
l_1B6F

; --- ForToDoEpilog
	inc I
	jne l_1B3C
l_1B4A

; --- ForToDoEpilog
	inc S
	jne l_1B1C
l_1B2A

; ------------------------------------------------------------

I	= DATAORIGIN+$1507
S	= DATAORIGIN+$1508
Q	= DATAORIGIN+$1509

@VarData	= I
@VarDataSize	= 3

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	CHECKHIT					; FUNCTION

; optimize OK (fight_utils.pas), line = 77

	lda #$00
	sta S

l_1B9B
; --- ForToDoCondition
	lda S
	cmp #$02
	jcs l_1BA9

; optimize OK (fight_utils.pas), line = 78

	lda #$00
	sta I
	ldy S
	lda adr.FP_N,y
	sub #$01
	sta @FORTMP_1BB8_0

l_1BBB
; --- ForToDoCondition
	lda @FORTMP_1BB8_0::#$00
	cmp I
	jcc l_1BC9

; optimize OK (fight_utils.pas), line = 81

	lda S
	asl @
	asl @
	asl @
	asl @
	add I
	tay
	lda adr.FP_ENERGY,y
	jne l_1BE8
	jmp c_1BBB					; continue
l_1BE8

; optimize OK (fight_utils.pas), line = 83

	lda S
	asl @
	asl @
	asl @
	asl @
	add I
	asl @
	tay
	lda adr.FP_POSW,y
	sta Z
	lda #$F4
	add adr.FP_POSW+1,y
	sta Z+1

; optimize OK (fight_utils.pas), line = 84

	lda S
	asl @
	asl @
	asl @
	asl @
	add I
	sta RESULT

; optimize OK (fight_utils.pas), line = 85

	lda K+1
	cmp Z+1
	bne @+
	lda K
	cmp Z
@
	jne l_1C23
	jmp @exit
l_1C23

; optimize OK (fight_utils.pas), line = 86

	inc Z
	sne
	inc Z+1

; optimize OK (fight_utils.pas), line = 87

	lda K+1
	cmp Z+1
	bne @+
	lda K
	cmp Z
@
	jne l_1C41
	jmp @exit
l_1C41

; optimize OK (fight_utils.pas), line = 88

	lda Z
	add #$27
	sta Z
	scc
	inc Z+1

; optimize OK (fight_utils.pas), line = 89

	lda K+1
	cmp Z+1
	bne @+
	lda K
	cmp Z
@
	jne l_1C5F
	jmp @exit
l_1C5F

; optimize OK (fight_utils.pas), line = 90

	inc Z
	sne
	inc Z+1

; optimize OK (fight_utils.pas), line = 91

	lda K+1
	cmp Z+1
	bne @+
	lda K
	cmp Z
@
	jne l_1C7D
	jmp @exit
l_1C7D

; --- ForToDoEpilog
c_1BBB
	inc I
	jne l_1BBB
l_1BC9

; --- ForToDoEpilog
	inc S
	jne l_1B9B
l_1BA9

; optimize OK (fight_utils.pas), line = 98

	lda #$80
	sta RESULT
@exit

; ------------------------------------------------------------

K	= DATAORIGIN+$150B
RESULT	= DATAORIGIN+$150D
Z	= DATAORIGIN+$150E
S	= DATAORIGIN+$1510
I	= DATAORIGIN+$1511

@VarData	= K
@VarDataSize	= 6

	rts						; ret
.endl

.local	FIGHT_SETSHOOTSTART				; PROCEDURE

; optimize OK (fight_utils.pas), line = 105

	lda SHOOT_DIFF
	sta @CASETMP_000D
	cmp #$FF
	jne l_1C9D
@

; optimize OK (fight_utils.pas), line = 106

	lda #$28
	sta SHOOT_START
	lda #$00
	sta SHOOT_START+1
	jmp a_000D
l_1C9D
	cmp #$01
	jne l_1CAA

; optimize OK (fight_utils.pas), line = 107

	lda #$29
	sta SHOOT_START
	lda #$00
	sta SHOOT_START+1
	jmp a_000D
l_1CAA
	cmp #$D8
	jne l_1CB7

; optimize OK (fight_utils.pas), line = 108

	lda #$00
	sta SHOOT_START
	sta SHOOT_START+1
	jmp a_000D
l_1CB7
	cmp #$28
	jne l_1CC4

; optimize OK (fight_utils.pas), line = 109

	lda #$28
	sta SHOOT_START
	lda #$00
	sta SHOOT_START+1
l_1CC4
a_000D

; ------------------------------------------------------------

@CASETMP_000D	= DATAORIGIN+$1513

@VarData	= @CASETMP_000D
@VarDataSize	= 1

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	FIGHT_SHOOT					; FUNCTION

; optimize FAIL ('FIGHT_SETSHOOTSTART', fight_utils.pas), line = 123

	jsr FIGHT_SETSHOOTSTART

; optimize OK (fight_utils.pas), line = 124

	lda FP_CURRENTPLAYER
	asl @
	tay
	lda adr.FP_POSW,y
	sta F_CURPOS
	lda #$F4
	add adr.FP_POSW+1,y
	sta F_CURPOS+1

; optimize OK (fight_utils.pas), line = 125

	ldy FP_CURRENTPLAYER
	lda adr.FP_WEAPON,y
	sta E

; optimize OK (fight_utils.pas), line = 126

	tay
	lda adr.WEAPONREACH,y
	sta R

; optimize OK (fight_utils.pas), line = 127

	lda #$00
	sta HITPLAYER

; optimize OK (fight_utils.pas), line = 128

	sta V

l_1D00
; --- ForToDoCondition
	lda V
	cmp #$29
	jcs l_1D0E

; optimize OK (fight_utils.pas), line = 131

	cmp R
	jne l_1D22
	jmp @exit
l_1D22

; optimize OK (fight_utils.pas), line = 134

	lda F_CURPOS
	add SHOOT_START
	sta :STACKORIGIN+9
	lda F_CURPOS+1
	adc SHOOT_START+1
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #$00
	lda SHOOT_DIFF
	spl
	dey
	add :STACKORIGIN+9
	sta K
	tya
	adc :STACKORIGIN+STACKWIDTH+9
	sta K+1

; optimize OK (fight_utils.pas), line = 135

	sta :bp+1
	ldy K
	lda (:bp),y
	sta W

; optimize OK (fight_utils.pas), line = 136

	lda SHOOT_DIFF
	cmp #$01
	jeq l_1D59x
	cmp #$FF
	jne l_1D59
l_1D59x

; optimize OK (fight_utils.pas), line = 137

	ldy K+1
	sty :bp+1
	ldy K
	lda #$12
	jmp l_1D67
l_1D59

; optimize OK (fight_utils.pas), line = 139

	ldy K+1
	sty :bp+1
	ldy K
	lda #$13
l_1D67
	sta (:bp),y

; optimize OK (fight_utils.pas), line = 140

	lda #$03
	jsr WAITFRAMES

; optimize OK (fight_utils.pas), line = 141

	lda F_CURPOS
	add SHOOT_START
	sta :STACKORIGIN+10
	lda F_CURPOS+1
	adc SHOOT_START+1
	sta :STACKORIGIN+STACKWIDTH+10
	ldy #$00
	lda SHOOT_DIFF
	spl
	dey
	sty :STACKORIGIN+STACKWIDTH+11
	add :STACKORIGIN+10
	tay
	lda :STACKORIGIN+STACKWIDTH+10
	adc :STACKORIGIN+STACKWIDTH+11
	sta :bp+1
	lda W
	sta (:bp),y

; optimize OK (fight_utils.pas), line = 143

	lda W
	jne l_1D90

; optimize OK (fight_utils.pas), line = 145

	ldy #$00
	lda SHOOT_DIFF
	spl
	dey
	add SHOOT_START
	sta SHOOT_START
	tya
	adc SHOOT_START+1
	sta SHOOT_START+1
	jmp c_1D00					; continue
l_1D90

; optimize OK (fight_utils.pas), line = 148

	lda W
	cmp #$01
	jne l_1DB0
	jmp b_1D00					; break
l_1DB0

; optimize OK (fight_utils.pas), line = 151

	lda K
	sta CHECKHIT.K
	lda K+1
	sta CHECKHIT.K+1
	jsr CHECKHIT
	lda CHECKHIT.RESULT
	sta T

; optimize OK (fight_utils.pas), line = 152

	jmi l_1DCB

; optimize OK (fight_utils.pas), line = 154

	lda #$05
	jsr WAITFRAMES

; optimize OK (fight_utils.pas), line = 158

	lda #$08
	jsr SYSTEM.RANDOM_02E9
	lda SYSTEM.RANDOM_02E9.RESULT
	sta T1

; optimize OK (fight_utils.pas), line = 159

	ldy E
	lda adr.WEAPONPRECISION,y
	asl @
	sta T2

; optimize OK (fight_utils.pas), line = 160

	lda #$0C
	jsr SYSTEM.RANDOM_02E9
	lda SYSTEM.RANDOM_02E9.RESULT
	sta T3

; optimize OK (fight_utils.pas), line = 161

	ldy FP_CURRENTPLAYER
	lda adr.FP_STRENGTH,y
	lsr @
	lsr @
	lsr @
	add #$01
	sta T4

; optimize OK (fight_utils.pas), line = 162

	lda T2
	cmp T1
	jcs l_1E18
	lda T4
	cmp T3
	jcs l_1E18
	jmp b_1D00					; break
l_1E18

; optimize OK (fight_utils.pas), line = 164

	ldy E
	lda adr.WEAPONEFFECT,y
	sta :STACKORIGIN+9
	ldy FP_CURRENTPLAYER
	lda adr.FP_BRUTALITY,y
	lsr @
	lsr @
	lsr @
	add :STACKORIGIN+9
	sta HIT

; optimize OK (fight_utils.pas), line = 165

	jne l_1E43
	jmp b_1D00					; break
l_1E43

; optimize OK (fight_utils.pas), line = 167

	lda #$00
	sta B_CRT.CRT_GOTOXY.X
	lda #$14
	sta B_CRT.CRT_GOTOXY.Y
	jsr B_CRT.CRT_GOTOXY

; optimize FAIL ('B_CRT.CRT_WRITE_053A', fight_utils.pas), line = 168

	inx
	mva FIGHT_STRING_1 :STACKORIGIN,x
	mva FIGHT_STRING_1+1 :STACKORIGIN+STACKWIDTH,x
	jsr B_CRT.CRT_WRITE_053A

; optimize FAIL ('B_CRT.CRT_WRITE_053A', fight_utils.pas), line = 169

	inx
	lda T
	asl @
	tay
	lda adr.FP_NAME,y
	sta :STACKORIGIN,x
	lda adr.FP_NAME+1,y
	sta :STACKORIGIN+STACKWIDTH,x
	jsr B_CRT.CRT_WRITE_053A

; optimize OK (fight_utils.pas), line = 170

	lda #$00
	jsr B_CRT.CRT_WRITE_054D

; optimize FAIL ('B_CRT.CRT_WRITE_053A', fight_utils.pas), line = 171

	inx
	mva FIGHT_STRING_2 :STACKORIGIN,x
	mva FIGHT_STRING_2+1 :STACKORIGIN+STACKWIDTH,x
	jsr B_CRT.CRT_WRITE_053A

; optimize OK (fight_utils.pas), line = 176

	lda #$05
	jsr WAITFRAMES

; optimize OK (fight_utils.pas), line = 177

	ldy T
	lda HIT
	cmp adr.FP_ENERGY,y
	jcc l_1E70

; optimize OK (fight_utils.pas), line = 179

	lda #$00
	sta adr.FP_ENERGY,y

; optimize OK (fight_utils.pas), line = 180

	sta B_CRT.CRT_GOTOXY.X
	lda #$14
	sta B_CRT.CRT_GOTOXY.Y
	jsr B_CRT.CRT_GOTOXY

; optimize FAIL ('B_CRT.CRT_WRITE_053A', fight_utils.pas), line = 181

	inx
	mva FIGHT_STRING_3 :STACKORIGIN,x
	mva FIGHT_STRING_3+1 :STACKORIGIN+STACKWIDTH,x
	jsr B_CRT.CRT_WRITE_053A

; optimize FAIL ('B_CRT.CRT_WRITE_053A', fight_utils.pas), line = 182

	inx
	lda T
	asl @
	tay
	lda adr.FP_NAME,y
	sta :STACKORIGIN,x
	lda adr.FP_NAME+1,y
	sta :STACKORIGIN+STACKWIDTH,x
	jsr B_CRT.CRT_WRITE_053A

; optimize OK (fight_utils.pas), line = 183

	lda #$00
	jsr B_CRT.CRT_WRITE_054D

; optimize FAIL ('B_CRT.CRT_WRITE_053A', fight_utils.pas), line = 184

	inx
	mva FIGHT_STRING_4 :STACKORIGIN,x
	mva FIGHT_STRING_4+1 :STACKORIGIN+STACKWIDTH,x
	jsr B_CRT.CRT_WRITE_053A

; optimize OK (fight_utils.pas), line = 185

	lda #$46
	jsr WAITFRAMES

; optimize OK (fight_utils.pas), line = 186

	lda T
	asl @
	tay
	lda adr.FP_POSW,y
	sta FIGHT_CLEARPLAYER.P
	lda adr.FP_POSW+1,y
	sta FIGHT_CLEARPLAYER.P+1
	jsr FIGHT_CLEARPLAYER
	jmp l_1E9A
l_1E70

; optimize OK (fight_utils.pas), line = 189

	ldy T
	lda adr.FP_ENERGY,y
	sub HIT
	sta adr.FP_ENERGY,y
l_1E9A

; optimize OK (fight_utils.pas), line = 190

	lda T
	sta RESULT

; optimize OK (fight_utils.pas), line = 192

	lda #$00
	ldy #$27
	sta:rpl $F720,y-
	jmp @exit
l_1DCB

; --- ForToDoEpilog
c_1D00
	inc V
	jne l_1D00
l_1D0E
b_1D00

; optimize OK (fight_utils.pas), line = 197

	lda #$00
	sta B_CRT.CRT_GOTOXY.X
	lda #$14
	sta B_CRT.CRT_GOTOXY.Y
	jsr B_CRT.CRT_GOTOXY

; optimize FAIL ('B_CRT.CRT_WRITE_053A', fight_utils.pas), line = 198

	inx
	mva FIGHT_STRING_5 :STACKORIGIN,x
	mva FIGHT_STRING_5+1 :STACKORIGIN+STACKWIDTH,x
	jsr B_CRT.CRT_WRITE_053A

; optimize OK (fight_utils.pas), line = 199

	lda #$05
	jsr WAITFRAMES

; optimize OK (fight_utils.pas), line = 200

	lda HITPLAYER
	sta RESULT
@exit

; ------------------------------------------------------------

RESULT	= DATAORIGIN+$1514
K	= DATAORIGIN+$1515
E	= DATAORIGIN+$1517
R	= DATAORIGIN+$1518
V	= DATAORIGIN+$1519
W	= DATAORIGIN+$151A
T	= DATAORIGIN+$151B
HIT	= DATAORIGIN+$151C
HITPLAYER	= DATAORIGIN+$151D
T1	= DATAORIGIN+$151E
T2	= DATAORIGIN+$151F
T3	= DATAORIGIN+$1520
T4	= DATAORIGIN+$1521
adr.ST	= [DATAORIGIN+$1522] .array [41]
.var ST	= adr.ST .word

@VarData	= K
@VarDataSize	= 54

	rts						; ret
.endl

.local	FIGHT_CHECKWINNER				; PROCEDURE

; optimize OK (fight_utils.pas), line = 210

	lda #$00
	sta S

l_1ED8
; --- ForToDoCondition
	lda S
	cmp #$02
	jcs l_1EE6

; optimize OK (fight_utils.pas), line = 212

	lda #$01
	sta PARTYDEAD

; optimize OK (fight_utils.pas), line = 213

	lda #$00
	sta I
	ldy S
	lda adr.FP_N,y
	sub #$01
	sta @FORTMP_1EF9_0

l_1EFC
; --- ForToDoCondition
	lda @FORTMP_1EF9_0::#$00
	cmp I
	jcc l_1F0A

; optimize OK (fight_utils.pas), line = 215

	lda S
	asl @
	asl @
	asl @
	asl @
	add I
	tay
	lda adr.FP_ENERGY,y
	jne l_1F29
	jmp c_1EFC					; continue
l_1F29

; optimize OK (fight_utils.pas), line = 217

	lda #$00
	sta PARTYDEAD

; --- ForToDoEpilog
c_1EFC
	inc I
	jne l_1EFC
l_1F0A

; optimize OK (fight_utils.pas), line = 219

	lda PARTYDEAD
	jeq l_1F47

; optimize OK (fight_utils.pas), line = 221

	lda #$01
	sub S
	sta FP_WINNER
	jmp @exit
l_1F47

; --- ForToDoEpilog
	inc S
	jne l_1ED8
l_1EE6

; ------------------------------------------------------------

S	= DATAORIGIN+$154B
I	= DATAORIGIN+$154C
PARTYDEAD	= DATAORIGIN+$154D

@VarData	= S
@VarDataSize	= 3

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	FIGHT_DISPLAYSTATS				; PROCEDURE

; optimize OK (fight_utils.pas), line = 231

	lda #$00
	ldy #$77
	sta:rpl $F748,y-

; optimize OK (fight_utils.pas), line = 232

	lda FP_CURRENTSITE
	jne l_1F73

; optimize OK (fight_utils.pas), line = 234

	sta B_CRT.CRT_GOTOXY.X
	lda #$15
	sta B_CRT.CRT_GOTOXY.Y
	jsr B_CRT.CRT_GOTOXY

; optimize FAIL ('B_CRT.CRT_WRITE_053A', fight_utils.pas), line = 235

	inx
	lda FP_CURRENTPLAYER
	asl @
	tay
	lda adr.FP_NAME,y
	sta :STACKORIGIN,x
	lda adr.FP_NAME+1,y
	sta :STACKORIGIN+STACKWIDTH,x
	jsr B_CRT.CRT_WRITE_053A

; optimize OK (fight_utils.pas), line = 236

	lda #$00
	sta B_CRT.CRT_GOTOXY.X
	lda #$16
	sta B_CRT.CRT_GOTOXY.Y
	jsr B_CRT.CRT_GOTOXY

; optimize FAIL ('B_CRT.CRT_WRITE_053A', fight_utils.pas), line = 237

	inx
	mva #$A6 :STACKORIGIN,x
	mva #$0D :STACKORIGIN+STACKWIDTH,x
	jsr B_CRT.CRT_WRITE_053A

; optimize OK (fight_utils.pas), line = 238

	ldy FP_CURRENTPLAYER
	lda adr.FP_ENERGY,y
	jsr B_CRT.CRT_WRITE_055B

; optimize OK (fight_utils.pas), line = 239

	lda #$00
	sta B_CRT.CRT_GOTOXY.X
	lda #$17
	sta B_CRT.CRT_GOTOXY.Y
	jsr B_CRT.CRT_GOTOXY

; optimize FAIL ('B_CRT.CRT_WRITE_053A', fight_utils.pas), line = 240

	inx
	mva #$E4 :STACKORIGIN,x
	mva #$0D :STACKORIGIN+STACKWIDTH,x
	jsr B_CRT.CRT_WRITE_053A

; optimize FAIL ('B_CRT.CRT_WRITE_053A', fight_utils.pas), line = 241

	inx
	ldy FP_CURRENTPLAYER
	lda adr.FP_WEAPON,y
	asl @
	tay
	lda adr.WEAPONNAMES,y
	sta :STACKORIGIN,x
	lda adr.WEAPONNAMES+1,y
	sta :STACKORIGIN+STACKWIDTH,x
	jsr B_CRT.CRT_WRITE_053A
	jmp l_1FA0
l_1F73

; optimize FAIL ('B_CRT.CRT_WRITERIGHTALIGNED_0722', fight_utils.pas), line = 245

	inx
	lda FP_CURRENTPLAYER
	asl @
	tay
	lda adr.FP_NAME,y
	sta :STACKORIGIN,x
	lda adr.FP_NAME+1,y
	sta :STACKORIGIN+STACKWIDTH,x
	inx
	mva #$15 :STACKORIGIN,x
	jsr B_CRT.CRT_WRITERIGHTALIGNED_0722

; optimize FAIL ('SYSUTILS.INTTOSTR_03E2', fight_utils.pas), line = 246

	inx
	ldy FP_CURRENTPLAYER
	lda adr.FP_ENERGY,y
	sta :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	sta :STACKORIGIN+STACKWIDTH*2,x
	sta :STACKORIGIN+STACKWIDTH*3,x
	jsr SYSUTILS.INTTOSTR_03E2
	jsr B_CRT.ATASCII2ANTIC_0448
	lda #$A6
	sta SYSTEM.CONCAT_032C.A
	lda #$0D
	sta SYSTEM.CONCAT_032C.A+1
	lda B_CRT.ATASCII2ANTIC_0448.RESULT
	sta SYSTEM.CONCAT_032C.B
	lda B_CRT.ATASCII2ANTIC_0448.RESULT+1
	sta SYSTEM.CONCAT_032C.B+1
	jsr SYSTEM.CONCAT_032C
	inx
	mva SYSTEM.CONCAT_032C.RESULT :STACKORIGIN,x
	mva SYSTEM.CONCAT_032C.RESULT+1 :STACKORIGIN+STACKWIDTH,x
	inx
	mva #$16 :STACKORIGIN,x
	jsr B_CRT.CRT_WRITERIGHTALIGNED_0722

; optimize OK (fight_utils.pas), line = 247

	ldy FP_CURRENTPLAYER
	lda adr.FP_WEAPON,y
	asl @
	tay
	lda adr.WEAPONNAMES,y
	sta SYSTEM.CONCAT_032C.B
	lda adr.WEAPONNAMES+1,y
	sta SYSTEM.CONCAT_032C.B+1
	lda #$E4
	sta SYSTEM.CONCAT_032C.A
	lda #$0D
	sta SYSTEM.CONCAT_032C.A+1
	jsr SYSTEM.CONCAT_032C
	inx
	mva SYSTEM.CONCAT_032C.RESULT :STACKORIGIN,x
	mva SYSTEM.CONCAT_032C.RESULT+1 :STACKORIGIN+STACKWIDTH,x
	inx
	mva #$17 :STACKORIGIN,x
	jsr B_CRT.CRT_WRITERIGHTALIGNED_0722
l_1FA0
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	FIGHT_MOVECURRENTPLAYER				; PROCEDURE

; optimize OK (fight_utils.pas), line = 257

	lda #$00
	sta FP_VALIDCMD

; optimize OK (fight_utils.pas), line = 258

	lda FP_CURRENTPLAYER
	asl @
	tay
	lda adr.FP_POSW,y
	sta F_CURPOS
	lda #$F4
	add adr.FP_POSW+1,y
	sta F_CURPOS+1

; optimize OK (fight_utils.pas), line = 259

	lda #$02
	cmp FP_CURRENTCOMMAND
	jne l_1FE5

; optimize OK (fight_utils.pas), line = 260

	lda F_CURPOS
	sub #$01
	sta :STACKORIGIN+9
	lda F_CURPOS+1
	sbc #$00
	sta :bp+1
	ldy :STACKORIGIN+9
	lda (:bp),y
	jne l_1FFC

; optimize OK (fight_utils.pas), line = 261

	mwy F_CURPOS :bp2
	ldy #$27
	lda (:bp2),y
	jne l_2017

; optimize OK (fight_utils.pas), line = 262

	lda #$FF
	sta FP_VALIDCMD
l_2017
l_1FFC
l_1FE5

; optimize OK (fight_utils.pas), line = 264

	lda #$73
	cmp FP_CURRENTCOMMAND
	jne l_2034

; optimize OK (fight_utils.pas), line = 265

	mwy F_CURPOS :bp2
	ldy #$02
	lda (:bp2),y
	jne l_204B

; optimize OK (fight_utils.pas), line = 266

	ldy #$2A
	lda (:bp2),y
	jne l_2066

; optimize OK (fight_utils.pas), line = 267

	lda #$01
	sta FP_VALIDCMD
l_2066
l_204B
l_2034

; optimize OK (fight_utils.pas), line = 269

	lda #$60
	cmp FP_CURRENTCOMMAND
	jne l_2083

; optimize OK (fight_utils.pas), line = 270

	lda F_CURPOS
	sub #$28
	sta :STACKORIGIN+9
	lda F_CURPOS+1
	sbc #$00
	sta :bp+1
	ldy :STACKORIGIN+9
	lda (:bp),y
	jne l_209A

; optimize OK (fight_utils.pas), line = 271

	lda F_CURPOS
	add #$D9
	sta :STACKORIGIN+9
	lda F_CURPOS+1
	adc #$FF
	sta :bp+1
	ldy :STACKORIGIN+9
	lda (:bp),y
	jne l_20B5

; optimize OK (fight_utils.pas), line = 272

	lda #$D8
	sta FP_VALIDCMD
l_20B5
l_209A
l_2083

; optimize OK (fight_utils.pas), line = 274

	lda #$26
	cmp FP_CURRENTCOMMAND
	jne l_20D2

; optimize OK (fight_utils.pas), line = 275

	mwy F_CURPOS :bp2
	ldy #$50
	lda (:bp2),y
	jne l_20E9

; optimize OK (fight_utils.pas), line = 276

	iny
	lda (:bp2),y
	jne l_2104

; optimize OK (fight_utils.pas), line = 277

	lda #$28
	sta FP_VALIDCMD
l_2104
l_20E9
l_20D2

; optimize OK (fight_utils.pas), line = 279

	lda FP_VALIDCMD
	jeq l_2121

; optimize FAIL ('FIGHT_CLEARCURRENTPLAYER', fight_utils.pas), line = 281

	jsr FIGHT_CLEARCURRENTPLAYER

; optimize OK (fight_utils.pas), line = 282

	lda FP_CURRENTPLAYER
	asl @
	tay
	lda adr.FP_POSW,y
	sta :STACKORIGIN+10
	lda adr.FP_POSW+1,y
	sta :STACKORIGIN+STACKWIDTH+10
	ldy #$00
	lda FP_VALIDCMD
	spl
	dey
	sty :STACKORIGIN+STACKWIDTH+11
	add :STACKORIGIN+10
	sta :STACKORIGIN+10
	lda :STACKORIGIN+STACKWIDTH+10
	adc :STACKORIGIN+STACKWIDTH+11
	sta :STACKORIGIN+STACKWIDTH+10
	lda FP_CURRENTPLAYER
	asl @
	tay
	lda :STACKORIGIN+10
	sta adr.FP_POSW,y
	lda :STACKORIGIN+STACKWIDTH+10
	sta adr.FP_POSW+1,y
l_2121
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	WAITFORKEYRELEASE				; PROCEDURE

; --- RepeatUntilProlog
l_213B

; optimize FAIL ('CHECKKEYANDSTICK', fight_utils.pas), line = 293

	jsr CHECKKEYANDSTICK
	lda CHECKKEYANDSTICK.RESULT
	sta CH

; optimize OK (fight_utils.pas), line = 294

	cmp #$0C
	jeq l_213B

; ------------------------------------------------------------

CH	= DATAORIGIN+$154F

@VarData	= CH
@VarDataSize	= 1

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	FIGHT_ATTACKCURRENTPLAYER			; PROCEDURE

; optimize OK (fight_utils.pas), line = 303

	lda FP_CURRENTCOMMAND
	cmp #$0C
	jne l_2162

; optimize FAIL ('FIGHT_DRAWCURRENTPLAYER', fight_utils.pas), line = 306

	jsr FIGHT_DRAWCURRENTPLAYER

; optimize FAIL ('WAITFORKEYRELEASE', fight_utils.pas), line = 307

	jsr WAITFORKEYRELEASE

; optimize OK (fight_utils.pas), line = 309

	lda #$00
	sta CURRENTBLINK

; --- RepeatUntilProlog
l_216A

; optimize FAIL ('B_SYSTEM.WAITFRAME', fight_utils.pas), line = 311

	jsr B_SYSTEM.WAITFRAME

; optimize OK (fight_utils.pas), line = 312

	lda CURRENTBLINK
	cmp #$05
	jne l_217D

; optimize FAIL ('FIGHT_CLEARCURRENTPLAYER', fight_utils.pas), line = 313

	jsr FIGHT_CLEARCURRENTPLAYER
l_217D

; optimize OK (fight_utils.pas), line = 314

	lda CURRENTBLINK
	cmp #$0A
	jne l_2193

; optimize OK (fight_utils.pas), line = 316

	lda #$00
	sta CURRENTBLINK

; optimize FAIL ('FIGHT_DRAWCURRENTPLAYER', fight_utils.pas), line = 317

	jsr FIGHT_DRAWCURRENTPLAYER
l_2193

; optimize OK (fight_utils.pas), line = 319

	inc CURRENTBLINK

; optimize FAIL ('CHECKKEYANDSTICK', fight_utils.pas), line = 320

	jsr CHECKKEYANDSTICK
	lda CHECKKEYANDSTICK.RESULT
	sta CH

; optimize OK (fight_utils.pas), line = 321

	cmp #$26
	jeq l_216Ax
	cmp #$60
	jeq l_216Ax
	cmp #$73
	jeq l_216Ax
	cmp #$02
	jeq l_216Ax
	cmp #$0C
	jne l_216A
l_216Ax

; optimize FAIL ('FIGHT_DRAWPLAYERS', fight_utils.pas), line = 323

	jsr FIGHT_DRAWPLAYERS

; optimize OK (fight_utils.pas), line = 324

	lda CH
	sta @CASETMP_000E
	cmp #$02
	jne l_21F2
@

; optimize OK (fight_utils.pas), line = 325

	lda #$FF
	sta SHOOT_DIFF
	jmp a_000E
l_21F2
	cmp #$73
	jne l_21FF

; optimize OK (fight_utils.pas), line = 326

	lda #$01
	sta SHOOT_DIFF
	jmp a_000E
l_21FF
	cmp #$60
	jne l_220C

; optimize OK (fight_utils.pas), line = 327

	lda #$D8
	sta SHOOT_DIFF
	jmp a_000E
l_220C
	cmp #$26
	jne l_2219

; optimize OK (fight_utils.pas), line = 328

	lda #$28
	sta SHOOT_DIFF
	jmp a_000E
l_2219
	cmp #$0C
	jne l_2226

; optimize FAIL ('WAITFORKEYRELEASE', fight_utils.pas), line = 331

	jsr WAITFORKEYRELEASE

; optimize OK (fight_utils.pas), line = 332

	lda #$00
	sta FP_VALIDCMD
	jmp @exit
l_2226
a_000E

; optimize FAIL ('FIGHT_SHOOT', fight_utils.pas), line = 336

	jsr FIGHT_SHOOT

; optimize OK (fight_utils.pas), line = 337

	lda #$01
	sta FP_VALIDCMD
	jmp @exit
l_2162

; optimize OK (fight_utils.pas), line = 340

	lda #$00
	sta FP_VALIDCMD

; ------------------------------------------------------------

CH	= DATAORIGIN+$1550
CURRENTBLINK	= DATAORIGIN+$1551
@CASETMP_000E	= DATAORIGIN+$1552

@VarData	= CH
@VarDataSize	= 3

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	FIGHT_WAITFORCOMMAND				; PROCEDURE

; optimize OK (fight_utils.pas), line = 350

	lda #$00
	sta CURRENTBLINK

; --- RepeatUntilProlog
l_2248

; optimize FAIL ('B_SYSTEM.WAITFRAME', fight_utils.pas), line = 352

	jsr B_SYSTEM.WAITFRAME

; optimize OK (fight_utils.pas), line = 353

	lda CURRENTBLINK
	cmp #$1E
	jne l_225B

; optimize FAIL ('FIGHT_CLEARCURRENTPLAYER', fight_utils.pas), line = 354

	jsr FIGHT_CLEARCURRENTPLAYER
l_225B

; optimize OK (fight_utils.pas), line = 355

	lda CURRENTBLINK
	cmp #$3C
	jne l_2271

; optimize OK (fight_utils.pas), line = 357

	lda #$00
	sta CURRENTBLINK

; optimize FAIL ('FIGHT_DRAWCURRENTPLAYER', fight_utils.pas), line = 358

	jsr FIGHT_DRAWCURRENTPLAYER
l_2271

; optimize OK (fight_utils.pas), line = 360

	inc CURRENTBLINK

; optimize FAIL ('CHECKKEYANDSTICK', fight_utils.pas), line = 361

	jsr CHECKKEYANDSTICK
	lda CHECKKEYANDSTICK.RESULT
	sta CH

; optimize OK (fight_utils.pas), line = 362

	jeq l_2248

; optimize OK (fight_utils.pas), line = 363

	sta FP_CURRENTCOMMAND

; ------------------------------------------------------------

CH	= DATAORIGIN+$1553
CURRENTBLINK	= DATAORIGIN+$1554

@VarData	= CH
@VarDataSize	= 2

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	FIGHT_PLAYERMOVE				; PROCEDURE

; --- RepeatUntilProlog
l_229F

; optimize FAIL ('FIGHT_WAITFORCOMMAND', fight_utils.pas), line = 371

	jsr FIGHT_WAITFORCOMMAND

; optimize OK (fight_utils.pas), line = 374

	lda FP_CURRENTCOMMAND
	cmp #$21
	jne l_22B2
	jmp @exit
l_22B2

; optimize OK (fight_utils.pas), line = 377

	lda FP_CURRENTCOMMAND
	cmp #$2F
	jne l_22C7

; optimize OK (fight_utils.pas), line = 379

	lda #$01
	sub FP_CURRENTSITE
	sta FP_WINNER
	jmp @exit
l_22C7

; optimize FAIL ('FIGHT_MOVECURRENTPLAYER', fight_utils.pas), line = 384

	jsr FIGHT_MOVECURRENTPLAYER

; optimize OK (fight_utils.pas), line = 386

	lda FP_VALIDCMD
	jne l_22E7

; optimize FAIL ('FIGHT_ATTACKCURRENTPLAYER', fight_utils.pas), line = 387

	jsr FIGHT_ATTACKCURRENTPLAYER
l_22E7

; optimize OK (fight_utils.pas), line = 388

	lda FP_VALIDCMD
	jeq l_229F
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	FIGHT_CHECKSHOOT				; FUNCTION

; optimize OK (fight_ai.pas), line = 8

	lda #$00
	sta RESULT

; optimize FAIL ('FIGHT_SETSHOOTSTART', fight_ai.pas), line = 9

	jsr FIGHT_SETSHOOTSTART

; optimize OK (fight_ai.pas), line = 10

	lda FP_CURRENTPLAYER
	asl @
	tay
	lda adr.FP_POSW,y
	sta F_CURPOS
	lda #$F4
	add adr.FP_POSW+1,y
	sta F_CURPOS+1

; optimize OK (fight_ai.pas), line = 11

	ldy FP_CURRENTPLAYER
	lda adr.FP_WEAPON,y
	tay
	lda adr.WEAPONREACH,y
	sta R

; optimize OK (fight_ai.pas), line = 14

	lda #$00
	sta V

l_2322
; --- ForToDoCondition
	lda V
	cmp #$29
	jcs l_2330

; optimize OK (fight_ai.pas), line = 17

	cmp R
	jne l_2344
	jmp @exit
l_2344

; optimize OK (fight_ai.pas), line = 19

	lda F_CURPOS
	add SHOOT_START
	sta :STACKORIGIN+9
	lda F_CURPOS+1
	adc SHOOT_START+1
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #$00
	lda SHOOT_DIFF
	spl
	dey
	add :STACKORIGIN+9
	sta K
	tya
	adc :STACKORIGIN+STACKWIDTH+9
	sta K+1

; optimize OK (fight_ai.pas), line = 20

	sta :bp+1
	ldy K
	lda (:bp),y
	sta W

; optimize OK (fight_ai.pas), line = 21

	jne l_236F

; optimize OK (fight_ai.pas), line = 23

	ldy #$00
	lda SHOOT_DIFF
	spl
	dey
	add SHOOT_START
	sta SHOOT_START
	tya
	adc SHOOT_START+1
	sta SHOOT_START+1
	jmp c_2322					; continue
l_236F

; optimize OK (fight_ai.pas), line = 26

	lda W
	cmp #$01
	jne l_238F
	jmp b_2322					; break
l_238F

; optimize OK (fight_ai.pas), line = 29

	lda K
	sta CHECKHIT.K
	lda K+1
	sta CHECKHIT.K+1
	jsr CHECKHIT
	lda CHECKHIT.RESULT
	sta T

; optimize OK (fight_ai.pas), line = 30

	cmp #$80
	jne l_23AA
	jmp c_2322					; continue
l_23AA

; optimize OK (fight_ai.pas), line = 33

	ldy #1
	lda FP_CURRENTSITE
	beq @+
	dey
@
	sty :STACKORIGIN+9
	ldy #1
	lda T
	cmp #$10
	bcc @+
	dey
@
	tya
	and :STACKORIGIN+9
	sta :STACKORIGIN+9
	ldy #1
	lda FP_CURRENTSITE
	cmp #$01
	beq @+
	dey
@
	sty :STACKORIGIN+10
	ldy #1
	lda T
	cmp #$10
	bcs @+
	dey
@
	tya
	and :STACKORIGIN+10
	ora :STACKORIGIN+9
	jeq l_23E3

; optimize OK (fight_ai.pas), line = 35

	lda #$00
	sta RESULT
	jmp @exit
l_23E3

; optimize OK (fight_ai.pas), line = 40

	lda #$01
	sta RESULT
	jmp @exit

; --- ForToDoEpilog
c_2322
	inc V
	jne l_2322
l_2330
b_2322

; optimize OK (fight_ai.pas), line = 44

	lda #$00
	sta RESULT
@exit

; ------------------------------------------------------------

RESULT	= DATAORIGIN+$1555
K	= DATAORIGIN+$1556
R	= DATAORIGIN+$1558
V	= DATAORIGIN+$1559
W	= DATAORIGIN+$155A
T	= DATAORIGIN+$155B

@VarData	= K
@VarDataSize	= 6

	rts						; ret
.endl

.local	FIGHT_AIMOVE					; PROCEDURE

; optimize OK (fight_ai.pas), line = 54

	lda #$00
	sta S

l_2404
; --- ForToDoCondition
	lda S
	cmp #$04
	jcs l_2412

; optimize OK (fight_ai.pas), line = 56

	sta @CASETMP_000F
	cmp #$00
	jne l_241D
@

; optimize OK (fight_ai.pas), line = 57

	lda #$FF
	sta SHOOT_DIFF
	jmp a_000F
l_241D
	cmp #$01
	jne l_242A

; optimize OK (fight_ai.pas), line = 58

	lda #$01
	sta SHOOT_DIFF
	jmp a_000F
l_242A
	cmp #$02
	jne l_2437

; optimize OK (fight_ai.pas), line = 59

	lda #$D8
	sta SHOOT_DIFF
	jmp a_000F
l_2437
	cmp #$03
	jne l_2444

; optimize OK (fight_ai.pas), line = 60

	lda #$28
	sta SHOOT_DIFF
l_2444
a_000F

; optimize FAIL ('FIGHT_CHECKSHOOT', fight_ai.pas), line = 62

	jsr FIGHT_CHECKSHOOT
	lda FIGHT_CHECKSHOOT.RESULT
	jeq l_2460

; optimize FAIL ('FIGHT_SHOOT', fight_ai.pas), line = 64

	jsr FIGHT_SHOOT
	jmp @exit
l_2460

; --- ForToDoEpilog
	inc S
	jne l_2404
l_2412

; optimize OK (fight_ai.pas), line = 71

	lda #$00
	sta NE
	sta NE+1

; optimize OK (fight_ai.pas), line = 72

	lda #$E7
	sta ND
	lda #$03
	sta ND+1

; optimize OK (fight_ai.pas), line = 73

	lda FP_CURRENTPLAYER
	asl @
	tay
	lda adr.FP_POSW,y
	sta CP
	lda adr.FP_POSW+1,y
	sta CP+1

; optimize OK (fight_ai.pas), line = 74

	lda #$00
	sta II
	lda #$01
	sub FP_CURRENTSITE
	tay
	lda adr.FP_N,y
	sub #$01
	sta @FORTMP_248C_0

l_248F
; --- ForToDoCondition
	lda @FORTMP_248C_0::#$00
	cmp II
	jcc l_249D

; optimize OK (fight_ai.pas), line = 77

	lda #$01
	sub FP_CURRENTSITE
	asl @
	asl @
	asl @
	asl @
	sta DX

; optimize OK (fight_ai.pas), line = 78

	add II
	tay
	lda adr.FP_ENERGY,y
	jne l_24C6
	jmp c_248F					; continue
l_24C6

; optimize OK (fight_ai.pas), line = 79

	ldy #$00
	lda DX
	spl
	dey
	sty :STACKORIGIN+STACKWIDTH+9
	add II
	sta :STACKORIGIN+9
	lda :STACKORIGIN+STACKWIDTH+9
	adc #$00
	asl :STACKORIGIN+9
	rol @
	sta :STACKORIGIN+STACKWIDTH+9
	lda :STACKORIGIN+9
	add #$00
	tay
	lda :STACKORIGIN+STACKWIDTH+9
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+9
	lda adr.FP_POSW,y
	sta EP
	lda adr.FP_POSW+1,y
	sta EP+1

; optimize OK (fight_ai.pas), line = 81

	lda #$28
	sta @SMALLINT.MOD.B
	lda #$00
	sta @SMALLINT.MOD.B+1
	lda CP
	sta @SMALLINT.MOD.A
	lda CP+1
	sta @SMALLINT.MOD.A+1
	jsr @SMALLINT.MOD
	lda @SMALLINT.MOD.RESULT
	sta :STACKORIGIN+9
	lda #$28
	sta @SMALLINT.MOD.B
	lda #$00
	sta @SMALLINT.MOD.B+1
	lda EP
	sta @SMALLINT.MOD.A
	lda EP+1
	sta @SMALLINT.MOD.A+1
	jsr @SMALLINT.MOD
	lda :STACKORIGIN+9
	sub @SMALLINT.MOD.RESULT
	sta DX

; optimize OK (fight_ai.pas), line = 82

	lda #$28
	sta @SMALLINT.DIV.B
	lda #$00
	sta @SMALLINT.DIV.B+1
	lda CP
	sta @SMALLINT.DIV.A
	lda CP+1
	sta @SMALLINT.DIV.A+1
	jsr @SMALLINT.DIV
	lda :eax
	sta :STACKORIGIN+9
	lda #$28
	sta @SMALLINT.DIV.B
	lda #$00
	sta @SMALLINT.DIV.B+1
	lda EP
	sta @SMALLINT.DIV.A
	lda EP+1
	sta @SMALLINT.DIV.A+1
	jsr @SMALLINT.DIV
	lda :STACKORIGIN+9
	sub :eax
	sta DY

; optimize OK (fight_ai.pas), line = 83

	lda DX
	cmp #$80
	lda #$00
	rol @
	sta :STACKORIGIN+11
	lda #$00
	sta :STACKORIGIN+STACKWIDTH+11
	lda :STACKORIGIN+11
	asl @
	rol :STACKORIGIN+STACKWIDTH+11
	sta :STACKORIGIN+11
	lda #$01
	sub :STACKORIGIN+11
	sta :ecx
	lda #$00
	sbc :STACKORIGIN+STACKWIDTH+11
	sta :ecx+1
	ldy #$00
	lda DX
	spl
	dey
	sty :eax+1
	sta :eax
	.ifdef fmulinit
	fmulu_16
	els
	imulCX
	eif
	lda :eax
	sta :STACKORIGIN+9
	lda :eax+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda DY
	cmp #$80
	lda #$00
	rol @
	sta :STACKORIGIN+12
	lda #$00
	sta :STACKORIGIN+STACKWIDTH+12
	lda :STACKORIGIN+12
	asl @
	rol :STACKORIGIN+STACKWIDTH+12
	sta :STACKORIGIN+12
	lda #$01
	sub :STACKORIGIN+12
	sta :ecx
	lda #$00
	sbc :STACKORIGIN+STACKWIDTH+12
	sta :ecx+1
	ldy #$00
	lda DY
	spl
	dey
	sty :eax+1
	sta :eax
	.ifdef fmulinit
	fmulu_16
	els
	imulCX
	eif
	lda :STACKORIGIN+9
	add :eax
	sta DIST
	lda :STACKORIGIN+STACKWIDTH+9
	adc :eax+1
	sta DIST+1

; optimize OK (fight_ai.pas), line = 84

	lda DIST
	cmp ND
	lda DIST+1
	sbc ND+1
	svc
	eor #$80
	jpl l_2541

; optimize OK (fight_ai.pas), line = 86

	lda II
	sta NE
	lda #$00
	sta NE+1

; optimize OK (fight_ai.pas), line = 87

	lda DIST
	sta ND
	lda DIST+1
	sta ND+1
l_2541

; --- ForToDoEpilog
c_248F
	inc II
	jne l_248F
l_249D

; optimize OK (fight_ai.pas), line = 96

	lda #$01
	sub FP_CURRENTSITE
	asl @
	asl @
	asl @
	asl @
	sta DX

; optimize OK (fight_ai.pas), line = 97

	add NE
	sta DX

; optimize OK (fight_ai.pas), line = 98

	asl @
	tay
	lda adr.FP_POSW,y
	sta EP
	lda adr.FP_POSW+1,y
	sta EP+1

; optimize OK (fight_ai.pas), line = 99

	lda #$28
	sta @SMALLINT.MOD.B
	lda #$00
	sta @SMALLINT.MOD.B+1
	lda CP
	sta @SMALLINT.MOD.A
	lda CP+1
	sta @SMALLINT.MOD.A+1
	jsr @SMALLINT.MOD
	lda @SMALLINT.MOD.RESULT
	sta :STACKORIGIN+9
	lda #$28
	sta @SMALLINT.MOD.B
	lda #$00
	sta @SMALLINT.MOD.B+1
	lda EP
	sta @SMALLINT.MOD.A
	lda EP+1
	sta @SMALLINT.MOD.A+1
	jsr @SMALLINT.MOD
	lda :STACKORIGIN+9
	sub @SMALLINT.MOD.RESULT
	sta DX

; optimize OK (fight_ai.pas), line = 100

	lda #$28
	sta @SMALLINT.DIV.B
	lda #$00
	sta @SMALLINT.DIV.B+1
	lda CP
	sta @SMALLINT.DIV.A
	lda CP+1
	sta @SMALLINT.DIV.A+1
	jsr @SMALLINT.DIV
	lda :eax
	sta :STACKORIGIN+9
	lda #$28
	sta @SMALLINT.DIV.B
	lda #$00
	sta @SMALLINT.DIV.B+1
	lda EP
	sta @SMALLINT.DIV.A
	lda EP+1
	sta @SMALLINT.DIV.A+1
	jsr @SMALLINT.DIV
	lda :STACKORIGIN+9
	sub :eax
	sta DY

; optimize OK (fight_ai.pas), line = 103

	lda #$02
	jsr SYSTEM.RANDOM_02E9
	lda SYSTEM.RANDOM_02E9.RESULT
	cmp #$01
	jne l_25AA

; optimize OK (fight_ai.pas), line = 105

	lda DX
	jpl l_25BD
	lda #$73
	jmp l_25CB
l_25BD
	lda #$02
l_25CB
	jmp l_25D8
l_25AA

; optimize OK (fight_ai.pas), line = 109

	lda DY
	jpl l_25EA
	lda #$26
	jmp l_25F8
l_25EA
	lda #$60
l_25D8
l_25F8
	sta FP_CURRENTCOMMAND

; optimize FAIL ('FIGHT_CLEARCURRENTPLAYER', fight_ai.pas), line = 113

	jsr FIGHT_CLEARCURRENTPLAYER

; optimize FAIL ('FIGHT_MOVECURRENTPLAYER', fight_ai.pas), line = 114

	jsr FIGHT_MOVECURRENTPLAYER

; optimize OK (fight_ai.pas), line = 116

	lda FP_VALIDCMD
	jne l_2610

; optimize OK (fight_ai.pas), line = 118

	lda FP_CURRENTCOMMAND
	sta @CASETMP_0010
	cmp #$26
	jne l_261C
@

; optimize OK (fight_ai.pas), line = 119

	lda #$02
	jsr SYSTEM.RANDOM_02E9
	lda SYSTEM.RANDOM_02E9.RESULT
	cmp #$01
	jne l_262D
	lda #$02
	jmp l_263B
l_262D
	lda #$73
l_263B
	sta FP_CURRENTCOMMAND
	jmp a_0010
l_261C
	cmp #$60
	jne l_2648

; optimize OK (fight_ai.pas), line = 120

	lda #$02
	jsr SYSTEM.RANDOM_02E9
	lda SYSTEM.RANDOM_02E9.RESULT
	cmp #$01
	jne l_2659
	lda #$02
	jmp l_2667
l_2659
	lda #$73
l_2667
	sta FP_CURRENTCOMMAND
	jmp a_0010
l_2648
	cmp #$02
	jne l_2674

; optimize OK (fight_ai.pas), line = 121

	lda #$02
	jsr SYSTEM.RANDOM_02E9
	lda SYSTEM.RANDOM_02E9.RESULT
	cmp #$01
	jne l_2685
	lda #$26
	jmp l_2693
l_2685
	lda #$60
l_2693
	sta FP_CURRENTCOMMAND
	jmp a_0010
l_2674
	cmp #$73
	jne l_26A0

; optimize OK (fight_ai.pas), line = 122

	lda #$02
	jsr SYSTEM.RANDOM_02E9
	lda SYSTEM.RANDOM_02E9.RESULT
	cmp #$01
	jne l_26B1
	lda #$26
	jmp l_26BF
l_26B1
	lda #$60
l_26BF
	sta FP_CURRENTCOMMAND
l_26A0
a_0010

; optimize FAIL ('FIGHT_MOVECURRENTPLAYER', fight_ai.pas), line = 124

	jsr FIGHT_MOVECURRENTPLAYER
l_2610

; ------------------------------------------------------------

S	= DATAORIGIN+$155C
DX	= DATAORIGIN+$155D
DY	= DATAORIGIN+$155E
II	= DATAORIGIN+$155F
CP	= DATAORIGIN+$1560
EP	= DATAORIGIN+$1562
DIST	= DATAORIGIN+$1564
NE	= DATAORIGIN+$1566
ND	= DATAORIGIN+$1568
@CASETMP_000F	= DATAORIGIN+$156A
@CASETMP_0010	= DATAORIGIN+$156C

@VarData	= S
@VarDataSize	= 16

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	SETUPFIGHTARENA					; FUNCTION

; optimize OK (fight.pas), line = 7

	lda #$00
	sta PLAYERPOS_X

; optimize OK (fight.pas), line = 8

	sta PLAYERPOS_Y

; optimize OK (fight.pas), line = 10

	sta SYSTEM.FILLCHAR_02BB.A
	lda #$F4
	sta SYSTEM.FILLCHAR_02BB.A+1
	lda #$C0
	sta SYSTEM.FILLCHAR_02BB.COUNT
	lda #$03
	sta SYSTEM.FILLCHAR_02BB.COUNT+1
	lda #$00
	sta SYSTEM.FILLCHAR_02BB.VALUE
	.LOCAL +MAIN.SYSTEM.FILLCHAR_02BB
	m@INLINE
	.ENDL

; optimize FAIL ('ENABLEMAPCONSOLE', fight.pas), line = 11

	jsr ENABLEMAPCONSOLE

; optimize OK (fight.pas), line = 12

	lda FIGHTFNTNAME
	sta XBAPLIB.XBUNAPL.FNAM
	lda FIGHTFNTNAME+1
	sta XBAPLIB.XBUNAPL.FNAM+1
	lda #$00
	sta XBAPLIB.XBUNAPL.OUTPUTPOINTER
	lda #$F0
	sta XBAPLIB.XBUNAPL.OUTPUTPOINTER+1
	jsr XBAPLIB.XBUNAPL

; optimize OK (fight.pas), line = 13

	lda FIGHTSCRNAME
	sta XBAPLIB.XBUNAPL.FNAM
	lda FIGHTSCRNAME+1
	sta XBAPLIB.XBUNAPL.FNAM+1
	lda #$00
	sta XBAPLIB.XBUNAPL.OUTPUTPOINTER
	lda #$F4
	sta XBAPLIB.XBUNAPL.OUTPUTPOINTER+1
	jsr XBAPLIB.XBUNAPL

; optimize OK (fight.pas), line = 14

	lda #$00
	ldy #256-200
	sta:rne $F6F8+200-256,y+

; optimize OK (fight.pas), line = 17

	lda #$01
	sta DIDFIGHT

; optimize OK (fight.pas), line = 19

	lda adr.FP_N
	cmp #$01
	jcc l_270Fx
	lda adr.FP_N+$01
	cmp #$01
	jcs l_270F
l_270Fx

; optimize FAIL ('B_CRT.CRT_WRITECENTERED_06F6', fight.pas), line = 20

	inx
	mva #$E8 :STACKORIGIN,x
	mva #$0D :STACKORIGIN+STACKWIDTH,x
	inx
	mva #$16 :STACKORIGIN,x
	jsr B_CRT.CRT_WRITECENTERED_06F6

; optimize FAIL ('B_CRT.CRT_READKEY', fight.pas), line = 21

	jsr B_CRT.CRT_READKEY
	jmp @exit
l_270F

; optimize OK (fight.pas), line = 26

	lda #$00
	sta I

l_271F
; --- ForToDoCondition
	lda I
	cmp #$20
	jcs l_272D

; optimize OK (fight.pas), line = 27

	asl @
	tay
	lda adr.FPPOSSTART,y
	sta adr.FP_POSW,y
	lda adr.FPPOSSTART+1,y
	sta adr.FP_POSW+1,y

; --- ForToDoEpilog
	inc I
	jne l_271F
l_272D

; optimize OK (fight.pas), line = 29

	lda #$00
	sta C

; optimize FAIL ('B_CRT.CRT_WRITERIGHTALIGNED_0722', fight.pas), line = 30

	inx
	lda adr.FP_GANG+$02
	sta :STACKORIGIN,x
	lda adr.FP_GANG+1+$02
	sta :STACKORIGIN+STACKWIDTH,x
	inx
	mva #$13 :STACKORIGIN,x
	jsr B_CRT.CRT_WRITERIGHTALIGNED_0722

; optimize OK (fight.pas), line = 31

	lda #$00
	sta B_CRT.CRT_GOTOXY.X
	lda #$13
	sta B_CRT.CRT_GOTOXY.Y
	jsr B_CRT.CRT_GOTOXY

; optimize FAIL ('B_CRT.CRT_WRITE_053A', fight.pas), line = 32

	inx
	lda adr.FP_GANG+$00
	sta :STACKORIGIN,x
	lda adr.FP_GANG+1+$00
	sta :STACKORIGIN+STACKWIDTH,x
	jsr B_CRT.CRT_WRITE_053A

; optimize OK (fight.pas), line = 33

	lda #$00
	sta B_CRT.CRT_INVERT.X
	lda #$13
	sta B_CRT.CRT_INVERT.Y
	lda B_CRT.CRT_SCREENWIDTH
	sta B_CRT.CRT_INVERT.WIDTH
	jsr B_CRT.CRT_INVERT

; optimize OK (fight.pas), line = 35

	lda #$63
	sta FP_WINNER

; --- RepeatUntilProlog
l_2758

; optimize OK (fight.pas), line = 37

	lda #$00
	sta FP_CURRENTSITE

l_2761
; --- ForToDoCondition
	lda FP_CURRENTSITE
	cmp #$02
	jcs l_276F

; optimize OK (fight.pas), line = 39

	lda #$00
	sta I
	ldy FP_CURRENTSITE
	lda adr.FP_N,y
	sub #$01
	sta @FORTMP_277E_0

l_2781
; --- ForToDoCondition
	lda @FORTMP_277E_0::#$00
	cmp I
	jcc l_278F

; optimize OK (fight.pas), line = 41

	lda FP_CURRENTSITE
	asl @
	asl @
	asl @
	asl @
	add I
	sta FP_CURRENTPLAYER

; optimize OK (fight.pas), line = 42

	tay
	lda adr.FP_ENERGY,y
	jne l_27B4
	jmp c_2781					; continue
l_27B4

; optimize FAIL ('FIGHT_DISPLAYSTATS', fight.pas), line = 43

	jsr FIGHT_DISPLAYSTATS

; optimize FAIL ('FIGHT_DRAWPLAYERS', fight.pas), line = 44

	jsr FIGHT_DRAWPLAYERS

; optimize OK (fight.pas), line = 45

	lda #$05
	jsr WAITFRAMES

; optimize OK (fight.pas), line = 47

	ldy FP_CURRENTSITE
	lda adr.FP_AI,y
	cmp #$01
	jne l_27D0
	jsr FIGHT_AIMOVE
	jmp l_27DB
l_27D0

; optimize FAIL ('FIGHT_PLAYERMOVE', fight.pas), line = 48

	jsr FIGHT_PLAYERMOVE
l_27DB

; optimize FAIL ('FIGHT_CHECKWINNER', fight.pas), line = 50

	jsr FIGHT_CHECKWINNER

; optimize OK (fight.pas), line = 51

	lda FP_WINNER
	cmp #$63
	jeq l_27EF
	jmp b_2781					; break
l_27EF

; --- ForToDoEpilog
c_2781
	inc I
	jne l_2781
l_278F
b_2781

; optimize OK (fight.pas), line = 53

	lda FP_WINNER
	cmp #$63
	jeq l_2809
	jmp b_2761					; break
l_2809

; --- ForToDoEpilog
	inc FP_CURRENTSITE
	jne l_2761
l_276F
b_2761

; optimize OK (fight.pas), line = 55

	lda FP_WINNER
	cmp #$63
	jeq l_2758

; optimize OK (fight.pas), line = 58

	lda #$00
	ldy #256-200
	sta:rne $F6F8+200-256,y+

; optimize FAIL ('B_CRT.CRT_WRITECENTERED_06F6', fight.pas), line = 59

	inx
	mva FIGHT_STRING_6 :STACKORIGIN,x
	mva FIGHT_STRING_6+1 :STACKORIGIN+STACKWIDTH,x
	inx
	mva #$15 :STACKORIGIN,x
	jsr B_CRT.CRT_WRITECENTERED_06F6

; optimize FAIL ('B_CRT.CRT_WRITECENTERED_06F6', fight.pas), line = 60

	inx
	lda FP_WINNER
	asl @
	tay
	lda adr.FP_GANG,y
	sta :STACKORIGIN,x
	lda adr.FP_GANG+1,y
	sta :STACKORIGIN+STACKWIDTH,x
	inx
	mva #$16 :STACKORIGIN,x
	jsr B_CRT.CRT_WRITECENTERED_06F6

; optimize FAIL ('B_CRT.CRT_READKEY', fight.pas), line = 61

	jsr B_CRT.CRT_READKEY

; optimize OK (fight.pas), line = 62

	lda FP_WINNER
	sta RESULT
@exit

; ------------------------------------------------------------

RESULT	= DATAORIGIN+$156D
I	= DATAORIGIN+$156E
C	= DATAORIGIN+$156F

@VarData	= I
@VarDataSize	= 2

	rts						; ret
.endl

.local	DOFIGHT						; FUNCTION

; optimize OK (fight.pas), line = 70

	lda #$01
	sta RESULT

; optimize OK (fight.pas), line = 73

	lda #$00
	sta J

l_2845
; --- ForToDoCondition
	ldy J
	cpy #$02
	jcs l_2853

; optimize OK (fight.pas), line = 74

	lda adr.FP_AI,y
	cmp #$01
	jne l_2868

; optimize OK (fight.pas), line = 76

	lda #$00
	sta K
	lda adr.FP_N,y
	sub #$01
	sta @FORTMP_2878_0

l_287B
; --- ForToDoCondition
	lda @FORTMP_2878_0::#$00
	cmp K
	jcc l_2889

; optimize OK (fight.pas), line = 77

	lda J
	asl @
	asl @
	asl @
	asl @
	add K
	tay
	lda #$1E
	sta adr.FP_STRENGTH,y

; optimize OK (fight.pas), line = 78

	lda J
	asl @
	asl @
	asl @
	asl @
	add K
	tay
	lda #$1E
	sta adr.FP_BRUTALITY,y

; --- ForToDoEpilog
	inc K
	jne l_287B
l_2889
l_2868

; --- ForToDoEpilog
	inc J
	jne l_2845
l_2853

; optimize OK (fight.pas), line = 83

	ldy CURRENTPLAYER
	lda adr.PLNGANGSTERS,y
	sta adr.FP_N

; optimize OK (fight.pas), line = 84

	tya
	asl @
	tay
	lda adr.PLGANG,y
	sta @move.src
	lda adr.PLGANG+1,y
	sta @move.src+1
	lda adr.FP_GANG
	sta @move.dst
	lda adr.FP_GANG+1
	sta @move.dst+1
	ldy #$00
	lda (@move.src),y
	add #1
	sta @move.cnt
	scc
	iny
	sty @move.cnt+1
	jsr @move

; optimize OK (fight.pas), line = 85

	lda #$00
	sta adr.FP_AI

; optimize OK (fight.pas), line = 87

	sta K

; optimize OK (fight.pas), line = 88

	sta J

l_28DC
; --- ForToDoCondition
	ldy J
	cpy #$20
	jcs l_28EA

; optimize OK (fight.pas), line = 90

	lda adr.PLGANGSTERS,y
	cmp CURRENTPLAYER
	jne l_2901

; optimize OK (fight.pas), line = 92

	lda J
	asl @
	tay
	lda adr.GANGSTERNAMES,y
	sta @move.src
	lda adr.GANGSTERNAMES+1,y
	sta @move.src+1
	lda K
	asl @
	tay
	lda adr.FP_NAME,y
	sta @move.dst
	lda adr.FP_NAME+1,y
	sta @move.dst+1
	ldy #$00
	lda (@move.src),y
	add #1
	sta @move.cnt
	scc
	iny
	sty @move.cnt+1
	jsr @move

; optimize OK (fight.pas), line = 93

	ldy J
	lda adr.GANGSTERHEALTH,y
	ldy K
	sta adr.FP_ENERGY,y

; optimize OK (fight.pas), line = 94

	ldy J
	lda adr.GANGSTERWEAPON,y
	ldy K
	sta adr.FP_WEAPON,y

; optimize OK (fight.pas), line = 95

	ldy J
	lda adr.GANGSTERSTR,y
	ldy K
	sta adr.FP_STRENGTH,y

; optimize OK (fight.pas), line = 96

	ldy J
	lda adr.GANGSTERBRUT,y
	ldy K
	sta adr.FP_BRUTALITY,y

; optimize OK (fight.pas), line = 97

	ldy J
	lda adr.GANGSTERSEX,y
	ldy K
	sta adr.FP_SEX,y

; optimize OK (fight.pas), line = 98

	inc K
l_2901

; --- ForToDoEpilog
	inc J
	jne l_28DC
l_28EA

; optimize OK (fight.pas), line = 103

	lda #$01
	sta adr.FP_AI+$01

; optimize FAIL ('SETUPFIGHTARENA', fight.pas), line = 104

	jsr SETUPFIGHTARENA
	lda SETUPFIGHTARENA.RESULT
	sta W

; optimize OK (fight.pas), line = 107

	lda #$00
	sta K

; optimize OK (fight.pas), line = 108

	sta J

l_2970
; --- ForToDoCondition
	ldy J
	cpy #$20
	jcs l_297E

; optimize OK (fight.pas), line = 110

	lda adr.PLGANGSTERS,y
	cmp CURRENTPLAYER
	jne l_2995

; optimize OK (fight.pas), line = 112

	ldy K
	lda adr.FP_ENERGY,y
	ldy J
	sta adr.GANGSTERHEALTH,y

; optimize OK (fight.pas), line = 114

	cmp #$05
	jcs l_29B7
	lda #$05
	sta adr.GANGSTERHEALTH,y
l_29B7

; optimize OK (fight.pas), line = 115

	inc K
l_2995

; --- ForToDoEpilog
	inc J
	jne l_2970
l_297E

; optimize OK (fight.pas), line = 119

	lda W
	sta RESULT

; optimize FAIL ('ENABLEMAPCONSOLE', fight.pas), line = 121

	jsr ENABLEMAPCONSOLE
@exit

; ------------------------------------------------------------

RESULT	= DATAORIGIN+$1571
J	= DATAORIGIN+$1572
K	= DATAORIGIN+$1573
W	= DATAORIGIN+$1574

@VarData	= J
@VarDataSize	= 3

	rts						; ret
.endl

.local	FIGHTPOLICE					; FUNCTION

; optimize FAIL ('B_CRT.CRT_NEWLINE_06EB', helpersFight.pas), line = 4

	jsr B_CRT.CRT_NEWLINE_06EB

; optimize FAIL ('B_CRT.CRT_WRITE_053A', helpersFight.pas), line = 5

	inx
	mva POLICE_STRING_1 :STACKORIGIN,x
	mva POLICE_STRING_1+1 :STACKORIGIN+STACKWIDTH,x
	jsr B_CRT.CRT_WRITE_053A

; optimize FAIL ('WAITFORKEY', helpersFight.pas), line = 6

	jsr WAITFORKEY

; optimize FAIL ('PREPAREFIGHTAGAINSTPOLICE', helpersFight.pas), line = 7

	jsr PREPAREFIGHTAGAINSTPOLICE

; optimize FAIL ('DOFIGHT', helpersFight.pas), line = 8

	jsr DOFIGHT
	lda DOFIGHT.RESULT
	cmp #$01
	jne l_29F3

; optimize FAIL ('GOTCAUGHT', helpersFight.pas), line = 10

	jsr GOTCAUGHT

; optimize OK (helpersFight.pas), line = 11

	lda #$11
	sta RESULT
	jmp @exit
l_29F3
@exit

; ------------------------------------------------------------

RESULT	= DATAORIGIN+$1576
	rts						; ret
.endl

.local	INCREASECURRENTGANGSTER				; PROCEDURE

; optimize OK (armsdealer.pas), line = 4

	ldy CURRENTGANGSTER
	lda adr.GANGSTERSTR,y
	add INC_ST
	sta adr.GANGSTERSTR,y

; optimize OK (armsdealer.pas), line = 5

	cmp #$64
	jcc l_2A26

; optimize OK (armsdealer.pas), line = 6

	lda #$63
	sta adr.GANGSTERSTR,y
l_2A26

; optimize OK (armsdealer.pas), line = 8

	ldy CURRENTGANGSTER
	lda adr.GANGSTERINT,y
	add INC_IN
	sta adr.GANGSTERINT,y

; optimize OK (armsdealer.pas), line = 9

	cmp #$64
	jcc l_2A57

; optimize OK (armsdealer.pas), line = 10

	lda #$63
	sta adr.GANGSTERINT,y
l_2A57

; optimize OK (armsdealer.pas), line = 12

	ldy CURRENTGANGSTER
	lda adr.GANGSTERBRUT,y
	add INC_BT
	sta adr.GANGSTERBRUT,y

; optimize OK (armsdealer.pas), line = 13

	cmp #$64
	jcc l_2A88

; optimize OK (armsdealer.pas), line = 14

	lda #$63
	sta adr.GANGSTERBRUT,y
l_2A88

; optimize FAIL ('CRT_WRITELN', armsdealer.pas), line = 17

	inx
	mva LOC_STRING_19 :STACKORIGIN,x
	mva LOC_STRING_19+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN

; optimize FAIL ('CRT_WRITELN', armsdealer.pas), line = 18

	inx
	mva LOC_STRING_20 :STACKORIGIN,x
	mva LOC_STRING_20+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN

; ------------------------------------------------------------

INC_ST	= DATAORIGIN+$1578
INC_IN	= DATAORIGIN+$1579
INC_BT	= DATAORIGIN+$157A

@VarData	= INC_ST
@VarDataSize	= 3

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	ARMSDEALERCHOICES				; FUNCTION

; optimize OK (armsdealer.pas), line = 35

	mvy CHOICE+1 :bp+1
	ldy CHOICE
	lda (:bp),y
	cmp #$01
	jne l_2AAE

; optimize FAIL ('SHOWLOCATIONHEADER', armsdealer.pas), line = 37

	jsr SHOWLOCATIONHEADER

; optimize FAIL ('CRT_WRITELN2', armsdealer.pas), line = 39

	inx
	mva LOC_STRING_1 :STACKORIGIN,x
	mva LOC_STRING_1+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN2

; optimize OK (armsdealer.pas), line = 40

	lda #$01
	sta MINWEAPON

; optimize OK (armsdealer.pas), line = 41

	lda #$05
	sta MAXWEAPON

; optimize OK (armsdealer.pas), line = 42

	lda CURRENTSUBLOCATION
	cmp #$02
	jne l_2ACD

; optimize OK (armsdealer.pas), line = 45

	lda #$07
	sta MAXWEAPON

; optimize FAIL (1, armsdealer.pas), line = 46

	inx
	ldy CURRENTPLAYER
	lda adr.PLRANK,y
	ldy #1
	cmp #$06
	bcs @+
	dey
@
	sty :STACKORIGIN,x
	lda #$04
	jsr SYSTEM.RANDOM_02E9
	dex
	ldy #1
	lda SYSTEM.RANDOM_02E9.RESULT
	beq @+
	dey
@
	tya
	and :STACKORIGIN+1,x
	jeq l_2AF2

; optimize FAIL ('CRT_WRITELN', armsdealer.pas), line = 48

	inx
	mva LOC_STRING_2 :STACKORIGIN,x
	mva LOC_STRING_2+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN

; optimize FAIL ('CRT_WRITELN', armsdealer.pas), line = 49

	inx
	mva LOC_STRING_3 :STACKORIGIN,x
	mva LOC_STRING_3+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN

; optimize FAIL ('B_CRT.CRT_NEWLINE_06EB', armsdealer.pas), line = 50

	jsr B_CRT.CRT_NEWLINE_06EB

; optimize OK (armsdealer.pas), line = 51

	lda #$08
	sta MAXWEAPON
l_2AF2

; optimize OK (armsdealer.pas), line = 53

	lda #$03
	sta MINWEAPON
l_2ACD

; optimize OK (armsdealer.pas), line = 56

	lda CURRENTSUBLOCATION
	cmp #$01
	jne l_2B18
	lda #$05
	sta MAXWEAPON
l_2B18

; optimize OK (armsdealer.pas), line = 57

	lda CURRENTSUBLOCATION
	cmp #$04
	jne l_2B31

; optimize OK (armsdealer.pas), line = 59

	lda #$02
	sta MINWEAPON

; optimize OK (armsdealer.pas), line = 60

	lda #$06
	sta MAXWEAPON
l_2B31

; optimize OK (armsdealer.pas), line = 64

	lda MINWEAPON
	sta R

l_2B49
; --- ForToDoCondition
	lda R
	cmp MAXWEAPON
	scc
	jne l_2B57

; optimize FAIL ('B_CRT.CRT_WRITE_053A', armsdealer.pas), line = 66

	inx
	mva #$76 :STACKORIGIN,x
	mva #$0D :STACKORIGIN+STACKWIDTH,x
	jsr B_CRT.CRT_WRITE_053A

; optimize OK (armsdealer.pas), line = 67

	lda R
	jsr B_CRT.CRT_WRITE_055B

; optimize FAIL ('B_CRT.CRT_WRITE_053A', armsdealer.pas), line = 68

	inx
	mva #$A1 :STACKORIGIN,x
	mva #$0D :STACKORIGIN+STACKWIDTH,x
	jsr B_CRT.CRT_WRITE_053A

; optimize FAIL ('B_CRT.CRT_WRITE_053A', armsdealer.pas), line = 69

	inx
	lda R
	asl @
	tay
	lda adr.WEAPONNAMES,y
	sta :STACKORIGIN,x
	lda adr.WEAPONNAMES+1,y
	sta :STACKORIGIN+STACKWIDTH,x
	jsr B_CRT.CRT_WRITE_053A

; optimize FAIL ('B_CRT.CRT_WRITE_053A', armsdealer.pas), line = 70

	inx
	mva #$F8 :STACKORIGIN,x
	mva #$0D :STACKORIGIN+STACKWIDTH,x
	jsr B_CRT.CRT_WRITE_053A

; optimize OK (armsdealer.pas), line = 71

	lda R
	asl @
	tay
	lda adr.WEAPONPRICES,y
	sta B_CRT.CRT_WRITE_0565.NUM
	lda adr.WEAPONPRICES+1,y
	sta B_CRT.CRT_WRITE_0565.NUM+1
	jsr B_CRT.CRT_WRITE_0565

; optimize FAIL ('B_CRT.CRT_NEWLINE_06EB', armsdealer.pas), line = 72

	jsr B_CRT.CRT_NEWLINE_06EB

; --- ForToDoEpilog
	inc R
	jne l_2B49
l_2B57

; optimize FAIL ('B_CRT.CRT_NEWLINE_06EB', armsdealer.pas), line = 74

	jsr B_CRT.CRT_NEWLINE_06EB

; optimize FAIL ('B_CRT.CRT_WRITE_053A', armsdealer.pas), line = 75

	inx
	mva LOC_STRING_4 :STACKORIGIN,x
	mva LOC_STRING_4+1 :STACKORIGIN+STACKWIDTH,x
	jsr B_CRT.CRT_WRITE_053A

; optimize OK (armsdealer.pas), line = 76

	lda MINWEAPON
	sta READVALUE.MINVALUE
	lda #$00
	sta READVALUE.MINVALUE+1
	lda MAXWEAPON
	sta READVALUE.MAXVALUE
	lda #$00
	sta READVALUE.MAXVALUE+1
	jsr READVALUE
	lda READVALUE.RESULT
	sta SELECTEDWEAPON

; optimize OK (armsdealer.pas), line = 77

	jne l_2B93
	jmp @exit
l_2B93

; optimize FAIL ('SHOWLOCATIONHEADER', armsdealer.pas), line = 81

	jsr SHOWLOCATIONHEADER

; optimize FAIL ('SELECTGANGSTER', armsdealer.pas), line = 82

	jsr SELECTGANGSTER

; optimize OK (armsdealer.pas), line = 83

	lda CURRENTGANGSTER
	cmp #$63
	jne l_2BAA
	jmp @exit
l_2BAA

; optimize OK (armsdealer.pas), line = 85

	lda #$00
	sta GA

; optimize OK (armsdealer.pas), line = 86

	ldy CURRENTGANGSTER
	lda adr.GANGSTERINT,y
	cmp #$28
	jcs l_2BD2
	lda SELECTEDWEAPON
	cmp #$06
	jcc l_2BD2

; optimize FAIL ('CRT_WRITELN', armsdealer.pas), line = 88

	inx
	mva LOC_STRING_5 :STACKORIGIN,x
	mva LOC_STRING_5+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN

; optimize FAIL ('WAITFORKEY', armsdealer.pas), line = 89

	jsr WAITFORKEY

; optimize OK (armsdealer.pas), line = 90
	jmp l_2BE4
l_2BD2

; optimize OK (armsdealer.pas), line = 92

	ldy CURRENTGANGSTER
	lda adr.GANGSTERSTR,y
	ldy #1
	cmp #$14
	bcc @+
	dey
@
	sty :STACKORIGIN+9
	ldy #1
	lda SELECTEDWEAPON
	cmp #$02
	beq @+
	dey
@
	sty :STACKORIGIN+10
	ldy #1
	lda SELECTEDWEAPON
	cmp #$03
	beq @+
	dey
@
	tya
	ora :STACKORIGIN+10
	and :STACKORIGIN+9
	jeq l_2C11

; optimize FAIL ('B_CRT.CRT_WRITE_053A', armsdealer.pas), line = 94

	inx
	mva LOC_STRING_6 :STACKORIGIN,x
	mva LOC_STRING_6+1 :STACKORIGIN+STACKWIDTH,x
	jsr B_CRT.CRT_WRITE_053A

; optimize FAIL ('WAITFORKEY', armsdealer.pas), line = 95

	jsr WAITFORKEY

; optimize OK (armsdealer.pas), line = 96
	jmp l_2C23
l_2C11

; optimize OK (armsdealer.pas), line = 98

	ldy CURRENTGANGSTER
	lda adr.GANGSTERBRUT,y
	ldy #1
	cmp #$28
	bcc @+
	dey
@
	sty :STACKORIGIN+9
	ldy #1
	lda SELECTEDWEAPON
	cmp #$03
	beq @+
	dey
@
	sty :STACKORIGIN+10
	ldy #1
	lda SELECTEDWEAPON
	cmp #$07
	bcs @+
	dey
@
	tya
	ora :STACKORIGIN+10
	and :STACKORIGIN+9
	jeq l_2C50

; optimize FAIL ('B_CRT.CRT_WRITE_053A', armsdealer.pas), line = 100

	inx
	mva LOC_STRING_7 :STACKORIGIN,x
	mva LOC_STRING_7+1 :STACKORIGIN+STACKWIDTH,x
	jsr B_CRT.CRT_WRITE_053A

; optimize FAIL ('WAITFORKEY', armsdealer.pas), line = 101

	jsr WAITFORKEY

; optimize OK (armsdealer.pas), line = 102
l_2BE4
l_2C23

	lda #$FF
	sta GA
l_2C50

; optimize OK (armsdealer.pas), line = 104

	lda GA
	jpl l_2C6D
	jmp @exit
l_2C6D

; optimize OK (armsdealer.pas), line = 107

	lda SELECTEDWEAPON
	asl @
	tay
	lda adr.WEAPONPRICES,y
	sta PAYMONEY.PRICE
	lda adr.WEAPONPRICES+1,y
	sta PAYMONEY.PRICE+1
	jsr PAYMONEY
	lda PAYMONEY.RESULT
	jne l_2C85
	jmp @exit
l_2C85

; optimize OK (armsdealer.pas), line = 109

	ldy CURRENTGANGSTER
	lda adr.GANGSTERWEAPON,y
	sta GA

; optimize OK (armsdealer.pas), line = 110

	jeq l_2CA3

; optimize FAIL (1, armsdealer.pas), line = 112

	inx
	lda GA
	asl @
	tay
	lda adr.WEAPONPRICES,y
	sta :STACKORIGIN,x
	lda adr.WEAPONPRICES+1,y
	sta :STACKORIGIN+STACKWIDTH,x
	inx
	mva #$02 :STACKORIGIN,x
	jsr shrAX_CL.WORD
	dex
	lda #$F4
	sta SYSTEM.RANDOM_02EA.RANGE
	lda #$01
	sta SYSTEM.RANDOM_02EA.RANGE+1
	jsr SYSTEM.RANDOM_02EA
	lda :STACKORIGIN,x
	add SYSTEM.RANDOM_02EA.RESULT
	sta OLDWEAPONPRICE
	lda :STACKORIGIN+STACKWIDTH,x
	adc SYSTEM.RANDOM_02EA.RESULT+1
	sta OLDWEAPONPRICE+1
	dex

; optimize FAIL ('B_CRT.CRT_NEWLINE_06EB', armsdealer.pas), line = 113

	jsr B_CRT.CRT_NEWLINE_06EB

; optimize FAIL ('B_CRT.CRT_WRITE_053A', armsdealer.pas), line = 114

	inx
	mva LOC_STRING_8 :STACKORIGIN,x
	mva LOC_STRING_8+1 :STACKORIGIN+STACKWIDTH,x
	jsr B_CRT.CRT_WRITE_053A

; optimize OK (armsdealer.pas), line = 115

	lda OLDWEAPONPRICE
	sta B_CRT.CRT_WRITE_0565.NUM
	lda OLDWEAPONPRICE+1
	sta B_CRT.CRT_WRITE_0565.NUM+1
	jsr B_CRT.CRT_WRITE_0565

; optimize FAIL ('B_CRT.CRT_WRITE_053A', armsdealer.pas), line = 116

	inx
	mva #$FC :STACKORIGIN,x
	mva #$0D :STACKORIGIN+STACKWIDTH,x
	jsr B_CRT.CRT_WRITE_053A

; optimize FAIL ('CRT_WRITELN', armsdealer.pas), line = 117

	inx
	mva LOC_STRING_9 :STACKORIGIN,x
	mva LOC_STRING_9+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN

; optimize FAIL ('B_CRT.CRT_WRITE_053A', armsdealer.pas), line = 118

	inx
	mva LOC_STRING_10 :STACKORIGIN,x
	mva LOC_STRING_10+1 :STACKORIGIN+STACKWIDTH,x
	jsr B_CRT.CRT_WRITE_053A

; optimize FAIL ('B_CRT.CRT_WRITE_053A', armsdealer.pas), line = 119

	inx
	lda GA
	asl @
	tay
	lda adr.WEAPONNAMES,y
	sta :STACKORIGIN,x
	lda adr.WEAPONNAMES+1,y
	sta :STACKORIGIN+STACKWIDTH,x
	jsr B_CRT.CRT_WRITE_053A

; optimize FAIL ('CRT_WRITELN', armsdealer.pas), line = 120

	inx
	mva #$00 :STACKORIGIN,x
	mva #$0E :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN

; optimize FAIL ('CRT_WRITELN', armsdealer.pas), line = 121

	inx
	mva LOC_STRING_11 :STACKORIGIN,x
	mva LOC_STRING_11+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN

; optimize FAIL ('GETYESNO', armsdealer.pas), line = 123

	jsr GETYESNO
	lda GETYESNO.RESULT
	sta R

; optimize OK (armsdealer.pas), line = 124

	jne l_2CE5

; optimize OK (armsdealer.pas), line = 127

	lda SELECTEDWEAPON
	asl @
	tay
	lda adr.WEAPONPRICES,y
	sta ADDMONEY.AMOUNT
	lda adr.WEAPONPRICES+1,y
	sta ADDMONEY.AMOUNT+1
	jsr ADDMONEY

; optimize FAIL ('B_CRT.CRT_WRITE_053A', armsdealer.pas), line = 128

	inx
	mva LOC_STRING_22 :STACKORIGIN,x
	mva LOC_STRING_22+1 :STACKORIGIN+STACKWIDTH,x
	jsr B_CRT.CRT_WRITE_053A

; optimize FAIL ('WAITFORKEY', armsdealer.pas), line = 129

	jsr WAITFORKEY
	jmp @exit
l_2CE5
l_2CA3

; optimize OK (armsdealer.pas), line = 136

	ldy CURRENTGANGSTER
	lda adr.GANGSTERWEAPON,y
	cmp SELECTEDWEAPON
	jcs l_2D0B

; optimize OK (armsdealer.pas), line = 137

	ldy CURRENTPLAYER
	lda adr.PLNEWPOINTS,y
	add #$02
	jmp l_2D25
l_2D0B

; optimize OK (armsdealer.pas), line = 139

	ldy CURRENTPLAYER
	lda adr.PLNEWPOINTS,y
	sub #$02
l_2D25
	sta adr.PLNEWPOINTS,y

; optimize OK (armsdealer.pas), line = 141

	lda OLDWEAPONPRICE
	sta ADDMONEY.AMOUNT
	lda OLDWEAPONPRICE+1
	sta ADDMONEY.AMOUNT+1
	jsr ADDMONEY

; optimize OK (armsdealer.pas), line = 142

	ldy CURRENTGANGSTER
	lda SELECTEDWEAPON
	sta adr.GANGSTERWEAPON,y

; optimize FAIL ('B_CRT.CRT_NEWLINE_06EB', armsdealer.pas), line = 143

	jsr B_CRT.CRT_NEWLINE_06EB

; optimize FAIL ('B_CRT.CRT_WRITE_053A', armsdealer.pas), line = 144

	inx
	mva LOC_STRING_12 :STACKORIGIN,x
	mva LOC_STRING_12+1 :STACKORIGIN+STACKWIDTH,x
	jsr B_CRT.CRT_WRITE_053A

; optimize FAIL ('WAITFORKEY', armsdealer.pas), line = 145

	jsr WAITFORKEY
l_2AAE

; optimize OK (armsdealer.pas), line = 149

	mvy CHOICE+1 :bp+1
	ldy CHOICE
	lda (:bp),y
	cmp #$02
	jne l_2D5A

; optimize FAIL ('SHOWLOCATIONHEADER', armsdealer.pas), line = 151

	jsr SHOWLOCATIONHEADER

; optimize OK (armsdealer.pas), line = 153

	ldy CURRENTPLAYER
	lda adr.PLNGANGSTERS,y
	cmp #$02
	jcc l_2D71

; optimize FAIL ('CRT_WRITELN', armsdealer.pas), line = 155

	inx
	mva LOC_STRING_13 :STACKORIGIN,x
	mva LOC_STRING_13+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN

; optimize FAIL ('SELECTGANGSTER', armsdealer.pas), line = 156

	jsr SELECTGANGSTER

; optimize OK (armsdealer.pas), line = 157

	lda CURRENTGANGSTER
	cmp #$63
	jne l_2D88
	jmp @exit
l_2D88
l_2D71

; optimize OK (armsdealer.pas), line = 160

	lda #$00
	sta CAMP

; optimize OK (armsdealer.pas), line = 162

	ldy CURRENTPLAYER
	lda adr.PLRANK,y
	cmp #$05
	jcc l_2DA6

; optimize FAIL ('CRT_WRITELN', armsdealer.pas), line = 164

	inx
	mva LOC_STRING_14 :STACKORIGIN,x
	mva LOC_STRING_14+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN

; optimize FAIL ('B_CRT.CRT_WRITE_053A', armsdealer.pas), line = 165

	inx
	mva LOC_STRING_21 :STACKORIGIN,x
	mva LOC_STRING_21+1 :STACKORIGIN+STACKWIDTH,x
	jsr B_CRT.CRT_WRITE_053A

; optimize OK (armsdealer.pas), line = 166

	lda #$3E
	sta GETANSWER.A
	lda #$2D
	sta GETANSWER.B
	jsr GETANSWER
	lda GETANSWER.RESULT
	sta R

; optimize OK (armsdealer.pas), line = 167

	cmp #$01
	jne l_2DC5
	lda #$01
	sta CAMP
l_2DC5
l_2DA6

; optimize OK (armsdealer.pas), line = 171

	lda CAMP
	jne l_2DE0

; optimize OK (armsdealer.pas), line = 172

	ldy CURRENTPLAYER
	lda adr.PLRANK,y
	sta :ecx
	lda #$C8
	sta :eax
	.ifdef fmulinit
	fmulu_8
	els
	imulCL
	eif
	lda #$20
	add :eax
	sta PRICE
	lda #$03
	jmp l_2DFB
l_2DE0

; optimize OK (armsdealer.pas), line = 174

	ldy CURRENTPLAYER
	lda adr.PLRANK,y
	sta :eax
	lda #$00
	sta :eax+1
	lda #$F4
	sta :ecx
	lda #$01
	sta :ecx+1
	.ifdef fmulinit
	fmulu_16
	els
	imulCX_AL
	eif
	lda #$C4
	add :eax
	sta PRICE
	lda #$09
l_2DFB
	adc :eax+1
	sta PRICE+1

; optimize FAIL ('B_CRT.CRT_NEWLINE_06EB', armsdealer.pas), line = 176

	jsr B_CRT.CRT_NEWLINE_06EB

; optimize FAIL ('B_CRT.CRT_WRITE_053A', armsdealer.pas), line = 177

	inx
	mva LOC_STRING_15 :STACKORIGIN,x
	mva LOC_STRING_15+1 :STACKORIGIN+STACKWIDTH,x
	jsr B_CRT.CRT_WRITE_053A

; optimize OK (armsdealer.pas), line = 178

	lda PRICE
	sta B_CRT.CRT_WRITE_0565.NUM
	lda PRICE+1
	sta B_CRT.CRT_WRITE_0565.NUM+1
	jsr B_CRT.CRT_WRITE_0565

; optimize FAIL ('B_CRT.CRT_WRITE_053A', armsdealer.pas), line = 179

	inx
	mva LOC_STRING_16 :STACKORIGIN,x
	mva LOC_STRING_16+1 :STACKORIGIN+STACKWIDTH,x
	jsr B_CRT.CRT_WRITE_053A

; optimize FAIL ('GETYESNO', armsdealer.pas), line = 180

	jsr GETYESNO
	lda GETYESNO.RESULT
	sta GA

; optimize OK (armsdealer.pas), line = 181

	jne l_2E2C
	jmp @exit
l_2E2C

; optimize OK (armsdealer.pas), line = 182

	lda PRICE
	sta PAYMONEY.PRICE
	lda PRICE+1
	sta PAYMONEY.PRICE+1
	jsr PAYMONEY
	lda PAYMONEY.RESULT
	jne l_2E41
	jmp @exit
l_2E41

; optimize FAIL ('B_CRT.CRT_NEWLINE_06EB', armsdealer.pas), line = 184

	jsr B_CRT.CRT_NEWLINE_06EB

; optimize FAIL ('B_CRT.CRT_NEWLINE_06EB', armsdealer.pas), line = 185

	jsr B_CRT.CRT_NEWLINE_06EB

; optimize FAIL ('B_CRT.CRT_WRITE_053A', armsdealer.pas), line = 186

	inx
	lda CURRENTGANGSTER
	asl @
	tay
	lda adr.GANGSTERNAMES,y
	sta :STACKORIGIN,x
	lda adr.GANGSTERNAMES+1,y
	sta :STACKORIGIN+STACKWIDTH,x
	jsr B_CRT.CRT_WRITE_053A

; optimize OK (armsdealer.pas), line = 187

	lda CAMP
	jne l_2E5E

; optimize FAIL ('B_CRT.CRT_WRITE_053A', armsdealer.pas), line = 189

	inx
	mva LOC_STRING_17 :STACKORIGIN,x
	mva LOC_STRING_17+1 :STACKORIGIN+STACKWIDTH,x
	jsr B_CRT.CRT_WRITE_053A

; optimize OK (armsdealer.pas), line = 190

	lda #$05
	sta INC_ST

; optimize OK (armsdealer.pas), line = 191

	ldy #1
	lda CURRENTSUBLOCATION
	cmp #$01
	beq @+
	dey
@
	tya
	asl @
	add #$03
	sta INC_IN

; optimize OK (armsdealer.pas), line = 192

	ldy #1
	lda CURRENTSUBLOCATION
	cmp #$03
	beq @+
	dey
@
	tya
	sta :STACKORIGIN+10
	asl @
	add :STACKORIGIN+10
	add #$02
	sta INC_BT

; optimize OK (armsdealer.pas), line = 193

	ldy CURRENTPLAYER
	lda adr.PLNEWPOINTS,y
	add #$01
	sta adr.PLNEWPOINTS,y
	jmp l_2EA7
l_2E5E

; optimize FAIL ('B_CRT.CRT_WRITE_053A', armsdealer.pas), line = 198

	inx
	mva LOC_STRING_18 :STACKORIGIN,x
	mva LOC_STRING_18+1 :STACKORIGIN+STACKWIDTH,x
	jsr B_CRT.CRT_WRITE_053A

; optimize OK (armsdealer.pas), line = 199

	lda #$08
	jsr SYSTEM.RANDOM_02E9
	lda SYSTEM.RANDOM_02E9.RESULT
	add #$08
	sta INC_ST

; optimize OK (armsdealer.pas), line = 200

	lda #$08
	jsr SYSTEM.RANDOM_02E9
	lda SYSTEM.RANDOM_02E9.RESULT
	add #$08
	sta INC_IN

; optimize OK (armsdealer.pas), line = 201

	lda #$08
	jsr SYSTEM.RANDOM_02E9
	lda SYSTEM.RANDOM_02E9.RESULT
	add #$08
	sta INC_BT
l_2EA7

; optimize FAIL ('EFFECTWAIT', armsdealer.pas), line = 204

	jsr EFFECTWAIT

; optimize FAIL ('B_CRT.CRT_NEWLINE_06EB', armsdealer.pas), line = 206

	jsr B_CRT.CRT_NEWLINE_06EB

; optimize FAIL ('B_CRT.CRT_NEWLINE_06EB', armsdealer.pas), line = 207

	jsr B_CRT.CRT_NEWLINE_06EB

; optimize OK (armsdealer.pas), line = 208

	lda INC_ST
	sta INCREASECURRENTGANGSTER.INC_ST
	lda INC_IN
	sta INCREASECURRENTGANGSTER.INC_IN
	lda INC_BT
	sta INCREASECURRENTGANGSTER.INC_BT
	jsr INCREASECURRENTGANGSTER

; optimize OK (armsdealer.pas), line = 209

	ldy CURRENTPLAYER
	lda adr.PLNEWPOINTS,y
	add #$01
	sta adr.PLNEWPOINTS,y

; optimize FAIL ('B_CRT.CRT_READKEY', armsdealer.pas), line = 211

	jsr B_CRT.CRT_READKEY
l_2D5A
@exit

; ------------------------------------------------------------

CHOICE	= DATAORIGIN+$157B
RESULT	= DATAORIGIN+$157D
R	= DATAORIGIN+$157E
MAXWEAPON	= DATAORIGIN+$157F
MINWEAPON	= DATAORIGIN+$1580
SELECTEDWEAPON	= DATAORIGIN+$1581
GA	= DATAORIGIN+$1582
PRICE	= DATAORIGIN+$1583
INC_IN	= DATAORIGIN+$1585
INC_BT	= DATAORIGIN+$1586
INC_ST	= DATAORIGIN+$1587
OLDWEAPONPRICE	= DATAORIGIN+$1588
CAMP	= DATAORIGIN+$158A

@VarData	= CHOICE
@VarDataSize	= 15

	rts						; ret
.endl

.local	BANKCHOICES					; FUNCTION

; optimize OK (bank.pas), line = 19

	lda #$01
	sta RESULT

; optimize OK (bank.pas), line = 20

	jsr LOADLOCATION

; optimize FAIL ('SHOWLOCATIONHEADER', bank.pas), line = 21

	jsr SHOWLOCATIONHEADER

; optimize OK (bank.pas), line = 23

	ldy CURRENTPLAYER
	lda adr.PLRANK,y
	cmp #$03
	jcs l_2F05

; optimize FAIL ('B_CRT.CRT_WRITE_053A', bank.pas), line = 25

	inx
	mva LOC_STRING_13 :STACKORIGIN,x
	mva LOC_STRING_13+1 :STACKORIGIN+STACKWIDTH,x
	jsr B_CRT.CRT_WRITE_053A

; optimize FAIL ('WAITFORKEY', bank.pas), line = 26

	jsr WAITFORKEY
	jmp @exit
l_2F05

; optimize OK (bank.pas), line = 33

	lda LASTLOCATION
	cmp #$01
	jne l_2F1E

; optimize FAIL ('PREPAREFIGHTAGAINSTPOLICE', bank.pas), line = 35

	jsr PREPAREFIGHTAGAINSTPOLICE

; optimize FAIL ('DOFIGHT', bank.pas), line = 36

	jsr DOFIGHT
	lda DOFIGHT.RESULT
	cmp #$01
	jne l_2F30

; optimize FAIL ('GOTCAUGHT', bank.pas), line = 38

	jsr GOTCAUGHT

; optimize OK (bank.pas), line = 39

	lda #$11
	sta RESULT
	jmp @exit
l_2F30
	jmp @exit
l_2F1E

; optimize OK (bank.pas), line = 45

	ldy CURRENTPLAYER
	lda adr.PLNGANGSTERS,y
	cmp #$02
	jcs l_2F4F

; optimize FAIL ('B_CRT.CRT_WRITECENTERED_06F6', bank.pas), line = 47

	inx
	mva LOC_STRING_1 :STACKORIGIN,x
	mva LOC_STRING_1+1 :STACKORIGIN+STACKWIDTH,x
	inx
	mva #$06 :STACKORIGIN,x
	jsr B_CRT.CRT_WRITECENTERED_06F6

; optimize FAIL ('WAITFORKEY', bank.pas), line = 48

	jsr WAITFORKEY

; optimize OK (bank.pas), line = 49

	lda #$0F
	sta LASTLOCATION
	jmp @exit
l_2F4F

; optimize OK (bank.pas), line = 54

	mvy CHOICE+1 :bp+1
	ldy CHOICE
	lda (:bp),y
	cmp #$01
	jne l_2F6D

; optimize OK (bank.pas), line = 56

	lda #$03
	jsr SYSTEM.RANDOM_02E9
	lda SYSTEM.RANDOM_02E9.RESULT
	jne l_2F7F

; optimize FAIL ('CRT_WRITELN', bank.pas), line = 58

	inx
	mva LOC_STRING_2 :STACKORIGIN,x
	mva LOC_STRING_2+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN

; optimize FAIL ('CRT_WRITELN', bank.pas), line = 59

	inx
	mva LOC_STRING_3 :STACKORIGIN,x
	mva LOC_STRING_3+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN

; optimize FAIL ('WAITFORKEY', bank.pas), line = 60

	jsr WAITFORKEY

; -------------------  ASM Block 00000164  -------------------

; 
                lda loc_string_4
                sta adr.FP_GANG+$02
                lda loc_string_4+1
                sta adr.FP_GANG+1+$02
            
; optimize OK (bank.pas), line = 71

	lda #$01
	sta adr.FP_AI+$01

; optimize OK (bank.pas), line = 72

	lda #$03
	sta adr.FP_N+$01

; optimize OK (bank.pas), line = 73

	lda CURRENTMAP
	cmp #$01
	jne l_2FA3

; optimize OK (bank.pas), line = 74

	inc adr.FP_N+$01
l_2FA3

; -------------------  ASM Block 00000165  -------------------

                ldy #$00
            @:
                tya 
                asl 
                tay

                lda loc_string_4
                sta adr.FP_NAME+$20,y
                lda loc_string_4+1
                sta adr.FP_NAME+1+$20,y

                tya
                lsr 
                tay

                lda #$1E
                sta adr.FP_ENERGY+$10,y
                lda #$06
                sta adr.FP_WEAPON+$10,y
                iny
                cpy adr.FP_N+$01
                bne @- 
            
; optimize FAIL ('DOFIGHT', bank.pas), line = 107

	jsr DOFIGHT
	lda DOFIGHT.RESULT
	cmp #$01
	jne l_2FC2

; optimize FAIL ('GOTCAUGHT', bank.pas), line = 109

	jsr GOTCAUGHT

; optimize OK (bank.pas), line = 110

	lda #$11
	sta RESULT
	jmp @exit
l_2FC2
l_2F7F

; optimize OK (bank.pas), line = 114

	lda #$01
	sta CRACKEDBANK.P
	lda #$00
	sta CRACKEDBANK.P+1
	jsr CRACKEDBANK
l_2F6D

; optimize OK (bank.pas), line = 118

	mvy CHOICE+1 :bp+1
	ldy CHOICE
	lda (:bp),y
	cmp #$02
	jne l_2FE2

; optimize FAIL ('SHOWLOCATIONHEADER', bank.pas), line = 120

	jsr SHOWLOCATIONHEADER

; optimize OK (bank.pas), line = 121

	lda CURRENTPLAYER
	asl @
	asl @
	asl @
	sta K

; optimize OK (bank.pas), line = 122

	tay
	lda adr.GANGSTERBRUT,y
	cmp #$14
	jcc l_3021x
	lda adr.GANGSTERSTR,y
	cmp #$0F
	jcc l_3021x
	lda adr.GANGSTERINT,y
	cmp #$28
	jcs l_3021
l_3021x

; optimize FAIL ('B_CRT.CRT_WRITECENTERED_06F6', bank.pas), line = 124

	inx
	mva LOC_STRING_5 :STACKORIGIN,x
	mva LOC_STRING_5+1 :STACKORIGIN+STACKWIDTH,x
	inx
	mva #$06 :STACKORIGIN,x
	jsr B_CRT.CRT_WRITECENTERED_06F6

; optimize FAIL ('WAITFORKEY', bank.pas), line = 125

	jsr WAITFORKEY
	jmp @exit
l_3021

; optimize FAIL ('CRT_WRITELN', bank.pas), line = 129

	inx
	mva LOC_STRING_6 :STACKORIGIN,x
	mva LOC_STRING_6+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN

; optimize FAIL ('SELECTGANGSTER', bank.pas), line = 130

	jsr SELECTGANGSTER

; optimize OK (bank.pas), line = 131

	lda CURRENTGANGSTER
	cmp #$63
	jne l_303F
	jmp @exit
l_303F

; optimize FAIL ('CRT_WRITELN', bank.pas), line = 133

	inx
	mva LOC_STRING_7 :STACKORIGIN,x
	mva LOC_STRING_7+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN

; optimize FAIL ('CRT_WRITELN', bank.pas), line = 134

	inx
	mva LOC_STRING_8 :STACKORIGIN,x
	mva LOC_STRING_8+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN

; optimize FAIL ('B_CRT.CRT_NEWLINE_06EB', bank.pas), line = 135

	jsr B_CRT.CRT_NEWLINE_06EB

; optimize OK (bank.pas), line = 138

	lda CURRENTPLAYER
	sta :STACKORIGIN+10
	lda #$00
	asl :STACKORIGIN+10
	rol @
	asl :STACKORIGIN+10
	rol @
	asl :STACKORIGIN+10
	rol @
	sta :STACKORIGIN+STACKWIDTH+10
	lda :STACKORIGIN+10
	add #$00
	tay
	lda :STACKORIGIN+STACKWIDTH+10
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+10
	lda adr.GANGSTERINT,y
	sta :STACKORIGIN+10
	lsr @
	lsr @
	lsr @
	lsr @
	add #$0A
	add CURRENTSUBLOCATION
	sta NATTEMPTS

; optimize OK (bank.pas), line = 139

	ldy CURRENTPLAYER
	lda adr.PLSTUFF,y
	ora #$20
	cmp #$01
	jne l_307D

; optimize OK (bank.pas), line = 141

	lda NATTEMPTS
	add #$09
	sta NATTEMPTS

; optimize OK (bank.pas), line = 142

	lda adr.PLSTUFF,y
	and #$DF
	sta adr.PLSTUFF,y
l_307D

; optimize FAIL ('WAITFORKEY', bank.pas), line = 145

	jsr WAITFORKEY

; optimize OK (bank.pas), line = 148

	lda #$00
	sta SYSTEM.FILLCHAR_02BB.A
	lda #$F4
	sta SYSTEM.FILLCHAR_02BB.A+1
	lda #$C0
	sta SYSTEM.FILLCHAR_02BB.COUNT
	lda #$03
	sta SYSTEM.FILLCHAR_02BB.COUNT+1
	lda #$00
	sta SYSTEM.FILLCHAR_02BB.VALUE
	.LOCAL +MAIN.SYSTEM.FILLCHAR_02BB
	m@INLINE
	.ENDL

; optimize FAIL ('ENABLEMAPCONSOLE', bank.pas), line = 149

	jsr ENABLEMAPCONSOLE

; optimize OK (bank.pas), line = 150

	lda SAFECLMFNAME
	sta XBAPLIB.XBUNAPL.FNAM
	lda SAFECLMFNAME+1
	sta XBAPLIB.XBUNAPL.FNAM+1
	lda #$00
	sta XBAPLIB.XBUNAPL.OUTPUTPOINTER
	lda #$F0
	sta XBAPLIB.XBUNAPL.OUTPUTPOINTER+1
	jsr XBAPLIB.XBUNAPL

; optimize OK (bank.pas), line = 151

	lda SAFECLMSNAME
	sta XBAPLIB.XBUNAPL.FNAM
	lda SAFECLMSNAME+1
	sta XBAPLIB.XBUNAPL.FNAM+1
	lda #$00
	sta XBAPLIB.XBUNAPL.OUTPUTPOINTER
	lda #$F4
	sta XBAPLIB.XBUNAPL.OUTPUTPOINTER+1
	jsr XBAPLIB.XBUNAPL

; optimize OK (bank.pas), line = 152

	lda #$00
	ldy #$4F
	sta:rpl $F6A8,y-

; optimize OK (bank.pas), line = 153

	lda #$01
	sta DIDFIGHT

; optimize FAIL (1, bank.pas), line = 154

	inx
	mva #$00 :STACKORIGIN,x
	sta :STACKORIGIN+STACKWIDTH,x
	lda #$0A
	jsr SYSTEM.RANDOM_02E9
	ldy :STACKORIGIN,x
	lda SYSTEM.RANDOM_02E9.RESULT
	sta adr.T,y

; optimize FAIL (1, bank.pas), line = 155

	mva #$01 :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	lda #$0A
	jsr SYSTEM.RANDOM_02E9
	ldy :STACKORIGIN,x
	lda SYSTEM.RANDOM_02E9.RESULT
	sta adr.T,y

; optimize FAIL (1, bank.pas), line = 156

	mva #$02 :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	lda #$0A
	jsr SYSTEM.RANDOM_02E9
	ldy :STACKORIGIN,x
	lda SYSTEM.RANDOM_02E9.RESULT
	sta adr.T,y

; optimize FAIL (1, bank.pas), line = 157

	mva #$00 :STACKORIGIN,x
	sta :STACKORIGIN+STACKWIDTH,x
	lda #$0A
	jsr SYSTEM.RANDOM_02E9
	ldy :STACKORIGIN,x
	lda SYSTEM.RANDOM_02E9.RESULT
	sta adr.C,y

; optimize FAIL (1, bank.pas), line = 158

	mva #$01 :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	lda #$0A
	jsr SYSTEM.RANDOM_02E9
	ldy :STACKORIGIN,x
	lda SYSTEM.RANDOM_02E9.RESULT
	sta adr.C,y

; optimize FAIL (1, bank.pas), line = 159

	mva #$02 :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	lda #$0A
	jsr SYSTEM.RANDOM_02E9
	ldy :STACKORIGIN,x
	lda SYSTEM.RANDOM_02E9.RESULT
	sta adr.C,y
	dex

; optimize OK (bank.pas), line = 161

	lda #$00
	sta SAFEOPEN

; optimize OK (bank.pas), line = 162

	sta WHPOS

; optimize OK (bank.pas), line = 163

	lda #$01
	sta BASE
	lda #$F5
	sta BASE+1

; --- RepeatUntilProlog
l_30E1

; optimize OK (bank.pas), line = 165

	lda WHPOS
	sta :STACKORIGIN+11
	lda #$00
	asl :STACKORIGIN+11
	rol @
	sta :STACKORIGIN+STACKWIDTH+11
	lda BASE
	add :STACKORIGIN+11
	tay
	lda BASE+1
	adc :STACKORIGIN+STACKWIDTH+11
	sta :bp+1
	lda #$6B
	sta (:bp),y

; optimize OK (bank.pas), line = 166

	lda WHPOS
	sta :STACKORIGIN+11
	lda #$00
	asl :STACKORIGIN+11
	rol @
	sta :STACKORIGIN+STACKWIDTH+11
	lda BASE
	add :STACKORIGIN+11
	tay
	lda BASE+1
	adc :STACKORIGIN+STACKWIDTH+11
	sta :bp+1
	tya
	add #$02
	tay
	scc
	inc :bp+1
	lda #$6C
	sta (:bp),y

; optimize OK (bank.pas), line = 167

	lda #$00
	sta K

l_310A
; --- ForToDoCondition
	ldy K
	cpy #$03
	jcs l_3118

; optimize OK (bank.pas), line = 168

	lda #$6D
	add adr.C,y
	sta :STACKORIGIN+9
	lda BASE
	add #$01
	sta :STACKORIGIN+10
	lda BASE+1
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+10
	lda :STACKORIGIN+10
	add K
	tay
	lda :STACKORIGIN+STACKWIDTH+10
	adc #$00
	sta :bp+1
	tya
	add K
	tay
	scc
	inc :bp+1
	lda :STACKORIGIN+9
	sta (:bp),y
	inc K
	jne l_310A
l_3118

; --- RepeatUntilProlog
l_313B

; optimize FAIL ('CHECKKEYANDSTICK', bank.pas), line = 170

	jsr CHECKKEYANDSTICK
	lda CHECKKEYANDSTICK.RESULT
	sta CH

; optimize OK (bank.pas), line = 171

	cmp #$26
	jeq l_313Bx
	cmp #$60
	jeq l_313Bx
	cmp #$73
	jeq l_313Bx
	cmp #$02
	jeq l_313Bx
	cmp #$2F
	jne l_313B
l_313Bx

; optimize FAIL ('WAITFORKEYRELEASE', bank.pas), line = 172

	jsr WAITFORKEYRELEASE

; optimize OK (bank.pas), line = 173

	lda #$05
	jsr WAITFRAMES

; optimize OK (bank.pas), line = 174

	lda CH
	sta @CASETMP_0011
	cmp #$26
	jne l_318A
@

; optimize OK (bank.pas), line = 175

	ldy WHPOS
	lda adr.C,y
	sub #$01
	sta adr.C,y
	jmp a_0011
l_318A
	cmp #$60
	jne l_31A3

; optimize OK (bank.pas), line = 176

	ldy WHPOS
	lda adr.C,y
	add #$01
	sta adr.C,y
l_31A3
a_0011

; optimize OK (bank.pas), line = 179

	lda CH
	cmp #$73
	jeq l_31D7x
	cmp #$02
	jne l_31D7
l_31D7x

; optimize OK (bank.pas), line = 181

	lda WHPOS
	sta :STACKORIGIN+11
	lda #$00
	asl :STACKORIGIN+11
	rol @
	sta :STACKORIGIN+STACKWIDTH+11
	lda BASE
	add :STACKORIGIN+11
	tay
	lda BASE+1
	adc :STACKORIGIN+STACKWIDTH+11
	sta :bp+1
	lda #$00
	sta (:bp),y

; optimize OK (bank.pas), line = 182

	lda WHPOS
	sta :STACKORIGIN+11
	lda #$00
	asl :STACKORIGIN+11
	rol @
	sta :STACKORIGIN+STACKWIDTH+11
	lda BASE
	add :STACKORIGIN+11
	tay
	lda BASE+1
	adc :STACKORIGIN+STACKWIDTH+11
	sta :bp+1
	tya
	add #$02
	tay
	scc
	inc :bp+1
	lda #$00
	sta (:bp),y

; optimize OK (bank.pas), line = 183

	lda CH
	cmp #$73
	jne l_320A

; optimize OK (bank.pas), line = 185

	lda WHPOS
	cmp #$02
	jcs l_321D
	inc WHPOS
l_321D
l_320A

; optimize OK (bank.pas), line = 187

	lda CH
	cmp #$02
	jne l_323E

; optimize OK (bank.pas), line = 189

	lda WHPOS
	jeq l_3251
	dec WHPOS
l_3251
l_323E
l_31D7

; optimize OK (bank.pas), line = 193

	lda CURRENTPLAYER
	asl @
	asl @
	asl @
	tay
	lda adr.GANGSTERINT,y
	jsr SYSTEM.RANDOM_02E9
	inx
	ldy #1
	lda SYSTEM.RANDOM_02E9.RESULT
	cmp #$04
	bcc @+
	dey
@
	tya
	sta HOPS
	dex

; optimize OK (bank.pas), line = 194

	lda CH
	cmp #$26
	jeq l_3294x
	cmp #$60
	jne l_3294
l_3294x

; optimize OK (bank.pas), line = 196

	ldy WHPOS
	lda adr.C,y
	sub #$0A
	svc
	eor #$80
	jmi l_32AA
	lda #$00
	sta adr.C,y
l_32AA

; optimize OK (bank.pas), line = 197

	ldy WHPOS
	lda adr.C,y
	jpl l_32C9
	lda #$09
	sta adr.C,y
l_32C9

; optimize OK (bank.pas), line = 198

	dec NATTEMPTS

; optimize OK (bank.pas), line = 200

	lda HOPS
	jne l_3303
	ldy WHPOS
	lda adr.T,y
	cmp adr.C,y
	jne l_3303
	lda #$00
	sta CRT.SOUND.CHAN
	lda #$79
	jmp l_3312
l_3303

; optimize OK (bank.pas), line = 201

	lda #$00
	sta CRT.SOUND.CHAN
	lda #$60
l_3312
	sta CRT.SOUND.FREQ
	lda #$0A
	sta CRT.SOUND.DIST
	lda #$0F
	sta CRT.SOUND.VOL
	jsr CRT.SOUND

; optimize OK (bank.pas), line = 202

	lda #$05
	jsr WAITFRAMES

; optimize FAIL ('CRT.NOSOUND', bank.pas), line = 203

	jsr CRT.NOSOUND
l_3294

; optimize OK (bank.pas), line = 205

	lda HOPS
	jne l_335E
	lda adr.C
	cmp adr.T
	jne l_335E
	lda adr.C+$01
	cmp adr.T+$01
	jne l_335E
	lda adr.C+$02
	cmp adr.T+$02
	jne l_335E
	lda #$01
	sta SAFEOPEN
l_335E

; optimize OK (bank.pas), line = 206

	lda CH
	cmp #$2F
	jeq l_30E1x
	lda NATTEMPTS
	jeq l_30E1x
	lda SAFEOPEN
	cmp #$01
	jne l_30E1
l_30E1x

; optimize OK (bank.pas), line = 208

	lda #$00
	sta B_CRT.CRT_GOTOXY.X
	lda #$15
	sta B_CRT.CRT_GOTOXY.Y
	jsr B_CRT.CRT_GOTOXY

; optimize OK (bank.pas), line = 209

	lda CH
	cmp #$2F
	jne l_339F

; optimize FAIL ('B_CRT.CRT_WRITECENTERED_06F6', bank.pas), line = 211

	inx
	mva LOC_STRING_9 :STACKORIGIN,x
	mva LOC_STRING_9+1 :STACKORIGIN+STACKWIDTH,x
	inx
	mva #$15 :STACKORIGIN,x
	jsr B_CRT.CRT_WRITECENTERED_06F6

; optimize OK (bank.pas), line = 212

	lda #$64
	jsr WAITFRAMES

; optimize FAIL ('WAITFORKEY', bank.pas), line = 213

	jsr WAITFORKEY

; optimize FAIL ('ENABLECONSOLE', bank.pas), line = 214

	jsr ENABLECONSOLE
	jmp @exit
l_339F

; optimize OK (bank.pas), line = 218

	lda SAFEOPEN
	cmp #$01
	jne l_33BC

; optimize FAIL ('B_CRT.CRT_WRITECENTERED_06F6', bank.pas), line = 219

	inx
	mva LOC_STRING_10 :STACKORIGIN,x
	mva LOC_STRING_10+1 :STACKORIGIN+STACKWIDTH,x
	inx
	mva #$15 :STACKORIGIN,x
	jsr B_CRT.CRT_WRITECENTERED_06F6

; optimize OK (bank.pas), line = 221

	lda #$3C
	jsr WAITFRAMES

; optimize FAIL ('WAITFORKEY', bank.pas), line = 222

	jsr WAITFORKEY

; optimize OK (bank.pas), line = 223

	lda #$01
	sta CRACKEDBANK.P
	lda #$00
	sta CRACKEDBANK.P+1
	jsr CRACKEDBANK
	jmp @exit
l_33BC

; optimize FAIL ('B_CRT.CRT_WRITECENTERED_06F6', bank.pas), line = 228

	inx
	mva LOC_STRING_11 :STACKORIGIN,x
	mva LOC_STRING_11+1 :STACKORIGIN+STACKWIDTH,x
	inx
	mva #$15 :STACKORIGIN,x
	jsr B_CRT.CRT_WRITECENTERED_06F6

; optimize FAIL ('B_CRT.CRT_WRITECENTERED_06F6', bank.pas), line = 229

	inx
	mva LOC_STRING_12 :STACKORIGIN,x
	mva LOC_STRING_12+1 :STACKORIGIN+STACKWIDTH,x
	inx
	mva #$16 :STACKORIGIN,x
	jsr B_CRT.CRT_WRITECENTERED_06F6

; optimize OK (bank.pas), line = 230

	lda #$64
	jsr WAITFRAMES

; optimize FAIL ('WAITFORKEY', bank.pas), line = 231

	jsr WAITFORKEY

; optimize FAIL ('PREPAREFIGHTAGAINSTPOLICE', bank.pas), line = 232

	jsr PREPAREFIGHTAGAINSTPOLICE

; optimize FAIL ('DOFIGHT', bank.pas), line = 233

	jsr DOFIGHT
	lda DOFIGHT.RESULT
	cmp #$01
	jne l_33E4

; optimize FAIL ('GOTCAUGHT', bank.pas), line = 235

	jsr GOTCAUGHT

; optimize OK (bank.pas), line = 236

	lda #$11
	sta RESULT
	jmp @exit
l_33E4
l_2FE2
@exit

; ------------------------------------------------------------

CHOICE	= DATAORIGIN+$15CD
RESULT	= DATAORIGIN+$15CF
K	= DATAORIGIN+$15D0
NATTEMPTS	= DATAORIGIN+$15D1
adr.T	= [DATAORIGIN+$15D2] .array [3]
.var T	= adr.T .word
adr.C	= [DATAORIGIN+$15D5] .array [3]
.var C	= adr.C .word
CH	= DATAORIGIN+$15D8
SAFEOPEN	= DATAORIGIN+$15D9
BASE	= DATAORIGIN+$15DA
WHPOS	= DATAORIGIN+$15DC
HOPS	= DATAORIGIN+$15DD
@CASETMP_0011	= DATAORIGIN+$15DE

@VarData	= CHOICE
@VarDataSize	= 17

	rts						; ret
.endl

.local	CARDEALERCHOICES				; FUNCTION

; optimize OK (cardealer.pas), line = 13

	mvy CHOICE+1 :bp+1
	ldy CHOICE
	lda (:bp),y
	cmp #$01
	jne l_3404

; optimize FAIL ('SHOWLOCATIONHEADER', cardealer.pas), line = 15

	jsr SHOWLOCATIONHEADER

; optimize FAIL ('CRT_WRITELN', cardealer.pas), line = 16

	inx
	mva LOC_STRING_1 :STACKORIGIN,x
	mva LOC_STRING_1+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN

; optimize FAIL ('CRT_WRITELN', cardealer.pas), line = 17

	inx
	mva LOC_STRING_2 :STACKORIGIN,x
	mva LOC_STRING_2+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN

; optimize OK (cardealer.pas), line = 20

	lda #$01
	sta MINCAR

; optimize OK (cardealer.pas), line = 21

	lda #$04
	sta MAXCAR

; optimize OK (cardealer.pas), line = 22

	lda CURRENTSUBLOCATION
	cmp #$03
	jcc l_3426

; optimize OK (cardealer.pas), line = 23

	lda #$05
	sta MAXCAR
l_3426

; optimize FAIL ('B_CRT.CRT_NEWLINE_06EB', cardealer.pas), line = 26

	jsr B_CRT.CRT_NEWLINE_06EB

; optimize OK (cardealer.pas), line = 27

	lda MINCAR
	sta R

l_343B
; --- ForToDoCondition
	lda R
	cmp MAXCAR
	scc
	jne l_3449

; optimize FAIL ('B_CRT.CRT_WRITE_053A', cardealer.pas), line = 29

	inx
	mva #$76 :STACKORIGIN,x
	mva #$0D :STACKORIGIN+STACKWIDTH,x
	jsr B_CRT.CRT_WRITE_053A

; optimize OK (cardealer.pas), line = 30

	lda R
	jsr B_CRT.CRT_WRITE_055B

; optimize FAIL ('B_CRT.CRT_WRITE_053A', cardealer.pas), line = 31

	inx
	mva #$A1 :STACKORIGIN,x
	mva #$0D :STACKORIGIN+STACKWIDTH,x
	jsr B_CRT.CRT_WRITE_053A

; optimize FAIL ('CRT_WRITELN', cardealer.pas), line = 32

	inx
	lda R
	asl @
	tay
	lda adr.CARNAMES,y
	sta :STACKORIGIN,x
	lda adr.CARNAMES+1,y
	sta :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN

; --- ForToDoEpilog
	inc R
	jne l_343B
l_3449

; optimize FAIL ('B_CRT.CRT_NEWLINE_06EB', cardealer.pas), line = 35

	jsr B_CRT.CRT_NEWLINE_06EB

; optimize FAIL ('B_CRT.CRT_WRITE_053A', cardealer.pas), line = 36

	inx
	mva LOC_STRING_3 :STACKORIGIN,x
	mva LOC_STRING_3+1 :STACKORIGIN+STACKWIDTH,x
	jsr B_CRT.CRT_WRITE_053A

; optimize OK (cardealer.pas), line = 37

	lda MINCAR
	sta READVALUE.MINVALUE
	lda #$00
	sta READVALUE.MINVALUE+1
	lda MAXCAR
	sta READVALUE.MAXVALUE
	lda #$00
	sta READVALUE.MAXVALUE+1
	jsr READVALUE
	lda READVALUE.RESULT
	sta NEWCAR

; optimize OK (cardealer.pas), line = 38

	jne l_347C
	jmp @exit
l_347C

; optimize FAIL ('B_CRT.CRT_NEWLINE_06EB', cardealer.pas), line = 39

	jsr B_CRT.CRT_NEWLINE_06EB

; optimize OK (cardealer.pas), line = 40

	ldy NEWCAR
	lda adr.CARPRICES,y
	sta PRICE

; optimize OK (cardealer.pas), line = 41

	sta PAYMONEY.PRICE
	lda #$00
	sta PAYMONEY.PRICE+1
	jsr PAYMONEY
	lda PAYMONEY.RESULT
	jne l_349C
	jmp @exit
l_349C

; optimize OK (cardealer.pas), line = 43

	ldy CURRENTPLAYER
	lda adr.PLCAR,y
	jeq l_34B4

; optimize FAIL (1, cardealer.pas), line = 45

	inx
	mva #$E8 :STACKORIGIN,x
	mva #$03 :STACKORIGIN+STACKWIDTH,x
	lda #$00
	jsr SYSTEM.RANDOM_02E9
	inx
	mva SYSTEM.RANDOM_02E9.RESULT :STACKORIGIN,x
	inx
	ldy CURRENTPLAYER
	lda adr.PLCAR,y
	sta :STACKORIGIN,x
	jsr imulBYTE
	lda :eax
	sta :STACKORIGIN-1,x
	lda :eax+1
	sta :STACKORIGIN-1+STACKWIDTH,x
	dex
	lda :STACKORIGIN-1,x
	add :STACKORIGIN,x
	sta OLDPRICE
	dex
	dex

; optimize FAIL ('B_CRT.CRT_NEWLINE_06EB', cardealer.pas), line = 46

	jsr B_CRT.CRT_NEWLINE_06EB

; optimize FAIL ('B_CRT.CRT_WRITE_053A', cardealer.pas), line = 47

	inx
	mva LOC_STRING_4 :STACKORIGIN,x
	mva LOC_STRING_4+1 :STACKORIGIN+STACKWIDTH,x
	jsr B_CRT.CRT_WRITE_053A

; optimize OK (cardealer.pas), line = 48

	lda OLDPRICE
	jsr B_CRT.CRT_WRITE_055B

; optimize FAIL ('CRT_WRITELN', cardealer.pas), line = 49

	inx
	mva LOC_STRING_5 :STACKORIGIN,x
	mva LOC_STRING_5+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN

; optimize FAIL ('B_CRT.CRT_WRITE_053A', cardealer.pas), line = 50

	inx
	mva LOC_STRING_18 :STACKORIGIN,x
	mva LOC_STRING_18+1 :STACKORIGIN+STACKWIDTH,x
	jsr B_CRT.CRT_WRITE_053A

; optimize FAIL ('GETYESNO', cardealer.pas), line = 52

	jsr GETYESNO
	lda GETYESNO.RESULT
	sta R

; optimize OK (cardealer.pas), line = 53

	jne l_34EB
	jmp @exit
l_34EB

; optimize OK (cardealer.pas), line = 54

	lda OLDPRICE
	sta ADDMONEY.AMOUNT
	lda #$00
	sta ADDMONEY.AMOUNT+1
	jsr ADDMONEY
l_34B4

; optimize FAIL ('CRT_WRITELN', cardealer.pas), line = 57

	inx
	mva LOC_STRING_6 :STACKORIGIN,x
	mva LOC_STRING_6+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN

; optimize OK (cardealer.pas), line = 58

	lda OLDPRICE
	jeq l_3509

; optimize FAIL ('B_CRT.CRT_WRITE_053A', cardealer.pas), line = 60

	inx
	mva LOC_STRING_7 :STACKORIGIN,x
	mva LOC_STRING_7+1 :STACKORIGIN+STACKWIDTH,x
	jsr B_CRT.CRT_WRITE_053A

; optimize OK (cardealer.pas), line = 61

	lda OLDPRICE
	jsr B_CRT.CRT_WRITE_055B

; optimize FAIL ('CRT_WRITELN', cardealer.pas), line = 62

	inx
	mva LOC_STRING_5 :STACKORIGIN,x
	mva LOC_STRING_5+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN
l_3509

; optimize OK (cardealer.pas), line = 64

	ldy CURRENTPLAYER
	lda NEWCAR
	sta adr.PLCAR,y

; optimize FAIL ('WAITFORKEY', cardealer.pas), line = 65

	jsr WAITFORKEY
	jmp @exit
l_3404

; optimize OK (cardealer.pas), line = 70

	mvy CHOICE+1 :bp+1
	ldy CHOICE
	lda (:bp),y
	cmp #$02
	jne l_3534

; optimize FAIL ('SHOWLOCATIONHEADER', cardealer.pas), line = 72

	jsr SHOWLOCATIONHEADER

; optimize FAIL (1, cardealer.pas), line = 75

	inx
	ldy #1
	lda CURRENTSUBLOCATION
	cmp #$02
	bcc @+
	dey
@
	sty :STACKORIGIN,x
	lda #$03
	jsr SYSTEM.RANDOM_02E9
	dex
	ldy #1
	lda SYSTEM.RANDOM_02E9.RESULT
	bne @+
	dey
@
	tya
	and :STACKORIGIN+1,x
	jeq l_3553

; optimize FAIL ('B_CRT.CRT_WRITE_053A', cardealer.pas), line = 77

	inx
	mva LOC_STRING_8 :STACKORIGIN,x
	mva LOC_STRING_8+1 :STACKORIGIN+STACKWIDTH,x
	jsr B_CRT.CRT_WRITE_053A

; optimize FAIL ('WAITFORKEY', cardealer.pas), line = 78

	jsr WAITFORKEY
	jmp @exit
l_3553

; optimize OK (cardealer.pas), line = 82

	ldy CURRENTPLAYER
	lda adr.PLNGANGSTERS,y
	cmp #$02
	jcc l_356F

; optimize FAIL ('B_CRT.CRT_WRITE_053A', cardealer.pas), line = 83

	inx
	mva LOC_STRING_9 :STACKORIGIN,x
	mva LOC_STRING_9+1 :STACKORIGIN+STACKWIDTH,x
	jsr B_CRT.CRT_WRITE_053A
l_356F

; optimize FAIL ('SELECTGANGSTER', cardealer.pas), line = 84

	jsr SELECTGANGSTER

; optimize OK (cardealer.pas), line = 85

	lda CURRENTGANGSTER
	cmp #$63
	jne l_3588
	jmp @exit
l_3588

; optimize OK (cardealer.pas), line = 88

	ldy CURRENTGANGSTER
	lda adr.GANGSTERINT,y
	lsr @
	lsr @
	sta R

; optimize OK (cardealer.pas), line = 90

	lda adr.GANGSTERSTR,y
	lsr @
	lsr @
	sta MINCAR

; optimize OK (cardealer.pas), line = 91

	add R
	add R
	add R
	sta MINCAR

; optimize OK (cardealer.pas), line = 92

	lda #$64
	jsr SYSTEM.RANDOM_02E9
	lda SYSTEM.RANDOM_02E9.RESULT
	cmp MINCAR
	jcs l_35D0

; optimize FAIL ('CRT_WRITELN', cardealer.pas), line = 95

	inx
	mva LOC_STRING_10 :STACKORIGIN,x
	mva LOC_STRING_10+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN

; optimize FAIL ('B_CRT.CRT_NEWLINE_06EB', cardealer.pas), line = 96

	jsr B_CRT.CRT_NEWLINE_06EB

; optimize OK (cardealer.pas), line = 98

	ldy CURRENTPLAYER
	lda adr.PLCAR,y
	jne l_35EA

; optimize FAIL ('CRT_WRITELN', cardealer.pas), line = 100

	inx
	mva LOC_STRING_11 :STACKORIGIN,x
	mva LOC_STRING_11+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN
	jmp l_35F7
l_35EA

; optimize FAIL ('CRT_WRITELN', cardealer.pas), line = 104

	inx
	mva LOC_STRING_12 :STACKORIGIN,x
	mva LOC_STRING_12+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN

; optimize FAIL ('B_CRT.CRT_WRITE_053A', cardealer.pas), line = 105

	inx
	mva LOC_STRING_13 :STACKORIGIN,x
	mva LOC_STRING_13+1 :STACKORIGIN+STACKWIDTH,x
	jsr B_CRT.CRT_WRITE_053A
l_35F7

; optimize FAIL (2, cardealer.pas), line = 108

	inx
	mva CURRENTPLAYER :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	inx
	mva #$01 :STACKORIGIN,x
	lda #$05
	jsr SYSTEM.RANDOM_02E9
	lda :STACKORIGIN,x
	add SYSTEM.RANDOM_02E9.RESULT
	ldy :STACKORIGIN-1,x
	sta adr.PLCAR,y
	dex
	dex

; optimize FAIL ('WAITFORKEY', cardealer.pas), line = 109

	jsr WAITFORKEY
	jmp @exit
l_35D0

; optimize FAIL ('B_CRT.CRT_NEWLINE_06EB', cardealer.pas), line = 114

	jsr B_CRT.CRT_NEWLINE_06EB

; optimize FAIL ('CRT_WRITELN', cardealer.pas), line = 115

	inx
	mva LOC_STRING_14 :STACKORIGIN,x
	mva LOC_STRING_14+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN

; optimize FAIL ('CRT_WRITELN', cardealer.pas), line = 116

	inx
	mva LOC_STRING_17 :STACKORIGIN,x
	mva LOC_STRING_17+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN

; optimize FAIL ('WAITFORKEY', cardealer.pas), line = 117

	jsr WAITFORKEY

; optimize OK (cardealer.pas), line = 118

	lda #$00
	sta R

; -------------------  ASM Block 00000166  -------------------

; 
            lda loc_string_19
            sta adr.FP_GANG+$02
            lda loc_string_19+1
            sta adr.FP_GANG+1+$02
        
; optimize OK (cardealer.pas), line = 129

	lda #$01
	sta adr.FP_AI+$01

; optimize OK (cardealer.pas), line = 130

	sta adr.FP_N+$01

; -------------------  ASM Block 00000167  -------------------

; 
            lda loc_string_19
            sta adr.FP_GANG+16*2
            lda loc_string_19+1
            sta adr.FP_GANG+1+16*2
        
; optimize OK (cardealer.pas), line = 139

	lda #$05
	sta adr.FP_WEAPON+$10

; optimize FAIL (1, cardealer.pas), line = 140

	inx
	mva #$10 :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	lda #$02
	jsr SYSTEM.RANDOM_02E9
	ldy :STACKORIGIN,x
	lda SYSTEM.RANDOM_02E9.RESULT
	sta adr.FP_SEX,y
	dex

; optimize OK (cardealer.pas), line = 141

	lda #$1E
	sta adr.FP_ENERGY+$10

; optimize FAIL ('DOFIGHT', cardealer.pas), line = 143

	jsr DOFIGHT
	lda DOFIGHT.RESULT
	cmp #$01
	jne l_3642

; optimize FAIL ('GOTCAUGHT', cardealer.pas), line = 145

	jsr GOTCAUGHT

; optimize OK (cardealer.pas), line = 146

	lda #$11
	sta RESULT
	jmp @exit
l_3642

; optimize FAIL ('ENABLECONSOLE', cardealer.pas), line = 150

	jsr ENABLECONSOLE

; optimize FAIL ('SHOWLOCATIONHEADER', cardealer.pas), line = 151

	jsr SHOWLOCATIONHEADER

; optimize FAIL ('CRT_WRITELN', cardealer.pas), line = 152

	inx
	mva LOC_STRING_15 :STACKORIGIN,x
	mva LOC_STRING_15+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN

; optimize FAIL ('CRT_WRITELN', cardealer.pas), line = 153

	inx
	mva LOC_STRING_16 :STACKORIGIN,x
	mva LOC_STRING_16+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN

; optimize FAIL ('WAITFORKEY', cardealer.pas), line = 154

	jsr WAITFORKEY

; optimize OK (cardealer.pas), line = 155

	lda #$06
	sta RESULT
l_3534
@exit

; ------------------------------------------------------------

CHOICE	= DATAORIGIN+$15DF
RESULT	= DATAORIGIN+$15E1
R	= DATAORIGIN+$15E2
MINCAR	= DATAORIGIN+$15E3
MAXCAR	= DATAORIGIN+$15E4
PRICE	= DATAORIGIN+$15E5
OLDPRICE	= DATAORIGIN+$15E6
NEWCAR	= DATAORIGIN+$15E7

@VarData	= CHOICE
@VarDataSize	= 8

	rts						; ret
.endl

.local	FORGERYCHOICES					; FUNCTION

; optimize OK (forgery.pas), line = 13

	mvy CHOICE+1 :bp+1
	ldy CHOICE
	lda (:bp),y
	cmp #$01
	jne l_366F

; optimize FAIL ('SHOWLOCATIONHEADER', forgery.pas), line = 15

	jsr SHOWLOCATIONHEADER

; optimize OK (forgery.pas), line = 18

	ldy CURRENTPLAYER
	lda adr.PLFORGEDID,y
	jeq l_3686

; optimize FAIL ('CRT_WRITELN', forgery.pas), line = 20

	inx
	mva LOC_STRING_1 :STACKORIGIN,x
	mva LOC_STRING_1+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN

; optimize FAIL ('WAITFORKEY', forgery.pas), line = 21

	jsr WAITFORKEY
	jmp @exit
l_3686

; optimize OK (forgery.pas), line = 25

	ldy CURRENTPLAYER
	lda adr.PLNGANGSTERS,y
	sta R

; optimize OK (forgery.pas), line = 26

	lda #$E8
	sta :ecx
	lda #$03
	sta :ecx+1
	lda R
	sta :eax
	lda #$00
	sta :eax+1
	.ifdef fmulinit
	fmulu_16
	els
	imulCX_AL
	eif
	lda :eax
	sta C
	lda :eax+1
	sta C+1

; optimize FAIL ('CRT_WRITELN', forgery.pas), line = 27

	inx
	mva LOC_STRING_2 :STACKORIGIN,x
	mva LOC_STRING_2+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN

; optimize FAIL ('B_CRT.CRT_WRITE_053A', forgery.pas), line = 28

	inx
	mva LOC_STRING_3 :STACKORIGIN,x
	mva LOC_STRING_3+1 :STACKORIGIN+STACKWIDTH,x
	jsr B_CRT.CRT_WRITE_053A

; optimize OK (forgery.pas), line = 29

	lda R
	cmp #$02
	jcc l_36B8

; optimize FAIL ('B_CRT.CRT_WRITE_053A', forgery.pas), line = 30

	inx
	mva LOC_STRING_4 :STACKORIGIN,x
	mva LOC_STRING_4+1 :STACKORIGIN+STACKWIDTH,x
	jsr B_CRT.CRT_WRITE_053A
l_36B8

; optimize FAIL ('B_CRT.CRT_NEWLINE_06EB', forgery.pas), line = 31

	jsr B_CRT.CRT_NEWLINE_06EB

; optimize FAIL ('B_CRT.CRT_WRITE_053A', forgery.pas), line = 32

	inx
	mva LOC_STRING_5 :STACKORIGIN,x
	mva LOC_STRING_5+1 :STACKORIGIN+STACKWIDTH,x
	jsr B_CRT.CRT_WRITE_053A

; optimize OK (forgery.pas), line = 33

	lda C
	sta B_CRT.CRT_WRITE_0565.NUM
	lda C+1
	sta B_CRT.CRT_WRITE_0565.NUM+1
	jsr B_CRT.CRT_WRITE_0565

; optimize FAIL ('CRT_WRITELN', forgery.pas), line = 34

	inx
	mva #$1E :STACKORIGIN,x
	mva #$0E :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN

; optimize FAIL ('B_CRT.CRT_NEWLINE_06EB', forgery.pas), line = 35

	jsr B_CRT.CRT_NEWLINE_06EB

; optimize FAIL ('B_CRT.CRT_WRITE_053A', forgery.pas), line = 36

	inx
	mva LOC_STRING_6 :STACKORIGIN,x
	mva LOC_STRING_6+1 :STACKORIGIN+STACKWIDTH,x
	jsr B_CRT.CRT_WRITE_053A

; optimize FAIL ('GETYESNO', forgery.pas), line = 38

	jsr GETYESNO
	lda GETYESNO.RESULT
	sta R

; optimize OK (forgery.pas), line = 39

	jne l_36E1
	jmp @exit
l_36E1

; optimize OK (forgery.pas), line = 40

	lda C
	sta PAYMONEY.PRICE
	lda C+1
	sta PAYMONEY.PRICE+1
	jsr PAYMONEY
	lda PAYMONEY.RESULT
	jne l_36F6
	jmp @exit
l_36F6

; optimize FAIL ('B_CRT.CRT_NEWLINE_06EB', forgery.pas), line = 42

	jsr B_CRT.CRT_NEWLINE_06EB

; optimize FAIL ('B_CRT.CRT_NEWLINE_06EB', forgery.pas), line = 43

	jsr B_CRT.CRT_NEWLINE_06EB

; optimize FAIL ('CRT_WRITELN', forgery.pas), line = 44

	inx
	mva LOC_STRING_7 :STACKORIGIN,x
	mva LOC_STRING_7+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN

; optimize OK (forgery.pas), line = 45

	ldy CURRENTPLAYER
	lda #$01
	sta adr.PLFORGEDID,y

; optimize OK (forgery.pas), line = 46

	lda adr.PLNEWPOINTS,y
	add #$01
	sta adr.PLNEWPOINTS,y

; optimize FAIL ('WAITFORKEY', forgery.pas), line = 47

	jsr WAITFORKEY
l_366F

; optimize OK (forgery.pas), line = 54

	mvy CHOICE+1 :bp+1
	ldy CHOICE
	lda (:bp),y
	cmp #$02
	jne l_372A

; optimize FAIL ('SHOWLOCATIONHEADER', forgery.pas), line = 56

	jsr SHOWLOCATIONHEADER

; optimize OK (forgery.pas), line = 57

	ldy CURRENTPLAYER
	lda adr.PLFAKEMONEY,y
	jeq l_3741

; optimize FAIL ('CRT_WRITELN', forgery.pas), line = 59

	inx
	mva LOC_STRING_8 :STACKORIGIN,x
	mva LOC_STRING_8+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN

; optimize FAIL ('WAITFORKEY', forgery.pas), line = 60

	jsr WAITFORKEY
	jmp @exit
l_3741

; optimize FAIL ('CRT_WRITELN', forgery.pas), line = 64

	inx
	mva LOC_STRING_9 :STACKORIGIN,x
	mva LOC_STRING_9+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN

; optimize FAIL ('B_CRT.CRT_WRITE_053A', forgery.pas), line = 65

	inx
	mva LOC_STRING_10 :STACKORIGIN,x
	mva LOC_STRING_10+1 :STACKORIGIN+STACKWIDTH,x
	jsr B_CRT.CRT_WRITE_053A

; optimize OK (forgery.pas), line = 67

	lda #$88
	sta M
	lda #$13
	sta M+1

; optimize OK (forgery.pas), line = 68

	lda CURRENTPLAYER
	asl @
	asl @
	tay
	.LOCAL
	lda adr.PLMONEY+3,y
	sub #$00
	bne L4
	lda adr.PLMONEY+2,y
	cmp #$00
	bne L1
	lda adr.PLMONEY+1,y
	cmp M+1
	bne L1
	lda adr.PLMONEY,y
	cmp M
L1	beq L5
	bcs L3
	lda #$FF
	bne L5
L3	lda #$01
	bne L5
L4	bvc L5
	eor #$FF
	ora #$01
L5
	.ENDL
	jpl l_3766
	lda adr.PLMONEY,y
	sta M
	lda adr.PLMONEY+1,y
	sta M+1
l_3766

; optimize OK (forgery.pas), line = 69

	lda M
	sta B_CRT.CRT_WRITE_0565.NUM
	lda M+1
	sta B_CRT.CRT_WRITE_0565.NUM+1
	jsr B_CRT.CRT_WRITE_0565

; optimize FAIL ('B_CRT.CRT_WRITE_053A', forgery.pas), line = 70

	inx
	mva #$22 :STACKORIGIN,x
	mva #$0E :STACKORIGIN+STACKWIDTH,x
	jsr B_CRT.CRT_WRITE_053A

; optimize OK (forgery.pas), line = 71

	lda #$00
	sta READVALUE.MINVALUE
	sta READVALUE.MINVALUE+1
	lda M
	sta READVALUE.MAXVALUE
	lda M+1
	sta READVALUE.MAXVALUE+1
	jsr READVALUE
	lda READVALUE.RESULT
	sta C
	lda READVALUE.RESULT+1
	sta C+1

; optimize OK (forgery.pas), line = 72

	ora C
	jne l_378D
	jmp @exit
l_378D

; optimize FAIL (1, forgery.pas), line = 74

	inx
	lda C
	add #$64
	sta :STACKORIGIN,x
	lda C+1
	adc #$00
	sta :STACKORIGIN+STACKWIDTH,x
	lda #$0A
	jsr SYSTEM.RANDOM_02E9
	inx
	mva SYSTEM.RANDOM_02E9.RESULT :STACKORIGIN,x
	inx
	mva C :STACKORIGIN,x
	mva C+1 :STACKORIGIN+STACKWIDTH,x
	inx
	mva #$04 :STACKORIGIN,x
	jsr shrAX_CL.WORD
	dex
	mva #$00 :STACKORIGIN-1+STACKWIDTH,x
	jsr imulWORD
	dex
	lda :STACKORIGIN-1,x
	add :eax
	sta :STACKORIGIN-1,x
	lda :STACKORIGIN-1+STACKWIDTH,x
	adc :eax+1
	sta :STACKORIGIN-1+STACKWIDTH,x
	dex
	lda :STACKORIGIN,x
	sta P
	lda :STACKORIGIN+STACKWIDTH,x
	sta P+1
	dex

; optimize FAIL ('B_CRT.CRT_NEWLINE_06EB', forgery.pas), line = 75

	jsr B_CRT.CRT_NEWLINE_06EB

; optimize FAIL ('B_CRT.CRT_NEWLINE_06EB', forgery.pas), line = 76

	jsr B_CRT.CRT_NEWLINE_06EB

; optimize FAIL ('B_CRT.CRT_WRITE_053A', forgery.pas), line = 77

	inx
	mva LOC_STRING_11 :STACKORIGIN,x
	mva LOC_STRING_11+1 :STACKORIGIN+STACKWIDTH,x
	jsr B_CRT.CRT_WRITE_053A

; optimize OK (forgery.pas), line = 78

	lda P
	sta B_CRT.CRT_WRITE_0565.NUM
	lda P+1
	sta B_CRT.CRT_WRITE_0565.NUM+1
	jsr B_CRT.CRT_WRITE_0565

; optimize FAIL ('B_CRT.CRT_WRITE_053A', forgery.pas), line = 79

	inx
	mva LOC_STRING_12 :STACKORIGIN,x
	mva LOC_STRING_12+1 :STACKORIGIN+STACKWIDTH,x
	jsr B_CRT.CRT_WRITE_053A

; optimize FAIL ('GETYESNO', forgery.pas), line = 81

	jsr GETYESNO
	lda GETYESNO.RESULT
	sta R

; optimize OK (forgery.pas), line = 82

	jne l_37C8
	jmp @exit
l_37C8

; optimize OK (forgery.pas), line = 83

	lda C
	sta PAYMONEY.PRICE
	lda C+1
	sta PAYMONEY.PRICE+1
	jsr PAYMONEY
	lda PAYMONEY.RESULT
	jne l_37DD
	jmp @exit
l_37DD

; optimize FAIL ('B_CRT.CRT_NEWLINE_06EB', forgery.pas), line = 85

	jsr B_CRT.CRT_NEWLINE_06EB

; optimize FAIL ('B_CRT.CRT_NEWLINE_06EB', forgery.pas), line = 86

	jsr B_CRT.CRT_NEWLINE_06EB

; optimize FAIL ('CRT_WRITELN', forgery.pas), line = 87

	inx
	mva LOC_STRING_13 :STACKORIGIN,x
	mva LOC_STRING_13+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN

; optimize OK (forgery.pas), line = 89

	lda P
	sta ADDMONEY.AMOUNT
	lda P+1
	sta ADDMONEY.AMOUNT+1
	jsr ADDMONEY

; optimize OK (forgery.pas), line = 90

	ldy CURRENTPLAYER
	lda #$06
	sta adr.PLFAKEMONEY,y

; optimize OK (forgery.pas), line = 91

	lda adr.PLNEWPOINTS,y
	add #$01
	sta adr.PLNEWPOINTS,y

; optimize FAIL ('WAITFORKEY', forgery.pas), line = 92

	jsr WAITFORKEY
l_372A
@exit

; ------------------------------------------------------------

CHOICE	= DATAORIGIN+$15E8
RESULT	= DATAORIGIN+$15EA
R	= DATAORIGIN+$15EB
C	= DATAORIGIN+$15EC
P	= DATAORIGIN+$15EE
M	= DATAORIGIN+$15F0

@VarData	= CHOICE
@VarDataSize	= 9

	rts						; ret
.endl

.local	GAMBLINGCHOICES					; FUNCTION

; optimize FAIL ('SHOWLOCATIONHEADER', gambling.pas), line = 9

	jsr SHOWLOCATIONHEADER

; optimize FAIL ('CRT_WRITELN2', gambling.pas), line = 11

	inx
	mva LOC_STRING_1 :STACKORIGIN,x
	mva LOC_STRING_1+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN2

; optimize FAIL ('CRT_WRITELN', gambling.pas), line = 12

	inx
	mva LOC_STRING_2 :STACKORIGIN,x
	mva LOC_STRING_2+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN

; optimize FAIL ('CRT_WRITELN', gambling.pas), line = 13

	inx
	mva LOC_STRING_3 :STACKORIGIN,x
	mva LOC_STRING_3+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN

; optimize FAIL ('CRT_WRITELN', gambling.pas), line = 14

	inx
	mva LOC_STRING_4 :STACKORIGIN,x
	mva LOC_STRING_4+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN

; optimize FAIL ('B_CRT.CRT_NEWLINE_06EB', gambling.pas), line = 15

	jsr B_CRT.CRT_NEWLINE_06EB

; optimize FAIL ('B_CRT.CRT_WRITE_053A', gambling.pas), line = 17

	inx
	mva LOC_STRING_5 :STACKORIGIN,x
	mva LOC_STRING_5+1 :STACKORIGIN+STACKWIDTH,x
	jsr B_CRT.CRT_WRITE_053A

; optimize OK (gambling.pas), line = 18

	lda #$00
	sta READVALUE.MINVALUE
	sta READVALUE.MINVALUE+1
	lda #$03
	sta READVALUE.MAXVALUE
	lda #$00
	sta READVALUE.MAXVALUE+1
	jsr READVALUE
	lda READVALUE.RESULT
	sta GAME

; optimize OK (gambling.pas), line = 19

	jne l_382F
	jmp @exit
l_382F

; optimize FAIL ('B_CRT.CRT_NEWLINE_06EB', gambling.pas), line = 22

	jsr B_CRT.CRT_NEWLINE_06EB

; optimize FAIL ('B_CRT.CRT_NEWLINE_06EB', gambling.pas), line = 23

	jsr B_CRT.CRT_NEWLINE_06EB

; optimize FAIL ('B_CRT.CRT_WRITE_053A', gambling.pas), line = 24

	inx
	mva LOC_STRING_6 :STACKORIGIN,x
	mva LOC_STRING_6+1 :STACKORIGIN+STACKWIDTH,x
	jsr B_CRT.CRT_WRITE_053A

; optimize OK (gambling.pas), line = 25

	lda CURRENTPLAYER
	asl @
	asl @
	tay
	lda adr.PLMONEY,y
	sta B_CRT.CRT_WRITE_056E.NUM
	lda adr.PLMONEY+1,y
	sta B_CRT.CRT_WRITE_056E.NUM+1
	lda adr.PLMONEY+2,y
	sta B_CRT.CRT_WRITE_056E.NUM+2
	lda adr.PLMONEY+3,y
	sta B_CRT.CRT_WRITE_056E.NUM+3
	jsr B_CRT.CRT_WRITE_056E

; optimize FAIL ('B_CRT.CRT_WRITE_053A', gambling.pas), line = 26

	inx
	mva #$1E :STACKORIGIN,x
	mva #$0E :STACKORIGIN+STACKWIDTH,x
	jsr B_CRT.CRT_WRITE_053A

; optimize FAIL ('B_CRT.CRT_NEWLINE_06EB', gambling.pas), line = 27

	jsr B_CRT.CRT_NEWLINE_06EB

; optimize OK (gambling.pas), line = 28

	lda CURRENTPLAYER
	asl @
	asl @
	tay
	lda adr.PLMONEY,y
	sta EINSATZ
	lda adr.PLMONEY+1,y
	sta EINSATZ+1

; optimize FAIL ('B_CRT.CRT_WRITE_053A', gambling.pas), line = 32

	inx
	mva LOC_STRING_7 :STACKORIGIN,x
	mva LOC_STRING_7+1 :STACKORIGIN+STACKWIDTH,x
	jsr B_CRT.CRT_WRITE_053A

; optimize OK (gambling.pas), line = 33

	lda EINSATZ
	sta B_CRT.CRT_WRITE_0565.NUM
	lda EINSATZ+1
	sta B_CRT.CRT_WRITE_0565.NUM+1
	jsr B_CRT.CRT_WRITE_0565

; optimize FAIL ('B_CRT.CRT_WRITE_053A', gambling.pas), line = 34

	inx
	mva #$26 :STACKORIGIN,x
	mva #$0E :STACKORIGIN+STACKWIDTH,x
	jsr B_CRT.CRT_WRITE_053A

; optimize OK (gambling.pas), line = 35

	lda #$00
	sta READVALUE.MINVALUE
	sta READVALUE.MINVALUE+1
	lda EINSATZ
	sta READVALUE.MAXVALUE
	lda EINSATZ+1
	sta READVALUE.MAXVALUE+1
	jsr READVALUE
	lda READVALUE.RESULT
	sta EINSATZ
	lda READVALUE.RESULT+1
	sta EINSATZ+1

; optimize OK (gambling.pas), line = 36

	ora EINSATZ
	jne l_3866
	jmp @exit
l_3866

; optimize OK (gambling.pas), line = 38

	lda EINSATZ
	sta PAYMONEY.PRICE
	lda EINSATZ+1
	sta PAYMONEY.PRICE+1
	jsr PAYMONEY
	lda PAYMONEY.RESULT
	jne l_387B
	jmp @exit
l_387B

; optimize FAIL ('B_CRT.CRT_NEWLINE_06EB', gambling.pas), line = 41

	jsr B_CRT.CRT_NEWLINE_06EB

; optimize FAIL ('B_CRT.CRT_NEWLINE_06EB', gambling.pas), line = 42

	jsr B_CRT.CRT_NEWLINE_06EB

; optimize FAIL ('CRT_WRITELN2', gambling.pas), line = 43

	inx
	mva LOC_STRING_8 :STACKORIGIN,x
	mva LOC_STRING_8+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN2

; optimize FAIL ('B_CRT.CRT_NEWLINE_06EB', gambling.pas), line = 44

	jsr B_CRT.CRT_NEWLINE_06EB

; optimize FAIL ('EFFECTWAIT', gambling.pas), line = 46

	jsr EFFECTWAIT

; optimize OK (gambling.pas), line = 47

	lda GAME
	add #$02
	sta GAME

; optimize OK (gambling.pas), line = 48

	jsr SYSTEM.RANDOM_02E9
	lda SYSTEM.RANDOM_02E9.RESULT
	jne l_38A2

; optimize OK (gambling.pas), line = 51

	lda EINSATZ+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda EINSATZ
	lsr :STACKORIGIN+STACKWIDTH+9
	ror @
	sta GEWINN
	lda :STACKORIGIN+STACKWIDTH+9
	sta GEWINN+1

; optimize OK (gambling.pas), line = 52

	lda GAME
	sta :eax
	lda #$00
	sta :eax+1
	lda GEWINN
	sta :ecx
	lda GEWINN+1
	sta :ecx+1
	.ifdef fmulinit
	fmulu_16
	els
	imulCX_AL
	eif
	lda :eax
	add EINSATZ
	sta GEWINN
	lda :eax+1
	adc EINSATZ+1
	sta GEWINN+1

; optimize FAIL ('B_CRT.CRT_WRITE_053A', gambling.pas), line = 53

	inx
	mva LOC_STRING_9 :STACKORIGIN,x
	mva LOC_STRING_9+1 :STACKORIGIN+STACKWIDTH,x
	jsr B_CRT.CRT_WRITE_053A

; optimize OK (gambling.pas), line = 54

	lda GEWINN
	sta B_CRT.CRT_WRITE_0565.NUM
	lda GEWINN+1
	sta B_CRT.CRT_WRITE_0565.NUM+1
	jsr B_CRT.CRT_WRITE_0565

; optimize FAIL ('B_CRT.CRT_WRITE_053A', gambling.pas), line = 55

	inx
	mva LOC_STRING_10 :STACKORIGIN,x
	mva LOC_STRING_10+1 :STACKORIGIN+STACKWIDTH,x
	jsr B_CRT.CRT_WRITE_053A

; optimize OK (gambling.pas), line = 56

	lda GEWINN
	sta ADDMONEY.AMOUNT
	lda GEWINN+1
	sta ADDMONEY.AMOUNT+1
	jsr ADDMONEY
	jmp l_38D1
l_38A2

; optimize FAIL ('B_CRT.CRT_WRITE_053A', gambling.pas), line = 59

	inx
	mva LOC_STRING_11 :STACKORIGIN,x
	mva LOC_STRING_11+1 :STACKORIGIN+STACKWIDTH,x
	jsr B_CRT.CRT_WRITE_053A
l_38D1

; optimize FAIL ('WAITFORKEY', gambling.pas), line = 60

	jsr WAITFORKEY
@exit

; ------------------------------------------------------------

CHOICE	= DATAORIGIN+$15F2
RESULT	= DATAORIGIN+$15F4
GAME	= DATAORIGIN+$15F5
EINSATZ	= DATAORIGIN+$15F6
WON	= DATAORIGIN+$15F8
GEWINN	= DATAORIGIN+$15F9

@VarData	= CHOICE
@VarDataSize	= 8

	rts						; ret
.endl

.local	HIDEOUTCHOICES					; FUNCTION

; optimize FAIL ('SHOWLOCATIONHEADER', hideout.pas), line = 9

	jsr SHOWLOCATIONHEADER

; optimize FAIL ('B_CRT.CRT_NEWLINE_06EB', hideout.pas), line = 10

	jsr B_CRT.CRT_NEWLINE_06EB

; optimize OK (hideout.pas), line = 13

	mvy CHOICE+1 :bp+1
	ldy CHOICE
	lda (:bp),y
	cmp #$03
	jne l_38ED

; optimize OK (hideout.pas), line = 15

	ldy CURRENTSUBLOCATION
	lda adr.PLRENT,y
	sta PL

; optimize FAIL ('B_CRT.CRT_WRITECENTERED_06F6', hideout.pas), line = 17

	inx
	mva LOC_STRING_12 :STACKORIGIN,x
	mva LOC_STRING_12+1 :STACKORIGIN+STACKWIDTH,x
	inx
	mva #$04 :STACKORIGIN,x
	jsr B_CRT.CRT_WRITECENTERED_06F6

; optimize FAIL ('EFFECTWAIT', hideout.pas), line = 18

	jsr EFFECTWAIT

; optimize OK (hideout.pas), line = 20

	lda PL
	cmp #$63
	jeq l_391Cx
	cmp CURRENTPLAYER
	jne l_391C
l_391Cx

; optimize FAIL ('B_CRT.CRT_WRITECENTERED_06F6', hideout.pas), line = 22

	inx
	mva LOC_STRING_13 :STACKORIGIN,x
	mva LOC_STRING_13+1 :STACKORIGIN+STACKWIDTH,x
	inx
	mva #$06 :STACKORIGIN,x
	jsr B_CRT.CRT_WRITECENTERED_06F6

; optimize FAIL ('WAITFORKEY', hideout.pas), line = 23

	jsr WAITFORKEY
	jmp @exit
l_391C

; optimize FAIL ('B_CRT.CRT_NEWLINE_06EB', hideout.pas), line = 27

	jsr B_CRT.CRT_NEWLINE_06EB

; optimize FAIL ('B_CRT.CRT_NEWLINE_06EB', hideout.pas), line = 28

	jsr B_CRT.CRT_NEWLINE_06EB

; optimize FAIL ('B_CRT.CRT_WRITE_053A', hideout.pas), line = 29

	inx
	mva LOC_STRING_14 :STACKORIGIN,x
	mva LOC_STRING_14+1 :STACKORIGIN+STACKWIDTH,x
	jsr B_CRT.CRT_WRITE_053A

; optimize FAIL ('B_CRT.CRT_WRITE_053A', hideout.pas), line = 30

	inx
	mva PL :STACKORIGIN,x
	inx
	mva #$03 :STACKORIGIN,x
	jsr shlEAX_CL.BYTE
	dex
	lda :STACKORIGIN+STACKWIDTH,x
	asl :STACKORIGIN,x
	rol @
	sta :STACKORIGIN+STACKWIDTH,x
	ldy :STACKORIGIN,x
	lda adr.GANGSTERNAMES,y
	sta :STACKORIGIN,x
	lda adr.GANGSTERNAMES+1,y
	sta :STACKORIGIN+STACKWIDTH,x
	jsr B_CRT.CRT_WRITE_053A

; optimize FAIL ('CRT_WRITELN', hideout.pas), line = 31

	inx
	mva #$2C :STACKORIGIN,x
	mva #$0E :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN

; optimize FAIL ('EFFECTWAIT', hideout.pas), line = 32

	jsr EFFECTWAIT

; optimize OK (hideout.pas), line = 34

	lda #$03
	jsr SYSTEM.RANDOM_02E9
	inx
	ldy #1
	lda SYSTEM.RANDOM_02E9.RESULT
	bne @+
	dey
@
	sty :STACKORIGIN,x
	inx
	ldy PL
	lda adr.PLJOB,y
	sta :STACKORIGIN,x
	inx
	ldy #1
	lda :STACKORIGIN-1,x
	bne @+
	dey
@
	dex
	sty :STACKORIGIN,x
	dex
	lda :STACKORIGIN,x
	ora :STACKORIGIN+1,x
	sta :STACKORIGIN,x
	inx
	ldy PL
	lda adr.PLPRISON,y
	sta :STACKORIGIN,x
	inx
	ldy #1
	lda :STACKORIGIN-1,x
	bne @+
	dey
@
	dex
	sty :STACKORIGIN,x
	dex
	dex
	lda :STACKORIGIN+1,x
	ora :STACKORIGIN+2,x
	jeq l_3965

; optimize FAIL ('CRT_WRITELN', hideout.pas), line = 35

	inx
	mva LOC_STRING_15 :STACKORIGIN,x
	mva LOC_STRING_15+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN

; optimize FAIL ('WAITFORKEY', hideout.pas), line = 36

	jsr WAITFORKEY
	jmp @exit
l_3965

; optimize OK (hideout.pas), line = 42

	ldy PL
	lda adr.PLNGANGSTERS,y
	sta adr.FP_N+$01

; optimize OK (hideout.pas), line = 43

	tya
	asl @
	tay
	lda adr.PLGANG,y
	sta @move.src
	lda adr.PLGANG+1,y
	sta @move.src+1
	lda adr.FP_GANG+$02
	sta @move.dst
	lda adr.FP_GANG+1+$02
	sta @move.dst+1
	ldy #$00
	lda (@move.src),y
	add #1
	sta @move.cnt
	scc
	iny
	sty @move.cnt+1
	jsr @move

; optimize OK (hideout.pas), line = 44

	lda #$00
	sta adr.FP_AI+$01

; optimize OK (hideout.pas), line = 46

	sta K

; optimize OK (hideout.pas), line = 47

	sta J

l_3991
; --- ForToDoCondition
	ldy J
	cpy #$20
	jcs l_399F

; optimize OK (hideout.pas), line = 49

	lda adr.PLGANGSTERS,y
	cmp PL
	jne l_39B6

; optimize OK (hideout.pas), line = 51

	lda J
	asl @
	tay
	lda adr.GANGSTERNAMES,y
	sta @move.src
	lda adr.GANGSTERNAMES+1,y
	sta @move.src+1
	lda K
	asl @
	tay
	lda adr.FP_NAME+$20,y
	sta @move.dst
	lda adr.FP_NAME+1+$20,y
	sta @move.dst+1
	ldy #$00
	lda (@move.src),y
	add #1
	sta @move.cnt
	scc
	iny
	sty @move.cnt+1
	jsr @move

; optimize OK (hideout.pas), line = 52

	ldy J
	lda adr.GANGSTERHEALTH,y
	ldy K
	sta adr.FP_ENERGY+$10,y

; optimize OK (hideout.pas), line = 53

	ldy J
	lda adr.GANGSTERWEAPON,y
	ldy K
	sta adr.FP_WEAPON+$10,y

; optimize OK (hideout.pas), line = 54

	ldy J
	lda adr.GANGSTERSEX,y
	ldy K
	sta adr.FP_SEX+$10,y

; optimize OK (hideout.pas), line = 55

	ldy J
	lda adr.GANGSTERSTR,y
	ldy K
	sta adr.FP_STRENGTH+$10,y

; optimize OK (hideout.pas), line = 56

	ldy J
	lda adr.GANGSTERBRUT,y
	ldy K
	sta adr.FP_BRUTALITY+$10,y

; optimize OK (hideout.pas), line = 57

	inc K
l_39B6

; --- ForToDoEpilog
	inc J
	jne l_3991
l_399F

; optimize FAIL ('DOFIGHT', hideout.pas), line = 61

	jsr DOFIGHT
	lda DOFIGHT.RESULT
	sta W

; optimize FAIL ('ENABLECONSOLE', hideout.pas), line = 62

	jsr ENABLECONSOLE

; optimize FAIL ('SHOWLOCATIONHEADER', hideout.pas), line = 64

	jsr SHOWLOCATIONHEADER

; optimize FAIL ('B_CRT.CRT_NEWLINE_06EB', hideout.pas), line = 65

	jsr B_CRT.CRT_NEWLINE_06EB

; optimize FAIL ('B_CRT.CRT_WRITECENTERED_06F6', hideout.pas), line = 66

	inx
	mva LOC_STRING_12 :STACKORIGIN,x
	mva LOC_STRING_12+1 :STACKORIGIN+STACKWIDTH,x
	inx
	mva #$04 :STACKORIGIN,x
	jsr B_CRT.CRT_WRITECENTERED_06F6

; optimize FAIL ('B_CRT.CRT_NEWLINE_06EB', hideout.pas), line = 67

	jsr B_CRT.CRT_NEWLINE_06EB

; optimize FAIL ('B_CRT.CRT_NEWLINE_06EB', hideout.pas), line = 68

	jsr B_CRT.CRT_NEWLINE_06EB

; optimize OK (hideout.pas), line = 70

	lda W
	cmp #$01
	jne l_3A46

; optimize FAIL ('CRT_WRITELN', hideout.pas), line = 73

	inx
	mva LOC_STRING_16 :STACKORIGIN,x
	mva LOC_STRING_16+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN

; optimize FAIL ('B_CRT.CRT_WRITE_053A', hideout.pas), line = 74

	inx
	mva PL :STACKORIGIN,x
	inx
	mva #$03 :STACKORIGIN,x
	jsr shlEAX_CL.BYTE
	dex
	lda :STACKORIGIN+STACKWIDTH,x
	asl :STACKORIGIN,x
	rol @
	sta :STACKORIGIN+STACKWIDTH,x
	ldy :STACKORIGIN,x
	lda adr.GANGSTERNAMES,y
	sta :STACKORIGIN,x
	lda adr.GANGSTERNAMES+1,y
	sta :STACKORIGIN+STACKWIDTH,x
	jsr B_CRT.CRT_WRITE_053A

; optimize OK (hideout.pas), line = 75

	lda #$00
	jsr B_CRT.CRT_WRITE_054D

; optimize FAIL ('CRT_WRITELN', hideout.pas), line = 76

	inx
	mva LOC_STRING_17 :STACKORIGIN,x
	mva LOC_STRING_17+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN

; optimize FAIL ('B_CRT.CRT_WRITE_053A', hideout.pas), line = 77

	inx
	mva LOC_STRING_18 :STACKORIGIN,x
	mva LOC_STRING_18+1 :STACKORIGIN+STACKWIDTH,x
	jsr B_CRT.CRT_WRITE_053A

; optimize OK (hideout.pas), line = 78

	lda PL
	sta M

; optimize OK (hideout.pas), line = 79

	lda CURRENTPLAYER
	jmp l_3A71
l_3A46

; optimize FAIL ('CRT_WRITELN', hideout.pas), line = 84

	inx
	mva LOC_STRING_19 :STACKORIGIN,x
	mva LOC_STRING_19+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN

; optimize FAIL ('B_CRT.CRT_WRITE_053A', hideout.pas), line = 85

	inx
	mva LOC_STRING_20 :STACKORIGIN,x
	mva LOC_STRING_20+1 :STACKORIGIN+STACKWIDTH,x
	jsr B_CRT.CRT_WRITE_053A

; optimize FAIL ('CRT_WRITELN', hideout.pas), line = 86

	inx
	mva PL :STACKORIGIN,x
	inx
	mva #$03 :STACKORIGIN,x
	jsr shlEAX_CL.BYTE
	dex
	lda :STACKORIGIN+STACKWIDTH,x
	asl :STACKORIGIN,x
	rol @
	sta :STACKORIGIN+STACKWIDTH,x
	ldy :STACKORIGIN,x
	lda adr.GANGSTERNAMES,y
	sta :STACKORIGIN,x
	lda adr.GANGSTERNAMES+1,y
	sta :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN

; optimize FAIL ('B_CRT.CRT_WRITE_053A', hideout.pas), line = 87

	inx
	mva LOC_STRING_21 :STACKORIGIN,x
	mva LOC_STRING_21+1 :STACKORIGIN+STACKWIDTH,x
	jsr B_CRT.CRT_WRITE_053A

; optimize OK (hideout.pas), line = 88

	lda CURRENTPLAYER
	sta M

; optimize OK (hideout.pas), line = 89

	lda PL
l_3A71
	sta K

; optimize OK (hideout.pas), line = 92

	asl @
	asl @
	tay
	lda adr.PLMONEY,y
	sta :STACKORIGIN+9
	lda adr.PLMONEY+1,y
	sta :STACKORIGIN+STACKWIDTH+9
	lda adr.PLMONEY+2,y
	sta :STACKORIGIN+STACKWIDTH*2+9
	lda adr.PLMONEY+3,y
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lsr :STACKORIGIN+STACKWIDTH*2+9
	ror :STACKORIGIN+STACKWIDTH+9
	ror :STACKORIGIN+9
	lda :STACKORIGIN+9
	sta Z
	lda :STACKORIGIN+STACKWIDTH+9
	sta Z+1

; optimize FAIL (1, hideout.pas), line = 93

	inx
	mva Z :STACKORIGIN,x
	mva Z+1 :STACKORIGIN+STACKWIDTH,x
	lda #$04
	jsr SYSTEM.RANDOM_02E9
	inx
	mva SYSTEM.RANDOM_02E9.RESULT :STACKORIGIN,x
	inx
	mva Z :STACKORIGIN,x
	mva Z+1 :STACKORIGIN+STACKWIDTH,x
	inx
	mva #$01 :STACKORIGIN,x
	jsr shrAX_CL.WORD
	dex
	mva #$00 :STACKORIGIN-1+STACKWIDTH,x
	jsr imulWORD
	dex
	lda :STACKORIGIN-1,x
	add :eax
	sta :STACKORIGIN-1,x
	lda :STACKORIGIN-1+STACKWIDTH,x
	adc :eax+1
	sta :STACKORIGIN-1+STACKWIDTH,x
	dex
	lda :STACKORIGIN,x
	sta Z
	lda :STACKORIGIN+STACKWIDTH,x
	sta Z+1
	dex

; optimize OK (hideout.pas), line = 94

	lda Z
	sta B_CRT.CRT_WRITE_0565.NUM
	lda Z+1
	sta B_CRT.CRT_WRITE_0565.NUM+1
	jsr B_CRT.CRT_WRITE_0565

; optimize FAIL ('CRT_WRITELN', hideout.pas), line = 95

	inx
	mva #$9D :STACKORIGIN,x
	mva #$0D :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN

; optimize OK (hideout.pas), line = 96

	lda M
	asl @
	asl @
	tay
	lda adr.PLMONEY,y
	add Z
	sta :STACKORIGIN+10
	lda adr.PLMONEY+1,y
	adc Z+1
	sta :STACKORIGIN+STACKWIDTH+10
	lda adr.PLMONEY+2,y
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+10
	lda adr.PLMONEY+3,y
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+10
	lda :STACKORIGIN+10
	sta adr.PLMONEY,y
	lda :STACKORIGIN+STACKWIDTH+10
	sta adr.PLMONEY+1,y
	lda :STACKORIGIN+STACKWIDTH*2+10
	sta adr.PLMONEY+2,y
	lda :STACKORIGIN+STACKWIDTH*3+10
	sta adr.PLMONEY+3,y

; optimize OK (hideout.pas), line = 97

	lda K
	asl @
	asl @
	tay
	lda adr.PLMONEY,y
	sub Z
	sta :STACKORIGIN+10
	lda adr.PLMONEY+1,y
	sbc Z+1
	sta :STACKORIGIN+STACKWIDTH+10
	lda adr.PLMONEY+2,y
	sbc #$00
	sta :STACKORIGIN+STACKWIDTH*2+10
	lda adr.PLMONEY+3,y
	sbc #$00
	sta :STACKORIGIN+STACKWIDTH*3+10
	lda :STACKORIGIN+10
	sta adr.PLMONEY,y
	lda :STACKORIGIN+STACKWIDTH+10
	sta adr.PLMONEY+1,y
	lda :STACKORIGIN+STACKWIDTH*2+10
	sta adr.PLMONEY+2,y
	lda :STACKORIGIN+STACKWIDTH*3+10
	sta adr.PLMONEY+3,y

; optimize OK (hideout.pas), line = 99

	ldy K
	lda adr.PLALCOHOL,y
	jeq l_3AE6

; optimize OK (hideout.pas), line = 101

	lda W
	cmp #$01
	jne l_3AF9

; optimize FAIL ('CRT_WRITELN', hideout.pas), line = 102

	inx
	mva LOC_STRING_22 :STACKORIGIN,x
	mva LOC_STRING_22+1 :STACKORIGIN+STACKWIDTH,x
	jmp l_3B06
l_3AF9

; optimize FAIL ('CRT_WRITELN', hideout.pas), line = 104

	inx
	mva LOC_STRING_23 :STACKORIGIN,x
	mva LOC_STRING_23+1 :STACKORIGIN+STACKWIDTH,x
l_3B06
	jsr CRT_WRITELN

; optimize OK (hideout.pas), line = 105

	ldy M
	lda adr.PLALCOHOL,y
	ldy K
	add adr.PLALCOHOL,y
	ldy M
	sta adr.PLALCOHOL,y

; optimize OK (hideout.pas), line = 106

	ldy K
	lda #$00
	sta adr.PLALCOHOL,y

; optimize OK (hideout.pas), line = 107

	lda adr.PLCAR,y
	sta R

; optimize OK (hideout.pas), line = 108

	ldy PL
	lda adr.PLALCOHOL,y
	sta :STACKORIGIN+9
	ldy R
	lda adr.CARCARGO,y
	cmp :STACKORIGIN+9
	jcs l_3B48
	ldy PL
	sta adr.PLALCOHOL,y
l_3B48
l_3AE6

; optimize OK (hideout.pas), line = 111

	ldy K
	lda adr.PLCAR,y
	jeq l_3B6E

; optimize OK (hideout.pas), line = 113

	lda W
	cmp #$01
	jne l_3B81

; optimize FAIL ('CRT_WRITELN', hideout.pas), line = 114

	inx
	mva LOC_STRING_24 :STACKORIGIN,x
	mva LOC_STRING_24+1 :STACKORIGIN+STACKWIDTH,x
	jmp l_3B8E
l_3B81

; optimize FAIL ('CRT_WRITELN', hideout.pas), line = 116

	inx
	mva LOC_STRING_25 :STACKORIGIN,x
	mva LOC_STRING_25+1 :STACKORIGIN+STACKWIDTH,x
l_3B8E
	jsr CRT_WRITELN

; optimize OK (hideout.pas), line = 117

	ldy K
	lda #$00
	sta adr.PLCAR,y
l_3B6E

; optimize OK (hideout.pas), line = 119

	ldy M
	lda adr.PLNEWPOINTS,y
	add #$03
	sta adr.PLNEWPOINTS,y

; optimize OK (hideout.pas), line = 120

	ldy K
	lda adr.PLNEWPOINTS,y
	sub #$01
	sta adr.PLNEWPOINTS,y

; optimize FAIL ('WAITFORKEY', hideout.pas), line = 121

	jsr WAITFORKEY

; optimize OK (hideout.pas), line = 122

	lda #$11
	sta RESULT
	jmp @exit
l_38ED

; optimize OK (hideout.pas), line = 128

	mvy CHOICE+1 :bp+1
	ldy CHOICE
	lda (:bp),y
	cmp #$01
	jne l_3BD3

; optimize OK (hideout.pas), line = 130

	ldy CURRENTSUBLOCATION
	lda adr.PLRENT,y
	cmp #$63
	jeq l_3BE9

; optimize FAIL ('B_CRT.CRT_NEWLINE_06EB', hideout.pas), line = 132

	jsr B_CRT.CRT_NEWLINE_06EB

; optimize OK (hideout.pas), line = 133

	ldy CURRENTSUBLOCATION
	lda adr.PLRENT,y
	cmp CURRENTPLAYER
	jne l_3C02

; optimize FAIL ('B_CRT.CRT_WRITE_053A', hideout.pas), line = 134

	inx
	mva LOC_STRING_1 :STACKORIGIN,x
	mva LOC_STRING_1+1 :STACKORIGIN+STACKWIDTH,x
	jmp l_3C0F
l_3C02

; optimize FAIL ('B_CRT.CRT_WRITE_053A', hideout.pas), line = 136

	inx
	mva LOC_STRING_2 :STACKORIGIN,x
	mva LOC_STRING_2+1 :STACKORIGIN+STACKWIDTH,x
l_3C0F
	jsr B_CRT.CRT_WRITE_053A

; optimize FAIL ('WAITFORKEY', hideout.pas), line = 137

	jsr WAITFORKEY
	jmp @exit
l_3BE9

; optimize OK (hideout.pas), line = 143

	lda #$00
	sta R

l_3C1E
; --- ForToDoCondition
	ldy R
	cpy #$04
	jcs l_3C2C

; optimize OK (hideout.pas), line = 144

	lda adr.PLRENT,y
	cmp CURRENTPLAYER
	jne l_3C43

; optimize FAIL ('B_CRT.CRT_WRITE_053A', hideout.pas), line = 146

	inx
	mva LOC_STRING_3 :STACKORIGIN,x
	mva LOC_STRING_3+1 :STACKORIGIN+STACKWIDTH,x
	jsr B_CRT.CRT_WRITE_053A

; optimize FAIL ('WAITFORKEY', hideout.pas), line = 147

	jsr WAITFORKEY
	jmp @exit
l_3C43

; --- ForToDoEpilog
	inc R
	jne l_3C1E
l_3C2C
l_3BD3

; optimize OK (hideout.pas), line = 152

	mvy CHOICE+1 :bp+1
	ldy CHOICE
	lda (:bp),y
	cmp #$02
	jne l_3C63

; optimize OK (hideout.pas), line = 154

	ldy CURRENTSUBLOCATION
	lda adr.PLRENT,y
	cmp CURRENTPLAYER
	jeq l_3C7B

; optimize FAIL ('B_CRT.CRT_WRITE_053A', hideout.pas), line = 156

	inx
	mva LOC_STRING_4 :STACKORIGIN,x
	mva LOC_STRING_4+1 :STACKORIGIN+STACKWIDTH,x
	jsr B_CRT.CRT_WRITE_053A

; optimize FAIL ('WAITFORKEY', hideout.pas), line = 157

	jsr WAITFORKEY
	jmp @exit
l_3C7B
l_3C63

; optimize OK (hideout.pas), line = 162

	lda #$32
	sta PRICE

; optimize OK (hideout.pas), line = 163

	lda CURRENTSUBLOCATION
	cmp #$02
	jcc l_3C9A

; optimize OK (hideout.pas), line = 164

	lda PRICE
	add #$32
	sta PRICE
l_3C9A

; optimize OK (hideout.pas), line = 165

	lda CURRENTSUBLOCATION
	cmp #$01
	jne l_3CB9

; optimize OK (hideout.pas), line = 166

	lda PRICE
	add #$32
	sta PRICE
l_3CB9

; optimize FAIL ('B_CRT.CRT_WRITE_053A', hideout.pas), line = 168

	inx
	mva LOC_STRING_5 :STACKORIGIN,x
	mva LOC_STRING_5+1 :STACKORIGIN+STACKWIDTH,x
	jsr B_CRT.CRT_WRITE_053A

; optimize OK (hideout.pas), line = 169

	lda PRICE
	jsr B_CRT.CRT_WRITE_055B

; optimize FAIL ('B_CRT.CRT_WRITE_053A', hideout.pas), line = 170

	inx
	mva LOC_STRING_6 :STACKORIGIN,x
	mva LOC_STRING_6+1 :STACKORIGIN+STACKWIDTH,x
	jsr B_CRT.CRT_WRITE_053A

; optimize FAIL ('B_CRT.CRT_NEWLINE_06EB', hideout.pas), line = 171

	jsr B_CRT.CRT_NEWLINE_06EB

; optimize FAIL ('B_CRT.CRT_WRITE_053A', hideout.pas), line = 172

	inx
	mva LOC_STRING_7 :STACKORIGIN,x
	mva LOC_STRING_7+1 :STACKORIGIN+STACKWIDTH,x
	jsr B_CRT.CRT_WRITE_053A

; optimize FAIL ('B_CRT.CRT_NEWLINE_06EB', hideout.pas), line = 173

	jsr B_CRT.CRT_NEWLINE_06EB

; optimize FAIL ('B_CRT.CRT_NEWLINE_06EB', hideout.pas), line = 174

	jsr B_CRT.CRT_NEWLINE_06EB

; optimize OK (hideout.pas), line = 176

	ldy CURRENTPLAYER
	lda adr.PLRENTMONTHS,y
	jeq l_3CEB

; optimize FAIL ('B_CRT.CRT_NEWLINE_06EB', hideout.pas), line = 178

	jsr B_CRT.CRT_NEWLINE_06EB

; optimize FAIL ('B_CRT.CRT_WRITE_053A', hideout.pas), line = 179

	inx
	mva LOC_STRING_8 :STACKORIGIN,x
	mva LOC_STRING_8+1 :STACKORIGIN+STACKWIDTH,x
	jsr B_CRT.CRT_WRITE_053A

; optimize OK (hideout.pas), line = 180

	ldy CURRENTPLAYER
	lda adr.PLRENTMONTHS,y
	jsr B_CRT.CRT_WRITE_055B

; optimize FAIL ('B_CRT.CRT_WRITE_053A', hideout.pas), line = 181

	inx
	mva LOC_STRING_9 :STACKORIGIN,x
	mva LOC_STRING_9+1 :STACKORIGIN+STACKWIDTH,x
	jsr B_CRT.CRT_WRITE_053A

; optimize FAIL ('B_CRT.CRT_NEWLINE_06EB', hideout.pas), line = 182

	jsr B_CRT.CRT_NEWLINE_06EB
l_3CEB

; optimize FAIL ('B_CRT.CRT_WRITE_053A', hideout.pas), line = 184

	inx
	mva LOC_STRING_10 :STACKORIGIN,x
	mva LOC_STRING_10+1 :STACKORIGIN+STACKWIDTH,x
	jsr B_CRT.CRT_WRITE_053A

; optimize OK (hideout.pas), line = 185

	lda #$00
	sta READVALUE.MINVALUE
	sta READVALUE.MINVALUE+1
	lda #$63
	sta READVALUE.MAXVALUE
	lda #$00
	sta READVALUE.MAXVALUE+1
	jsr READVALUE
	lda READVALUE.RESULT
	sta M

; optimize OK (hideout.pas), line = 187

	jne l_3D18
	jmp @exit
l_3D18

; optimize OK (hideout.pas), line = 189

	lda M
	sta :ecx
	lda PRICE
	sta :eax
	.ifdef fmulinit
	fmulu_8
	els
	imulCL
	eif
	lda :eax
	sta PAYMONEY.PRICE
	lda :eax+1
	sta PAYMONEY.PRICE+1
	jsr PAYMONEY
	lda PAYMONEY.RESULT
	jne l_3D34
	jmp @exit
l_3D34

; optimize OK (hideout.pas), line = 192

	ldy CURRENTPLAYER
	lda adr.PLRENTMONTHS,y
	add M
	sta adr.PLRENTMONTHS,y

; optimize OK (hideout.pas), line = 193

	lda PRICE
	sta adr.PLRENTCOST,y

; optimize OK (hideout.pas), line = 194

	ldy CURRENTSUBLOCATION
	lda CURRENTPLAYER
	sta adr.PLRENT,y

; optimize FAIL ('B_CRT.CRT_NEWLINE_06EB', hideout.pas), line = 196

	jsr B_CRT.CRT_NEWLINE_06EB

; optimize FAIL ('B_CRT.CRT_NEWLINE_06EB', hideout.pas), line = 197

	jsr B_CRT.CRT_NEWLINE_06EB

; optimize FAIL ('B_CRT.CRT_WRITE_053A', hideout.pas), line = 198

	inx
	mva LOC_STRING_11 :STACKORIGIN,x
	mva LOC_STRING_11+1 :STACKORIGIN+STACKWIDTH,x
	jsr B_CRT.CRT_WRITE_053A

; optimize FAIL ('WAITFORKEY', hideout.pas), line = 199

	jsr WAITFORKEY
@exit

; ------------------------------------------------------------

CHOICE	= DATAORIGIN+$15FB
RESULT	= DATAORIGIN+$15FD
R	= DATAORIGIN+$15FE
K	= DATAORIGIN+$15FF
J	= DATAORIGIN+$1600
W	= DATAORIGIN+$1601
M	= DATAORIGIN+$1602
PRICE	= DATAORIGIN+$1603
PL	= DATAORIGIN+$1604
Z	= DATAORIGIN+$1605

@VarData	= CHOICE
@VarDataSize	= 11

	rts						; ret
.endl

.local	LOANSHARKCHOICES				; FUNCTION

; optimize OK (loanshark.pas), line = 10

	lda #$04
	sta RESULT

; optimize FAIL ('SHOWLOCATIONHEADER', loanshark.pas), line = 11

	jsr SHOWLOCATIONHEADER

; optimize OK (loanshark.pas), line = 13

	mvy CHOICE+1 :bp+1
	ldy CHOICE
	lda (:bp),y
	cmp #$01
	jne l_3D7C

; optimize OK (loanshark.pas), line = 15

	lda CURRENTPLAYER
	asl @
	tay
	lda adr.PLLOAN+1,y
	jmi l_3D91
	ora adr.PLLOAN,y
	jeq l_3D91

; optimize FAIL ('B_CRT.CRT_WRITE_053A', loanshark.pas), line = 17

	inx
	mva LOC_STRING_1 :STACKORIGIN,x
	mva LOC_STRING_1+1 :STACKORIGIN+STACKWIDTH,x
	jsr B_CRT.CRT_WRITE_053A

; optimize FAIL ('B_CRT.CRT_READCHAR', loanshark.pas), line = 18

	jsr B_CRT.CRT_READCHAR
	jmp @exit
l_3D91

; optimize OK (loanshark.pas), line = 22

	ldy CURRENTPLAYER
	lda adr.PLLOANSHARK,y
	cmp #$63
	jeq l_3DAD

; optimize FAIL ('CRT_WRITELN', loanshark.pas), line = 24

	inx
	mva LOC_STRING_37 :STACKORIGIN,x
	mva LOC_STRING_37+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN

; optimize FAIL ('CRT_WRITELN', loanshark.pas), line = 25

	inx
	mva LOC_STRING_38 :STACKORIGIN,x
	mva LOC_STRING_38+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN

; optimize FAIL ('WAITFORKEY', loanshark.pas), line = 26

	jsr WAITFORKEY
	jmp @exit
l_3DAD

; optimize FAIL ('B_CRT.CRT_WRITE_053A', loanshark.pas), line = 30

	inx
	mva LOC_STRING_2 :STACKORIGIN,x
	mva LOC_STRING_2+1 :STACKORIGIN+STACKWIDTH,x
	jsr B_CRT.CRT_WRITE_053A

; optimize FAIL ('B_CRT.CRT_NEWLINE_06EB', loanshark.pas), line = 31

	jsr B_CRT.CRT_NEWLINE_06EB

; optimize FAIL ('B_CRT.CRT_WRITE_053A', loanshark.pas), line = 32

	inx
	mva LOC_STRING_3 :STACKORIGIN,x
	mva LOC_STRING_3+1 :STACKORIGIN+STACKWIDTH,x
	jsr B_CRT.CRT_WRITE_053A

; optimize OK (loanshark.pas), line = 33

	lda #$00
	sta READVALUE.MINVALUE
	sta READVALUE.MINVALUE+1
	lda #$88
	sta READVALUE.MAXVALUE
	lda #$13
	sta READVALUE.MAXVALUE+1
	jsr READVALUE
	lda READVALUE.RESULT
	sta LOAN
	lda READVALUE.RESULT+1
	sta LOAN+1

; optimize OK (loanshark.pas), line = 34

	ora LOAN
	jne l_3DD5
	jmp @exit
l_3DD5

; optimize FAIL ('B_CRT.CRT_NEWLINE_06EB', loanshark.pas), line = 37

	jsr B_CRT.CRT_NEWLINE_06EB

; optimize FAIL ('B_CRT.CRT_NEWLINE_06EB', loanshark.pas), line = 38

	jsr B_CRT.CRT_NEWLINE_06EB

; optimize FAIL ('CRT_WRITELN', loanshark.pas), line = 39

	inx
	mva LOC_STRING_4 :STACKORIGIN,x
	mva LOC_STRING_4+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN

; optimize FAIL ('CRT_WRITELN', loanshark.pas), line = 40

	inx
	mva LOC_STRING_5 :STACKORIGIN,x
	mva LOC_STRING_5+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN

; optimize OK (loanshark.pas), line = 41

	lda LOAN
	sta :STACKORIGIN+11
	ldy #$00
	lda LOAN+1
	spl
	dey
	sta :STACKORIGIN+STACKWIDTH+11
	sty :STACKORIGIN+STACKWIDTH*2+11
	sty :STACKORIGIN+STACKWIDTH*3+11
	lsr :STACKORIGIN+STACKWIDTH*3+11
	ror :STACKORIGIN+STACKWIDTH*2+11
	ror :STACKORIGIN+STACKWIDTH+11
	ror :STACKORIGIN+11
	lsr :STACKORIGIN+STACKWIDTH*3+11
	ror :STACKORIGIN+STACKWIDTH*2+11
	ror :STACKORIGIN+STACKWIDTH+11
	ror :STACKORIGIN+11
	lsr :STACKORIGIN+STACKWIDTH*3+11
	ror :STACKORIGIN+STACKWIDTH*2+11
	ror :STACKORIGIN+STACKWIDTH+11
	ror :STACKORIGIN+11
	lsr :STACKORIGIN+STACKWIDTH*3+11
	ror :STACKORIGIN+STACKWIDTH*2+11
	ror :STACKORIGIN+STACKWIDTH+11
	ror :STACKORIGIN+11
	lda CURRENTPLAYER
	asl @
	tay
	lda LOAN
	add :STACKORIGIN+11
	sta adr.PLLOAN,y
	lda LOAN+1
	adc :STACKORIGIN+STACKWIDTH+11
	sta adr.PLLOAN+1,y

; optimize FAIL (2, loanshark.pas), line = 42

	inx
	mva CURRENTPLAYER :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	inx
	mva #$06 :STACKORIGIN,x
	lda #$04
	jsr SYSTEM.RANDOM_02E9
	lda :STACKORIGIN,x
	add SYSTEM.RANDOM_02E9.RESULT
	ldy :STACKORIGIN-1,x
	sta adr.PLLOANTIME,y
	dex
	dex

; optimize OK (loanshark.pas), line = 43

	lda LOAN
	sta ADDMONEY.AMOUNT
	lda LOAN+1
	sta ADDMONEY.AMOUNT+1
	jsr ADDMONEY

; optimize FAIL ('WAITFORKEY', loanshark.pas), line = 44

	jsr WAITFORKEY
	jmp @exit
l_3D7C

; optimize OK (loanshark.pas), line = 48

	mvy CHOICE+1 :bp+1
	ldy CHOICE
	lda (:bp),y
	cmp #$02
	jne l_3E15

; optimize OK (loanshark.pas), line = 50

	lda CURRENTPLAYER
	asl @
	tay
	lda adr.PLLOAN+1,y
	bne @+
	lda adr.PLLOAN,y
@
	jne l_3E2A

; optimize FAIL ('CRT_WRITELN', loanshark.pas), line = 52

	inx
	mva LOC_STRING_6 :STACKORIGIN,x
	mva LOC_STRING_6+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN

; optimize FAIL ('WAITFORKEY', loanshark.pas), line = 53

	jsr WAITFORKEY
	jmp @exit
l_3E2A

; optimize FAIL ('CRT_WRITELN', loanshark.pas), line = 57

	inx
	mva LOC_STRING_7 :STACKORIGIN,x
	mva LOC_STRING_7+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN

; optimize FAIL ('B_CRT.CRT_WRITE_053A', loanshark.pas), line = 58

	inx
	mva #$31 :STACKORIGIN,x
	mva #$0E :STACKORIGIN+STACKWIDTH,x
	jsr B_CRT.CRT_WRITE_053A

; optimize OK (loanshark.pas), line = 59

	lda CURRENTPLAYER
	asl @
	tay
	lda adr.PLLOAN,y
	sta B_CRT.CRT_WRITE_056E.NUM
	lda adr.PLLOAN+1,y
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #$00
	lda :STACKORIGIN+STACKWIDTH+9
	spl
	dey
	sta B_CRT.CRT_WRITE_056E.NUM+1
	sty B_CRT.CRT_WRITE_056E.NUM+2
	sty B_CRT.CRT_WRITE_056E.NUM+3
	jsr B_CRT.CRT_WRITE_056E

; optimize FAIL ('B_CRT.CRT_WRITE_053A', loanshark.pas), line = 60

	inx
	mva #$26 :STACKORIGIN,x
	mva #$0E :STACKORIGIN+STACKWIDTH,x
	jsr B_CRT.CRT_WRITE_053A

; optimize OK (loanshark.pas), line = 61

	lda CURRENTPLAYER
	asl @
	tay
	lda adr.PLLOAN,y
	sta READVALUE.MAXVALUE
	lda adr.PLLOAN+1,y
	sta READVALUE.MAXVALUE+1
	lda #$00
	sta READVALUE.MINVALUE
	sta READVALUE.MINVALUE+1
	jsr READVALUE
	lda READVALUE.RESULT
	sta LOAN
	lda READVALUE.RESULT+1
	sta LOAN+1

; optimize OK (loanshark.pas), line = 62

	ora LOAN
	jne l_3E59
	jmp @exit
l_3E59

; optimize OK (loanshark.pas), line = 65

	lda LOAN
	sta PAYMONEY.PRICE
	lda LOAN+1
	sta PAYMONEY.PRICE+1
	jsr PAYMONEY
	lda PAYMONEY.RESULT
	jne l_3E6E
	jmp @exit
l_3E6E

; optimize OK (loanshark.pas), line = 66

	lda CURRENTPLAYER
	asl @
	tay
	lda adr.PLLOAN,y
	sub LOAN
	sta adr.PLLOAN,y
	lda adr.PLLOAN+1,y
	sbc LOAN+1
	sta adr.PLLOAN+1,y

; optimize OK (loanshark.pas), line = 67

	cmp #$00
	bne @+
	lda adr.PLLOAN,y
@
	jne l_3E95

; optimize FAIL ('B_CRT.CRT_NEWLINE_06EB', loanshark.pas), line = 69

	jsr B_CRT.CRT_NEWLINE_06EB

; optimize FAIL ('B_CRT.CRT_NEWLINE_06EB', loanshark.pas), line = 70

	jsr B_CRT.CRT_NEWLINE_06EB

; optimize OK (loanshark.pas), line = 71

	ldy CURRENTPLAYER
	lda #$00
	sta adr.PLLOANTIME,y

; optimize FAIL ('CRT_WRITELN', loanshark.pas), line = 72

	inx
	mva LOC_STRING_8 :STACKORIGIN,x
	mva LOC_STRING_8+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN
	jmp l_3EAB
l_3E95

; optimize FAIL ('B_CRT.CRT_NEWLINE_06EB', loanshark.pas), line = 76

	jsr B_CRT.CRT_NEWLINE_06EB

; optimize FAIL ('B_CRT.CRT_NEWLINE_06EB', loanshark.pas), line = 77

	jsr B_CRT.CRT_NEWLINE_06EB

; optimize FAIL ('B_CRT.CRT_WRITE_053A', loanshark.pas), line = 78

	inx
	mva LOC_STRING_9 :STACKORIGIN,x
	mva LOC_STRING_9+1 :STACKORIGIN+STACKWIDTH,x
	jsr B_CRT.CRT_WRITE_053A

; optimize OK (loanshark.pas), line = 79

	lda CURRENTPLAYER
	asl @
	tay
	lda adr.PLLOAN,y
	sta B_CRT.CRT_WRITE_056E.NUM
	lda adr.PLLOAN+1,y
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #$00
	lda :STACKORIGIN+STACKWIDTH+9
	spl
	dey
	sta B_CRT.CRT_WRITE_056E.NUM+1
	sty B_CRT.CRT_WRITE_056E.NUM+2
	sty B_CRT.CRT_WRITE_056E.NUM+3
	jsr B_CRT.CRT_WRITE_056E

; optimize FAIL ('B_CRT.CRT_WRITE_053A', loanshark.pas), line = 80

	inx
	mva #$FC :STACKORIGIN,x
	mva #$0D :STACKORIGIN+STACKWIDTH,x
	jsr B_CRT.CRT_WRITE_053A

; optimize FAIL ('B_CRT.CRT_WRITE_053A', loanshark.pas), line = 81

	inx
	mva LOC_STRING_10 :STACKORIGIN,x
	mva LOC_STRING_10+1 :STACKORIGIN+STACKWIDTH,x
	jsr B_CRT.CRT_WRITE_053A
l_3EAB

; optimize FAIL ('WAITFORKEY', loanshark.pas), line = 83

	jsr WAITFORKEY
l_3E15

; optimize OK (loanshark.pas), line = 87

	mvy CHOICE+1 :bp+1
	ldy CHOICE
	lda (:bp),y
	cmp #$03
	jne l_3ED0

; optimize OK (loanshark.pas), line = 90

	lda CURRENTPLAYER
	asl @
	tay
	lda adr.PLLOAN+1,y
	bne @+
	lda adr.PLLOAN,y
@
	jeq l_3EE5

; optimize FAIL ('CRT_WRITELN', loanshark.pas), line = 91

	inx
	mva LOC_STRING_21 :STACKORIGIN,x
	mva LOC_STRING_21+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN

; optimize FAIL ('WAITFORKEY', loanshark.pas), line = 92

	jsr WAITFORKEY
	jmp @exit
l_3EE5

; optimize OK (loanshark.pas), line = 96

	ldy CURRENTPLAYER
	lda adr.PLLOANSHARK,y
	cmp CURRENTSUBLOCATION
	jne l_3F03

; optimize OK (loanshark.pas), line = 99

	lda #$0B
	jsr SYSTEM.RANDOM_02E9
	inx
	mva SYSTEM.RANDOM_02E9.RESULT :STACKORIGIN,x
	inx
	mva #$64 :STACKORIGIN,x
	jsr imulBYTE
	lda :eax
	add #$94
	sta :STACKORIGIN-1,x
	lda :eax+1
	adc #$11
	sta :STACKORIGIN-1+STACKWIDTH,x
	dex
	lda :STACKORIGIN,x
	sta P
	lda :STACKORIGIN+STACKWIDTH,x
	sta P+1

; optimize FAIL ('B_CRT.CRT_WRITE_053A', loanshark.pas), line = 100

	mva LOC_STRING_22 :STACKORIGIN,x
	mva LOC_STRING_22+1 :STACKORIGIN+STACKWIDTH,x
	jsr B_CRT.CRT_WRITE_053A

; optimize OK (loanshark.pas), line = 101

	lda P
	sta B_CRT.CRT_WRITE_0565.NUM
	lda P+1
	sta B_CRT.CRT_WRITE_0565.NUM+1
	jsr B_CRT.CRT_WRITE_0565

; optimize FAIL ('CRT_WRITELN', loanshark.pas), line = 102

	inx
	mva LOC_STRING_23 :STACKORIGIN,x
	mva LOC_STRING_23+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN

; optimize FAIL ('CRT_WRITELN', loanshark.pas), line = 103

	inx
	mva LOC_STRING_24 :STACKORIGIN,x
	mva LOC_STRING_24+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN

; optimize FAIL ('GETYESNO', loanshark.pas), line = 104

	jsr GETYESNO
	lda GETYESNO.RESULT
	jne l_3F2D
	jmp @exit
l_3F2D

; optimize OK (loanshark.pas), line = 105

	lda P
	sta ADDMONEY.AMOUNT
	lda P+1
	sta ADDMONEY.AMOUNT+1
	jsr ADDMONEY

; optimize OK (loanshark.pas), line = 106

	ldy CURRENTPLAYER
	lda #$63
	sta adr.PLLOANSHARK,y

; optimize FAIL ('B_CRT.CRT_NEWLINE_06EB', loanshark.pas), line = 107

	jsr B_CRT.CRT_NEWLINE_06EB

; optimize FAIL ('CRT_WRITELN', loanshark.pas), line = 108

	inx
	mva LOC_STRING_25 :STACKORIGIN,x
	mva LOC_STRING_25+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN

; optimize FAIL ('WAITFORKEY', loanshark.pas), line = 109

	jsr WAITFORKEY
	jmp @exit
l_3F03

; optimize OK (loanshark.pas), line = 114

	ldy CURRENTPLAYER
	lda adr.PLLOANSHARK,y
	cmp #$63
	jeq l_3F5D

; optimize FAIL ('B_CRT.CRT_WRITE_053A', loanshark.pas), line = 116

	inx
	mva LOC_STRING_11 :STACKORIGIN,x
	mva LOC_STRING_11+1 :STACKORIGIN+STACKWIDTH,x
	jsr B_CRT.CRT_WRITE_053A

; optimize FAIL ('WAITFORKEY', loanshark.pas), line = 117

	jsr WAITFORKEY
	jmp @exit
l_3F5D

; optimize OK (loanshark.pas), line = 120

	lda #$00
	sta R

l_3F6D
; --- ForToDoCondition
	ldy R
	cpy #$04
	jcs l_3F7B

; optimize OK (loanshark.pas), line = 122

	lda adr.PLLOANSHARK,y
	cmp CURRENTSUBLOCATION
	jne l_3F92

; optimize FAIL ('B_CRT.CRT_WRITE_053A', loanshark.pas), line = 123

	inx
	mva LOC_STRING_26 :STACKORIGIN,x
	mva LOC_STRING_26+1 :STACKORIGIN+STACKWIDTH,x
	jsr B_CRT.CRT_WRITE_053A

; optimize OK (loanshark.pas), line = 124

	lda R
	asl @
	asl @
	asl @
	sta K

; optimize FAIL ('B_CRT.CRT_WRITE_053A', loanshark.pas), line = 125

	inx
	lda K
	asl @
	tay
	lda adr.GANGSTERNAMES,y
	sta :STACKORIGIN,x
	lda adr.GANGSTERNAMES+1,y
	sta :STACKORIGIN+STACKWIDTH,x
	jsr B_CRT.CRT_WRITE_053A

; optimize FAIL ('CRT_WRITELN', loanshark.pas), line = 126

	inx
	mva #$36 :STACKORIGIN,x
	mva #$0E :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN

; optimize FAIL ('WAITFORKEY', loanshark.pas), line = 127

	jsr WAITFORKEY
	jmp @exit
l_3F92

; --- ForToDoEpilog
	inc R
	jne l_3F6D
l_3F7B

; optimize OK (loanshark.pas), line = 133

	lda #$0B
	jsr SYSTEM.RANDOM_02E9
	inx
	mva SYSTEM.RANDOM_02E9.RESULT :STACKORIGIN,x
	inx
	mva #$64 :STACKORIGIN,x
	jsr imulBYTE
	lda :eax
	add #$88
	sta :STACKORIGIN-1,x
	lda :eax+1
	adc #$13
	sta :STACKORIGIN-1+STACKWIDTH,x
	dex
	lda :STACKORIGIN,x
	sta P
	lda :STACKORIGIN+STACKWIDTH,x
	sta P+1

; optimize FAIL ('B_CRT.CRT_WRITE_053A', loanshark.pas), line = 134

	mva LOC_STRING_27 :STACKORIGIN,x
	mva LOC_STRING_27+1 :STACKORIGIN+STACKWIDTH,x
	jsr B_CRT.CRT_WRITE_053A

; optimize OK (loanshark.pas), line = 135

	lda P
	sta B_CRT.CRT_WRITE_0565.NUM
	lda P+1
	sta B_CRT.CRT_WRITE_0565.NUM+1
	jsr B_CRT.CRT_WRITE_0565

; optimize FAIL ('CRT_WRITELN', loanshark.pas), line = 136

	inx
	mva LOC_STRING_28 :STACKORIGIN,x
	mva LOC_STRING_28+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN

; optimize FAIL ('CRT_WRITELN', loanshark.pas), line = 137

	inx
	mva LOC_STRING_29 :STACKORIGIN,x
	mva LOC_STRING_29+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN

; optimize FAIL ('GETYESNO', loanshark.pas), line = 138

	jsr GETYESNO
	lda GETYESNO.RESULT
	jne l_3FD9
	jmp @exit
l_3FD9

; optimize OK (loanshark.pas), line = 139

	lda P
	sta PAYMONEY.PRICE
	lda P+1
	sta PAYMONEY.PRICE+1
	jsr PAYMONEY
	lda PAYMONEY.RESULT
	jne l_3FEE
	jmp @exit
l_3FEE

; optimize OK (loanshark.pas), line = 140

	ldy CURRENTPLAYER
	lda CURRENTSUBLOCATION
	sta adr.PLLOANSHARK,y

; optimize FAIL ('B_CRT.CRT_NEWLINE_06EB', loanshark.pas), line = 141

	jsr B_CRT.CRT_NEWLINE_06EB

; optimize FAIL ('CRT_WRITELN', loanshark.pas), line = 142

	inx
	mva LOC_STRING_30 :STACKORIGIN,x
	mva LOC_STRING_30+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN

; optimize FAIL ('WAITFORKEY', loanshark.pas), line = 143

	jsr WAITFORKEY
l_3F48
l_3ED0

; optimize OK (loanshark.pas), line = 148

	mvy CHOICE+1 :bp+1
	ldy CHOICE
	lda (:bp),y
	cmp #$04
	jne l_4013

; optimize OK (loanshark.pas), line = 150

	ldy CURRENTPLAYER
	lda adr.PLLOANSHARK,y
	cmp CURRENTSUBLOCATION
	jeq l_402B

; optimize FAIL ('B_CRT.CRT_WRITE_053A', loanshark.pas), line = 152

	inx
	mva LOC_STRING_12 :STACKORIGIN,x
	mva LOC_STRING_12+1 :STACKORIGIN+STACKWIDTH,x
	jsr B_CRT.CRT_WRITE_053A

; optimize FAIL ('WAITFORKEY', loanshark.pas), line = 153

	jsr WAITFORKEY
	jmp @exit
l_402B

; optimize FAIL ('B_CRT.CRT_WRITE_053A', loanshark.pas), line = 156

	inx
	mva LOC_STRING_31 :STACKORIGIN,x
	mva LOC_STRING_31+1 :STACKORIGIN+STACKWIDTH,x
	jsr B_CRT.CRT_WRITE_053A

; optimize OK (loanshark.pas), line = 157

	lda CURRENTPLAYER
	asl @
	tay
	lda adr.PLLOANINVEST,y
	sta B_CRT.CRT_WRITE_0565.NUM
	lda adr.PLLOANINVEST+1,y
	sta B_CRT.CRT_WRITE_0565.NUM+1
	jsr B_CRT.CRT_WRITE_0565

; optimize FAIL ('CRT_WRITELN', loanshark.pas), line = 158

	inx
	mva LOC_STRING_32 :STACKORIGIN,x
	mva LOC_STRING_32+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN

; optimize FAIL ('CRT_WRITELN', loanshark.pas), line = 159

	inx
	mva LOC_STRING_33 :STACKORIGIN,x
	mva LOC_STRING_33+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN

; optimize FAIL ('B_CRT.CRT_WRITE_053A', loanshark.pas), line = 160

	inx
	mva LOC_STRING_34 :STACKORIGIN,x
	mva LOC_STRING_34+1 :STACKORIGIN+STACKWIDTH,x
	jsr B_CRT.CRT_WRITE_053A

; optimize OK (loanshark.pas), line = 162

	lda CURRENTPLAYER
	asl @
	tay
	lda #$88
	sub adr.PLLOANINVEST,y
	sta READVALUE.MAXVALUE
	lda #$13
	sbc adr.PLLOANINVEST+1,y
	sta READVALUE.MAXVALUE+1
	lda #$00
	sub adr.PLLOANINVEST,y
	sta READVALUE.MINVALUE
	lda #$00
	sbc adr.PLLOANINVEST+1,y
	sta READVALUE.MINVALUE+1
	jsr READVALUE
	lda READVALUE.RESULT
	sta LOAN
	lda READVALUE.RESULT+1
	sta LOAN+1

; optimize OK (loanshark.pas), line = 163

	ora LOAN
	jne l_406A
	jmp @exit
l_406A

; optimize OK (loanshark.pas), line = 164

	lda LOAN
	sta PAYMONEY.PRICE
	lda LOAN+1
	sta PAYMONEY.PRICE+1
	jsr PAYMONEY
	lda PAYMONEY.RESULT
	jne l_407F
	jmp @exit
l_407F

; optimize OK (loanshark.pas), line = 165

	lda CURRENTPLAYER
	asl @
	tay
	lda adr.PLLOANINVEST,y
	add LOAN
	sta adr.PLLOANINVEST,y
	lda adr.PLLOANINVEST+1,y
	adc LOAN+1
	sta adr.PLLOANINVEST+1,y

; optimize FAIL ('B_CRT.CRT_NEWLINE_06EB', loanshark.pas), line = 166

	jsr B_CRT.CRT_NEWLINE_06EB

; optimize FAIL ('B_CRT.CRT_WRITE_053A', loanshark.pas), line = 167

	inx
	mva LOC_STRING_35 :STACKORIGIN,x
	mva LOC_STRING_35+1 :STACKORIGIN+STACKWIDTH,x
	jsr B_CRT.CRT_WRITE_053A

; optimize OK (loanshark.pas), line = 168

	lda CURRENTPLAYER
	asl @
	tay
	lda adr.PLLOANINVEST,y
	sta B_CRT.CRT_WRITE_0565.NUM
	lda adr.PLLOANINVEST+1,y
	sta B_CRT.CRT_WRITE_0565.NUM+1
	jsr B_CRT.CRT_WRITE_0565

; optimize FAIL ('B_CRT.CRT_WRITE_053A', loanshark.pas), line = 169

	inx
	mva #$FC :STACKORIGIN,x
	mva #$0D :STACKORIGIN+STACKWIDTH,x
	jsr B_CRT.CRT_WRITE_053A

; optimize FAIL ('CRT_WRITELN', loanshark.pas), line = 170

	inx
	mva LOC_STRING_36 :STACKORIGIN,x
	mva LOC_STRING_36+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN

; optimize FAIL ('WAITFORKEY', loanshark.pas), line = 171

	jsr WAITFORKEY
l_4013

; optimize OK (loanshark.pas), line = 174

	mvy CHOICE+1 :bp+1
	ldy CHOICE
	lda (:bp),y
	cmp #$05
	jne l_40B6

; optimize OK (loanshark.pas), line = 176

	ldy CURRENTPLAYER
	lda adr.PLLOANSHARK,y
	cmp CURRENTSUBLOCATION
	jeq l_40CE

; optimize FAIL ('B_CRT.CRT_WRITE_053A', loanshark.pas), line = 178

	inx
	mva LOC_STRING_12 :STACKORIGIN,x
	mva LOC_STRING_12+1 :STACKORIGIN+STACKWIDTH,x
	jsr B_CRT.CRT_WRITE_053A

; optimize FAIL ('WAITFORKEY', loanshark.pas), line = 179

	jsr WAITFORKEY
	jmp @exit
l_40CE

; optimize OK (loanshark.pas), line = 184

	lda #$00
	sta ALLPAID

; optimize OK (loanshark.pas), line = 185

	lda #$03
	jsr SYSTEM.RANDOM_02E9
	inx
	ldy #1
	lda SYSTEM.RANDOM_02E9.RESULT
	bne @+
	dey
@
	sty :STACKORIGIN,x
	inx
	lda CURRENTPLAYER
	asl @
	tay
	lda adr.PLLOANINVEST,y
	sta :STACKORIGIN,x
	lda adr.PLLOANINVEST+1,y
	sta :STACKORIGIN+STACKWIDTH,x
	inx
	ldy #1
	lda :STACKORIGIN-1+STACKWIDTH,x
	ora :STACKORIGIN-1,x
	bne @+
	dey
@
	dex
	sty :STACKORIGIN,x
	dex
	dex
	lda :STACKORIGIN+1,x
	and :STACKORIGIN+2,x
	jeq l_40F8
	lda #$01
	sta ALLPAID
l_40F8

; optimize OK (loanshark.pas), line = 186

	lda ALLPAID
	jne l_4111

; optimize FAIL ('B_CRT.CRT_WRITE_053A', loanshark.pas), line = 188

	inx
	mva LOC_STRING_13 :STACKORIGIN,x
	mva LOC_STRING_13+1 :STACKORIGIN+STACKWIDTH,x
	jsr B_CRT.CRT_WRITE_053A

; optimize FAIL ('WAITFORKEY', loanshark.pas), line = 189

	jsr WAITFORKEY
	jmp @exit
l_4111

; optimize FAIL ('B_CRT.CRT_WRITE_053A', loanshark.pas), line = 193

	inx
	mva LOC_STRING_14 :STACKORIGIN,x
	mva LOC_STRING_14+1 :STACKORIGIN+STACKWIDTH,x
	jsr B_CRT.CRT_WRITE_053A

; optimize FAIL ('B_CRT.CRT_WRITE_053A', loanshark.pas), line = 194

	inx
	mva LOC_STRING_15 :STACKORIGIN,x
	mva LOC_STRING_15+1 :STACKORIGIN+STACKWIDTH,x
	jsr B_CRT.CRT_WRITE_053A

; optimize FAIL ('B_CRT.CRT_WRITE_053A', loanshark.pas), line = 195

	inx
	mva LOC_STRING_16 :STACKORIGIN,x
	mva LOC_STRING_16+1 :STACKORIGIN+STACKWIDTH,x
	jsr B_CRT.CRT_WRITE_053A

; optimize FAIL ('WAITFORKEY', loanshark.pas), line = 196

	jsr WAITFORKEY

; -------------------  ASM Block 00000168  -------------------

; 
            lda loc_string_17
            sta adr.FP_GANG+$02
            lda loc_string_17+1
            sta adr.FP_GANG+1+$02
        
; optimize OK (loanshark.pas), line = 205

	lda #$01
	sta adr.FP_AI+$01

; optimize OK (loanshark.pas), line = 206

	sta adr.FP_N+$01

; optimize OK (loanshark.pas), line = 207

	lda adr.FP_NAME+$20
	sta @move.dst
	lda adr.FP_NAME+1+$20
	sta @move.dst+1
	lda LOC_STRING_17
	sta @move.src
	lda LOC_STRING_17+1
	sta @move.src+1
	ldy #$00
	lda (@move.src),y
	add #1
	sta @move.cnt
	scc
	iny
	sty @move.cnt+1
	jsr @move

; optimize OK (loanshark.pas), line = 208

	lda #$06
	sta adr.FP_WEAPON+$10

; optimize FAIL (1, loanshark.pas), line = 209

	inx
	mva #$10 :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	lda #$02
	jsr SYSTEM.RANDOM_02E9
	ldy :STACKORIGIN,x
	lda SYSTEM.RANDOM_02E9.RESULT
	sta adr.FP_SEX,y
	dex

; optimize OK (loanshark.pas), line = 210

	lda #$23
	sta adr.FP_ENERGY+$10

; optimize FAIL ('DOFIGHT', loanshark.pas), line = 213

	jsr DOFIGHT
	lda DOFIGHT.RESULT
	cmp #$01
	jne l_4152
	jmp @exit
l_4152

; optimize FAIL (1, loanshark.pas), line = 215

	inx
	mva #$F4 :STACKORIGIN,x
	mva #$01 :STACKORIGIN+STACKWIDTH,x
	lda #$00
	jsr SYSTEM.RANDOM_02E9
	inx
	mva SYSTEM.RANDOM_02E9.RESULT :STACKORIGIN,x
	inx
	mva #$02 :STACKORIGIN,x
	jsr shlEAX_CL.BYTE
	dex
	mva #$00 :STACKORIGIN-1+STACKWIDTH*2,x
	sta :STACKORIGIN-1+STACKWIDTH*3,x
	jsr addAX_CX
	dex
	lda :STACKORIGIN,x
	sta LOAN
	lda :STACKORIGIN+STACKWIDTH,x
	sta LOAN+1
	dex

; optimize FAIL ('B_CRT.CRT_NEWLINE_06EB', loanshark.pas), line = 216

	jsr B_CRT.CRT_NEWLINE_06EB

; optimize FAIL ('SHOWLOCATIONHEADER', loanshark.pas), line = 219

	jsr SHOWLOCATIONHEADER

; optimize FAIL ('CRT_WRITELN', loanshark.pas), line = 220

	inx
	mva LOC_STRING_18 :STACKORIGIN,x
	mva LOC_STRING_18+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN

; optimize FAIL ('B_CRT.CRT_WRITE_053A', loanshark.pas), line = 221

	inx
	mva LOC_STRING_19 :STACKORIGIN,x
	mva LOC_STRING_19+1 :STACKORIGIN+STACKWIDTH,x
	jsr B_CRT.CRT_WRITE_053A

; optimize OK (loanshark.pas), line = 222

	lda LOAN
	sta B_CRT.CRT_WRITE_056E.NUM
	ldy #$00
	lda LOAN+1
	spl
	dey
	sta B_CRT.CRT_WRITE_056E.NUM+1
	sty B_CRT.CRT_WRITE_056E.NUM+2
	sty B_CRT.CRT_WRITE_056E.NUM+3
	jsr B_CRT.CRT_WRITE_056E

; optimize FAIL ('B_CRT.CRT_WRITE_053A', loanshark.pas), line = 223

	inx
	mva LOC_STRING_20 :STACKORIGIN,x
	mva LOC_STRING_20+1 :STACKORIGIN+STACKWIDTH,x
	jsr B_CRT.CRT_WRITE_053A

; optimize FAIL ('WAITFORKEY', loanshark.pas), line = 224

	jsr WAITFORKEY

; optimize OK (loanshark.pas), line = 225

	ldy CURRENTPLAYER
	lda adr.PLNEWPOINTS,y
	add #$02
	sta adr.PLNEWPOINTS,y

; optimize OK (loanshark.pas), line = 226

	lda LOAN
	sta ADDMONEY.AMOUNT
	lda LOAN+1
	sta ADDMONEY.AMOUNT+1
	jsr ADDMONEY
l_40B6
@exit

; ------------------------------------------------------------

CHOICE	= DATAORIGIN+$1607
RESULT	= DATAORIGIN+$1609
R	= DATAORIGIN+$160A
K	= DATAORIGIN+$160B
ALLPAID	= DATAORIGIN+$160C
LOAN	= DATAORIGIN+$160D
P	= DATAORIGIN+$160F
LN	= DATAORIGIN+$1611

@VarData	= CHOICE
@VarDataSize	= 10

	rts						; ret
.endl

.local	POLICECHOICES					; FUNCTION

; optimize OK (police.pas), line = 8

	lda #$05
	sta RESULT

; optimize OK (police.pas), line = 9

	mvy CHOICE+1 :bp+1
	ldy CHOICE
	lda (:bp),y
	cmp #$01
	jne l_41A0

; optimize FAIL ('GOTOCOURT', police.pas), line = 11

	jsr GOTOCOURT

; optimize OK (police.pas), line = 12

	lda #$11
	sta RESULT
	jmp @exit
l_41A0

; optimize OK (police.pas), line = 16

	mvy CHOICE+1 :bp+1
	ldy CHOICE
	lda (:bp),y
	cmp #$02
	jne l_41BA

; optimize FAIL ('SHOWLOCATIONHEADER', police.pas), line = 18

	jsr SHOWLOCATIONHEADER

; optimize FAIL ('CRT_WRITELN', police.pas), line = 19

	inx
	mva LOC_STRING_1 :STACKORIGIN,x
	mva LOC_STRING_1+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN

; optimize FAIL ('B_CRT.CRT_WRITE_053A', police.pas), line = 20

	inx
	mva LOC_STRING_2 :STACKORIGIN,x
	mva LOC_STRING_2+1 :STACKORIGIN+STACKWIDTH,x
	jsr B_CRT.CRT_WRITE_053A

; optimize OK (police.pas), line = 21

	lda #$00
	sta READVALUE.MINVALUE
	sta READVALUE.MINVALUE+1
	lda #$64
	sta READVALUE.MAXVALUE
	lda #$00
	sta READVALUE.MAXVALUE+1
	jsr READVALUE
	lda READVALUE.RESULT
	sta M

; optimize OK (police.pas), line = 22

	jne l_41DA
	jmp @exit
l_41DA

; optimize OK (police.pas), line = 23

	lda #$E8
	sta :ecx
	lda #$03
	sta :ecx+1
	lda M
	sta :eax
	lda #$00
	sta :eax+1
	.ifdef fmulinit
	fmulu_16
	els
	imulCX_AL
	eif
	lda :eax
	sta PAYMONEY.PRICE
	lda :eax+1
	sta PAYMONEY.PRICE+1
	jsr PAYMONEY
	lda PAYMONEY.RESULT
	jne l_41F4
	jmp @exit
l_41F4

; optimize OK (police.pas), line = 26

	ldy CURRENTPLAYER
	lda adr.PLBRIBE,y
	add M
	add #$01
	sta adr.PLBRIBE,y

; optimize OK (police.pas), line = 27

	lda adr.PLNEWPOINTS,y
	add #$02
	sta adr.PLNEWPOINTS,y

; optimize FAIL ('B_CRT.CRT_NEWLINE_06EB', police.pas), line = 29

	jsr B_CRT.CRT_NEWLINE_06EB

; optimize FAIL ('B_CRT.CRT_NEWLINE_06EB', police.pas), line = 30

	jsr B_CRT.CRT_NEWLINE_06EB

; optimize FAIL ('CRT_WRITELN', police.pas), line = 31

	inx
	mva LOC_STRING_3 :STACKORIGIN,x
	mva LOC_STRING_3+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN

; optimize FAIL ('CRT_WRITELN', police.pas), line = 32

	inx
	mva LOC_STRING_4 :STACKORIGIN,x
	mva LOC_STRING_4+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN

; optimize FAIL ('WAITFORKEY', police.pas), line = 33

	jsr WAITFORKEY
	jmp @exit
l_41BA

; optimize OK (police.pas), line = 37

	mvy CHOICE+1 :bp+1
	ldy CHOICE
	lda (:bp),y
	cmp #$03
	jne l_423A

; optimize FAIL ('SHOWLOCATIONHEADER', police.pas), line = 39

	jsr SHOWLOCATIONHEADER

; optimize FAIL ('CRT_WRITELN2', police.pas), line = 41

	inx
	mva LOC_STRING_5 :STACKORIGIN,x
	mva LOC_STRING_5+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN2

; optimize OK (police.pas), line = 42

	lda #$00
	sta R

; optimize OK (police.pas), line = 43

	sta M
	ldy NPLAYERS
	dey
	sty @FORTMP_424F_0

l_4252
; --- ForToDoCondition
	lda @FORTMP_424F_0::#$00
	cmp M
	jcc l_4260

; optimize OK (police.pas), line = 45

	ldy M
	lda adr.PLPRISON,y
	jeq l_4275

; optimize OK (police.pas), line = 46

	lda #$00
	jsr B_CRT.CRT_WRITE_054D

; optimize OK (police.pas), line = 47

	lda M
	add #$01
	sta B_CRT.CRT_WRITE_0565.NUM
	lda #$00
	adc #$00
	sta B_CRT.CRT_WRITE_0565.NUM+1
	jsr B_CRT.CRT_WRITE_0565

; optimize FAIL ('B_CRT.CRT_WRITE_053A', police.pas), line = 48

	inx
	mva #$A1 :STACKORIGIN,x
	mva #$0D :STACKORIGIN+STACKWIDTH,x
	jsr B_CRT.CRT_WRITE_053A

; optimize FAIL ('CRT_WRITELN', police.pas), line = 49

	inx
	mva M :STACKORIGIN,x
	inx
	mva #$03 :STACKORIGIN,x
	jsr shlEAX_CL.BYTE
	dex
	lda :STACKORIGIN+STACKWIDTH,x
	asl :STACKORIGIN,x
	rol @
	sta :STACKORIGIN+STACKWIDTH,x
	ldy :STACKORIGIN,x
	lda adr.GANGSTERNAMES,y
	sta :STACKORIGIN,x
	lda adr.GANGSTERNAMES+1,y
	sta :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN

; optimize OK (police.pas), line = 50

	inc R
l_4275

; --- ForToDoEpilog
	inc M
	jne l_4252
l_4260

; optimize OK (police.pas), line = 53

	lda R
	jne l_42AF

; optimize FAIL ('CRT_WRITELN', police.pas), line = 54

	inx
	mva LOC_STRING_6 :STACKORIGIN,x
	mva LOC_STRING_6+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN

; optimize FAIL ('WAITFORKEY', police.pas), line = 55

	jsr WAITFORKEY
	jmp @exit
l_42AF

; optimize FAIL ('B_CRT.CRT_NEWLINE_06EB', police.pas), line = 59

	jsr B_CRT.CRT_NEWLINE_06EB

; optimize FAIL ('CRT_WRITELN', police.pas), line = 60

	inx
	mva LOC_STRING_7 :STACKORIGIN,x
	mva LOC_STRING_7+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN

; --- RepeatUntilProlog
l_42BB

; optimize OK (police.pas), line = 62

	lda #$01
	sta READVALUENOZERO.MINVALUE
	lda #$00
	sta READVALUENOZERO.MINVALUE+1
	lda NPLAYERS
	sta READVALUENOZERO.MAXVALUE
	lda #$00
	sta READVALUENOZERO.MAXVALUE+1
	jsr READVALUENOZERO
	lda READVALUENOZERO.RESULT
	sta R

; optimize OK (police.pas), line = 63

	tay
	lda adr.PLPRISON-$01,y
	jeq l_42BB

; optimize OK (police.pas), line = 64

	dec R

; optimize OK (police.pas), line = 65

	lda #$05
	jsr SYSTEM.RANDOM_02E9
	inx
	mva SYSTEM.RANDOM_02E9.RESULT :STACKORIGIN,x
	inx
	mva #$09 :STACKORIGIN,x
	jsr shlEAX_CL.BYTE
	mva #$B8 :STACKORIGIN,x
	mva #$0B :STACKORIGIN+STACKWIDTH,x
	mva #$00 :STACKORIGIN+STACKWIDTH*2,x
	sta :STACKORIGIN+STACKWIDTH*3,x
	jsr addAX_CX
	dex
	lda :STACKORIGIN,x
	sta P
	lda :STACKORIGIN+STACKWIDTH,x
	sta P+1
	dex

; optimize FAIL ('B_CRT.CRT_NEWLINE_06EB', police.pas), line = 66

	jsr B_CRT.CRT_NEWLINE_06EB

; optimize FAIL ('B_CRT.CRT_NEWLINE_06EB', police.pas), line = 67

	jsr B_CRT.CRT_NEWLINE_06EB

; optimize FAIL ('B_CRT.CRT_WRITE_053A', police.pas), line = 68

	inx
	mva LOC_STRING_8 :STACKORIGIN,x
	mva LOC_STRING_8+1 :STACKORIGIN+STACKWIDTH,x
	jsr B_CRT.CRT_WRITE_053A

; optimize OK (police.pas), line = 69

	lda P
	sta B_CRT.CRT_WRITE_0565.NUM
	lda P+1
	sta B_CRT.CRT_WRITE_0565.NUM+1
	jsr B_CRT.CRT_WRITE_0565

; optimize FAIL ('CRT_WRITELN', police.pas), line = 70

	inx
	mva LOC_STRING_9 :STACKORIGIN,x
	mva LOC_STRING_9+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN

; optimize FAIL ('CRT_WRITELN', police.pas), line = 71

	inx
	mva LOC_STRING_10 :STACKORIGIN,x
	mva LOC_STRING_10+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN

; optimize FAIL ('WAITFORKEY', police.pas), line = 72

	jsr WAITFORKEY

; optimize FAIL ('B_CRT.CRT_NEWLINE_06EB', police.pas), line = 73

	jsr B_CRT.CRT_NEWLINE_06EB

; optimize FAIL ('B_CRT.CRT_NEWLINE_06EB', police.pas), line = 74

	jsr B_CRT.CRT_NEWLINE_06EB

; optimize OK (police.pas), line = 75

	lda P
	sta PAYMONEY.PRICE
	lda P+1
	sta PAYMONEY.PRICE+1
	jsr PAYMONEY
	lda PAYMONEY.RESULT
	jne l_4311
	jmp @exit
l_4311

; optimize FAIL ('CRT_WRITELN', police.pas), line = 76

	inx
	mva LOC_STRING_11 :STACKORIGIN,x
	mva LOC_STRING_11+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN

; optimize FAIL ('CRT_WRITELN', police.pas), line = 77

	inx
	mva LOC_STRING_12 :STACKORIGIN,x
	mva LOC_STRING_12+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN

; optimize FAIL ('WAITFORKEY', police.pas), line = 78

	jsr WAITFORKEY

; optimize OK (police.pas), line = 79

	ldy R
	lda CURRENTPLAYER
	sta adr.PLFREED,y

; optimize OK (police.pas), line = 80

	lda #$00
	sta adr.PLPRISON,y
l_423A
@exit

; ------------------------------------------------------------

CHOICE	= DATAORIGIN+$1612
RESULT	= DATAORIGIN+$1614
R	= DATAORIGIN+$1615
M	= DATAORIGIN+$1616
P	= DATAORIGIN+$1617

@VarData	= CHOICE
@VarDataSize	= 6

	rts						; ret
.endl

.local	PUBCHOICES					; FUNCTION

; optimize OK (pub.pas), line = 13

	lda #$07
	sta RESULT

; optimize FAIL ('SHOWLOCATIONHEADER', pub.pas), line = 14

	jsr SHOWLOCATIONHEADER

; optimize OK (pub.pas), line = 17

	mvy CHOICE+1 :bp+1
	ldy CHOICE
	lda (:bp),y
	cmp #$01
	jne l_4348

; optimize OK (pub.pas), line = 19

	lda CURRENTSUBLOCATION
	cmp #$02
	jcc l_435B

; optimize OK (pub.pas), line = 21

	lda #$02
	jsr SYSTEM.RANDOM_02E9
	inx
	ldy #1
	lda SYSTEM.RANDOM_02E9.RESULT
	beq @+
	dey
@
	sty :STACKORIGIN,x
	inx
	ldy CURRENTPLAYER
	lda adr.PLALCOHOL,y
	sta :STACKORIGIN,x
	inx
	ldy #1
	lda :STACKORIGIN-1,x
	bne @+
	dey
@
	dex
	sty :STACKORIGIN,x
	dex
	dex
	lda :STACKORIGIN+1,x
	and :STACKORIGIN+2,x
	jeq l_437C

; optimize OK (pub.pas), line = 23

	lda #$14
	jsr SYSTEM.RANDOM_02E9
	inx
	lda SYSTEM.RANDOM_02E9.RESULT
	add #$0A
	sta P
	lda #$00
	adc #$00
	sta P+1

; optimize FAIL ('CRT_WRITELN', pub.pas), line = 24

	mva LOC_STRING_1 :STACKORIGIN,x
	mva LOC_STRING_1+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN

; optimize FAIL ('B_CRT.CRT_WRITE_053A', pub.pas), line = 25

	inx
	mva LOC_STRING_2 :STACKORIGIN,x
	mva LOC_STRING_2+1 :STACKORIGIN+STACKWIDTH,x
	jsr B_CRT.CRT_WRITE_053A

; optimize OK (pub.pas), line = 26

	lda P
	sta B_CRT.CRT_WRITE_0565.NUM
	lda P+1
	sta B_CRT.CRT_WRITE_0565.NUM+1
	jsr B_CRT.CRT_WRITE_0565

; optimize FAIL ('CRT_WRITELN', pub.pas), line = 27

	inx
	mva LOC_STRING_3 :STACKORIGIN,x
	mva LOC_STRING_3+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN

; optimize FAIL ('B_CRT.CRT_WRITE_053A', pub.pas), line = 29

	inx
	mva LOC_STRING_4 :STACKORIGIN,x
	mva LOC_STRING_4+1 :STACKORIGIN+STACKWIDTH,x
	jsr B_CRT.CRT_WRITE_053A

; optimize OK (pub.pas), line = 30

	ldy CURRENTPLAYER
	lda adr.PLALCOHOL,y
	jsr B_CRT.CRT_WRITE_055B

; optimize FAIL ('B_CRT.CRT_WRITE_053A', pub.pas), line = 31

	inx
	mva #$3A :STACKORIGIN,x
	mva #$0E :STACKORIGIN+STACKWIDTH,x
	jsr B_CRT.CRT_WRITE_053A

; optimize OK (pub.pas), line = 32

	ldy CURRENTPLAYER
	lda adr.PLALCOHOL,y
	sta READVALUE.MAXVALUE
	lda #$00
	sta READVALUE.MINVALUE
	sta READVALUE.MINVALUE+1
	sta READVALUE.MAXVALUE+1
	jsr READVALUE
	lda READVALUE.RESULT
	sta AL
	lda READVALUE.RESULT+1
	sta AL+1

; optimize OK (pub.pas), line = 33

	ora AL
	jne l_43BA
	jmp @exit
l_43BA

; optimize FAIL ('B_CRT.CRT_NEWLINE_06EB', pub.pas), line = 35

	jsr B_CRT.CRT_NEWLINE_06EB

; optimize FAIL ('CRT_WRITELN', pub.pas), line = 36

	inx
	mva LOC_STRING_5 :STACKORIGIN,x
	mva LOC_STRING_5+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN

; optimize OK (pub.pas), line = 37

	lda P
	sta :ecx
	lda P+1
	sta :ecx+1
	lda AL
	sta :eax
	lda AL+1
	sta :eax+1
	.ifdef fmulinit
	fmulu_16
	els
	imulCX
	eif
	lda :eax
	sta ADDMONEY.AMOUNT
	lda :eax+1
	sta ADDMONEY.AMOUNT+1
	jsr ADDMONEY

; optimize OK (pub.pas), line = 38

	ldy CURRENTPLAYER
	lda adr.PLALCOHOL,y
	sub AL
	sta adr.PLALCOHOL,y
	jmp l_43E3
l_437C

; optimize FAIL ('CRT_WRITELN', pub.pas), line = 42

	inx
	mva LOC_STRING_6 :STACKORIGIN,x
	mva LOC_STRING_6+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN
l_43E3

; optimize FAIL ('WAITFORKEY', pub.pas), line = 44

	jsr WAITFORKEY
	jmp @exit
l_435B

; optimize OK (pub.pas), line = 47

	lda #$C8
	jsr SYSTEM.RANDOM_02E9
	inx
	lda SYSTEM.RANDOM_02E9.RESULT
	add #$64
	sta AL
	lda #$00
	adc #$00
	sta AL+1
	dex

; optimize OK (pub.pas), line = 48

	lda #$0A
	jsr SYSTEM.RANDOM_02E9
	inx
	lda SYSTEM.RANDOM_02E9.RESULT
	add #$05
	sta P
	lda #$00
	adc #$00
	sta P+1

; optimize FAIL ('B_CRT.CRT_WRITE_053A', pub.pas), line = 49

	mva LOC_STRING_7 :STACKORIGIN,x
	mva LOC_STRING_7+1 :STACKORIGIN+STACKWIDTH,x
	jsr B_CRT.CRT_WRITE_053A

; optimize OK (pub.pas), line = 50

	lda P
	sta B_CRT.CRT_WRITE_0565.NUM
	lda P+1
	sta B_CRT.CRT_WRITE_0565.NUM+1
	jsr B_CRT.CRT_WRITE_0565

; optimize FAIL ('CRT_WRITELN', pub.pas), line = 51

	inx
	mva #$1E :STACKORIGIN,x
	mva #$0E :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN

; optimize OK (pub.pas), line = 54

	ldy CURRENTPLAYER
	lda adr.PLCAR,y
	tay
	lda adr.CARCARGO,y
	ldy CURRENTPLAYER
	sub adr.PLALCOHOL,y
	sta W
	lda #$00
	sbc #$00
	sta W+1

; optimize OK (pub.pas), line = 55

	bmi @+
	ora W
	jne l_4429
@

; optimize FAIL ('B_CRT.CRT_NEWLINE_06EB', pub.pas), line = 56

	jsr B_CRT.CRT_NEWLINE_06EB

; optimize FAIL ('CRT_WRITELN', pub.pas), line = 57

	inx
	mva LOC_STRING_8 :STACKORIGIN,x
	mva LOC_STRING_8+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN

; optimize FAIL ('CRT_WRITELN', pub.pas), line = 58

	inx
	mva LOC_STRING_9 :STACKORIGIN,x
	mva LOC_STRING_9+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN

; optimize FAIL ('WAITFORKEY', pub.pas), line = 59

	jsr WAITFORKEY
	jmp @exit
l_4429

; optimize OK (pub.pas), line = 62

	lda W
	cmp AL
	lda W+1
	sbc AL+1
	svc
	eor #$80
	jpl l_4446
	lda W
	sta AL
	lda W+1
	sta AL+1
l_4446

; optimize FAIL ('B_CRT.CRT_WRITE_053A', pub.pas), line = 63

	inx
	mva LOC_STRING_10 :STACKORIGIN,x
	mva LOC_STRING_10+1 :STACKORIGIN+STACKWIDTH,x
	jsr B_CRT.CRT_WRITE_053A

; optimize OK (pub.pas), line = 64

	lda AL
	sta B_CRT.CRT_WRITE_056E.NUM
	ldy #$00
	lda AL+1
	spl
	dey
	sta B_CRT.CRT_WRITE_056E.NUM+1
	sty B_CRT.CRT_WRITE_056E.NUM+2
	sty B_CRT.CRT_WRITE_056E.NUM+3
	jsr B_CRT.CRT_WRITE_056E

; optimize FAIL ('B_CRT.CRT_WRITE_053A', pub.pas), line = 65

	inx
	mva #$3A :STACKORIGIN,x
	mva #$0E :STACKORIGIN+STACKWIDTH,x
	jsr B_CRT.CRT_WRITE_053A

; optimize OK (pub.pas), line = 66

	lda #$00
	sta READVALUE.MINVALUE
	sta READVALUE.MINVALUE+1
	lda AL
	sta READVALUE.MAXVALUE
	lda AL+1
	sta READVALUE.MAXVALUE+1
	jsr READVALUE
	lda READVALUE.RESULT
	sta W
	lda READVALUE.RESULT+1
	sta W+1

; optimize OK (pub.pas), line = 67

	bmi @+
	ora W
	jne l_446E
@
	jmp @exit
l_446E

; optimize OK (pub.pas), line = 68

	lda P
	sta :ecx
	lda P+1
	sta :ecx+1
	lda W
	sta :eax
	lda W+1
	sta :eax+1
	.ifdef fmulinit
	fmulu_16
	els
	imulCX
	eif
	lda :eax
	sta P
	lda :eax+1
	sta P+1

; optimize OK (pub.pas), line = 69

	lda P
	sta PAYMONEY.PRICE
	lda P+1
	sta PAYMONEY.PRICE+1
	jsr PAYMONEY
	lda PAYMONEY.RESULT
	jne l_448D
	jmp @exit
l_448D

; optimize OK (pub.pas), line = 70

	ldy CURRENTPLAYER
	lda adr.PLALCOHOL,y
	add W
	sta adr.PLALCOHOL,y

; optimize OK (pub.pas), line = 71

	lda adr.PLNEWPOINTS,y
	add #$02
	sta adr.PLNEWPOINTS,y
l_4348

; optimize OK (pub.pas), line = 75

	mvy CHOICE+1 :bp+1
	ldy CHOICE
	lda (:bp),y
	cmp #$02
	jne l_44C5

; optimize FAIL ('SHOWLOCATIONHEADER', pub.pas), line = 77

	jsr SHOWLOCATIONHEADER

; optimize OK (pub.pas), line = 79

	ldy CURRENTPLAYER
	lda adr.PLRANK,y
	cmp #$05
	jcs l_44DC

; optimize FAIL ('B_CRT.CRT_WRITE_053A', pub.pas), line = 81

	inx
	mva LOC_STRING_11 :STACKORIGIN,x
	mva LOC_STRING_11+1 :STACKORIGIN+STACKWIDTH,x
	jsr B_CRT.CRT_WRITE_053A

; optimize FAIL ('B_CRT.CRT_WRITE_053A', pub.pas), line = 82

	inx
	ldy CURRENTPLAYER
	lda adr.PLRANK,y
	asl @
	tay
	lda adr.RANKNAMES,y
	sta :STACKORIGIN,x
	lda adr.RANKNAMES+1,y
	sta :STACKORIGIN+STACKWIDTH,x
	jsr B_CRT.CRT_WRITE_053A

; optimize FAIL ('CRT_WRITELN', pub.pas), line = 83

	inx
	mva LOC_STRING_12 :STACKORIGIN,x
	mva LOC_STRING_12+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN

; optimize FAIL ('CRT_WRITELN', pub.pas), line = 84

	inx
	mva LOC_STRING_13 :STACKORIGIN,x
	mva LOC_STRING_13+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN

; optimize FAIL ('WAITFORKEY', pub.pas), line = 85

	jsr WAITFORKEY
	jmp @exit
l_44DC

; optimize OK (pub.pas), line = 91

	lda #$00
	tay

l_44FB
; --- ForToDoCondition
	cpy #$04
	jcs l_4509

; optimize OK (pub.pas), line = 92

	lda adr.PLRENT,y
	cmp CURRENTPLAYER
	jne l_4520
	lda #$01
	sta HASHIDEOUT
l_4520

; --- ForToDoEpilog
	iny
	jne l_44FB
l_4509
	sty R

; optimize OK (pub.pas), line = 94

	lda HASHIDEOUT
	jne l_453E

; optimize FAIL ('CRT_WRITELN', pub.pas), line = 96

	inx
	mva LOC_STRING_14 :STACKORIGIN,x
	mva LOC_STRING_14+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN

; optimize FAIL ('CRT_WRITELN', pub.pas), line = 97

	inx
	mva LOC_STRING_15 :STACKORIGIN,x
	mva LOC_STRING_15+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN

; optimize FAIL ('WAITFORKEY', pub.pas), line = 98

	jsr WAITFORKEY
	jmp @exit
l_453E

; optimize OK (pub.pas), line = 102

	ldy CURRENTPLAYER
	lda adr.PLNGANGSTERS,y
	cmp #$08
	jcc l_455D

; optimize FAIL ('CRT_WRITELN', pub.pas), line = 104

	inx
	mva LOC_STRING_16 :STACKORIGIN,x
	mva LOC_STRING_16+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN

; optimize FAIL ('CRT_WRITELN', pub.pas), line = 105

	inx
	mva LOC_STRING_17 :STACKORIGIN,x
	mva LOC_STRING_17+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN

; optimize FAIL ('WAITFORKEY', pub.pas), line = 106

	jsr WAITFORKEY
	jmp @exit
l_455D

; optimize OK (pub.pas), line = 114

	lda #$63
	sta G

; optimize OK (pub.pas), line = 115

	lda #$00
	sta K

l_4574
; --- ForToDoCondition
	lda K
	cmp #$05
	jcs l_4582

; optimize OK (pub.pas), line = 117

	lda #$2A
	jsr SYSTEM.RANDOM_02E9
	lda SYSTEM.RANDOM_02E9.RESULT
	sta R

; optimize OK (pub.pas), line = 118

	cmp #$20
	jcc l_4599
	jmp b_4574					; break
l_4599

; optimize OK (pub.pas), line = 119

	ldy R
	lda adr.PLGANGSTERS,y
	cmp #$63
	jne l_45B1

; optimize OK (pub.pas), line = 120

	lda R
	sta G
	jmp b_4574					; break
l_45B1

; --- ForToDoEpilog
	inc K
	jne l_4574
l_4582
b_4574

; optimize OK (pub.pas), line = 125

	lda G
	cmp #$63
	jne l_45D1

; optimize FAIL ('CRT_WRITELN', pub.pas), line = 127

	inx
	mva LOC_STRING_18 :STACKORIGIN,x
	mva LOC_STRING_18+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN

; optimize FAIL ('WAITFORKEY', pub.pas), line = 128

	jsr WAITFORKEY
	jmp @exit
l_45D1

; optimize OK (pub.pas), line = 133

	lda G
	jsr LOADGANGSTER

; optimize FAIL ('B_CRT.CRT_NEWLINE_06EB', pub.pas), line = 134

	jsr B_CRT.CRT_NEWLINE_06EB

; optimize FAIL ('B_CRT.CRT_WRITE_053A', pub.pas), line = 135

	inx
	mva LOC_STRING_39 :STACKORIGIN,x
	mva LOC_STRING_39+1 :STACKORIGIN+STACKWIDTH,x
	jsr B_CRT.CRT_WRITE_053A

; optimize OK (pub.pas), line = 136

	lda BUF_GANGSTERPRICE
	sta B_CRT.CRT_WRITE_0565.NUM
	lda BUF_GANGSTERPRICE+1
	sta B_CRT.CRT_WRITE_0565.NUM+1
	jsr B_CRT.CRT_WRITE_0565

; optimize FAIL ('B_CRT.CRT_WRITE_053A', pub.pas), line = 137

	inx
	mva LOC_STRING_40 :STACKORIGIN,x
	mva LOC_STRING_40+1 :STACKORIGIN+STACKWIDTH,x
	jsr B_CRT.CRT_WRITE_053A

; optimize FAIL ('B_CRT.CRT_WRITE_053A', pub.pas), line = 138

	inx
	mva BUF_GANGSTERANREDE :STACKORIGIN,x
	mva BUF_GANGSTERANREDE+1 :STACKORIGIN+STACKWIDTH,x
	jsr B_CRT.CRT_WRITE_053A

; optimize FAIL ('CRT_WRITELN2', pub.pas), line = 139

	inx
	mva LOC_STRING_41 :STACKORIGIN,x
	mva LOC_STRING_41+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN2

; optimize FAIL ('GETYESNO', pub.pas), line = 140

	jsr GETYESNO
	lda GETYESNO.RESULT
	jne l_45FC
	jmp @exit
l_45FC

; optimize OK (pub.pas), line = 141

	lda BUF_GANGSTERPRICE
	sta PAYMONEY.PRICE
	lda BUF_GANGSTERPRICE+1
	sta PAYMONEY.PRICE+1
	jsr PAYMONEY
	lda PAYMONEY.RESULT
	jne l_4611
	jmp @exit
l_4611

; optimize OK (pub.pas), line = 142

	ldy G
	lda CURRENTPLAYER
	sta adr.PLGANGSTERS,y

; optimize OK (pub.pas), line = 143

	ldy CURRENTPLAYER
	lda adr.PLNGANGSTERS,y
	sta Z

; optimize OK (pub.pas), line = 144

	add #$01
	sta adr.PLNGANGSTERS,y

; optimize OK (pub.pas), line = 145

	ldy G
	lda #$0A
	sta adr.GANGSTERHEALTH,y

; optimize OK (pub.pas), line = 146

	tya
	asl @
	tay
	lda adr.GANGSTERNAMES,y
	sta @move.dst
	lda adr.GANGSTERNAMES+1,y
	sta @move.dst+1
	lda BUF_GANGSTERNAME
	sta @move.src
	lda BUF_GANGSTERNAME+1
	sta @move.src+1
	ldy #$00
	lda (@move.src),y
	add #1
	sta @move.cnt
	scc
	iny
	sty @move.cnt+1
	jsr @move

; optimize OK (pub.pas), line = 147

	ldy G
	lda BUF_GANGSTERSTR
	sta adr.GANGSTERSTR,y

; optimize OK (pub.pas), line = 148

	lda BUF_GANGSTERBRUT
	sta adr.GANGSTERBRUT,y

; optimize OK (pub.pas), line = 149

	lda BUF_GANGSTERINT
	sta adr.GANGSTERINT,y

; optimize OK (pub.pas), line = 150

	lda BUF_GANGSTERWEAPON
	sta adr.GANGSTERWEAPON,y

; optimize OK (pub.pas), line = 151

	lda BUF_GANGSTERSEX
	sta adr.GANGSTERSEX,y

; optimize FAIL ('B_CRT.CRT_WRITE_053A', pub.pas), line = 153

	inx
	mva LOC_STRING_19 :STACKORIGIN,x
	mva LOC_STRING_19+1 :STACKORIGIN+STACKWIDTH,x
	jsr B_CRT.CRT_WRITE_053A

; optimize OK (pub.pas), line = 154

	lda #$00
	jsr B_CRT.CRT_WRITE_054D

; optimize OK (pub.pas), line = 155

	ldy CURRENTPLAYER
	lda adr.PLNGANGSTERS,y
	sub #$01
	sta B_CRT.CRT_WRITE_056E.NUM
	lda #$00
	sbc #$00
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #$00
	lda :STACKORIGIN+STACKWIDTH+9
	spl
	dey
	sta B_CRT.CRT_WRITE_056E.NUM+1
	sty B_CRT.CRT_WRITE_056E.NUM+2
	sty B_CRT.CRT_WRITE_056E.NUM+3
	jsr B_CRT.CRT_WRITE_056E

; optimize FAIL ('CRT_WRITELN', pub.pas), line = 156

	inx
	mva LOC_STRING_20 :STACKORIGIN,x
	mva LOC_STRING_20+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN

; optimize FAIL ('WAITFORKEY', pub.pas), line = 157

	jsr WAITFORKEY
l_44C5

; optimize OK (pub.pas), line = 161

	mvy CHOICE+1 :bp+1
	ldy CHOICE
	lda (:bp),y
	cmp #$03
	jne l_4697

; optimize OK (pub.pas), line = 164

	ldy CURRENTPLAYER
	lda adr.PLRANK,y
	cmp #$04
	jcs l_46AD

; optimize FAIL ('CRT_WRITELN', pub.pas), line = 166

	inx
	mva LOC_STRING_21 :STACKORIGIN,x
	mva LOC_STRING_21+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN

; optimize FAIL ('WAITFORKEY', pub.pas), line = 167

	jsr WAITFORKEY
	jmp @exit
l_46AD

; optimize OK (pub.pas), line = 172

	lda #$03
	jsr SYSTEM.RANDOM_02E9
	lda SYSTEM.RANDOM_02E9.RESULT
	jne l_46C5

; optimize FAIL ('CRT_WRITELN', pub.pas), line = 173

	inx
	mva LOC_STRING_22 :STACKORIGIN,x
	mva LOC_STRING_22+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN

; optimize FAIL ('WAITFORKEY', pub.pas), line = 174

	jsr WAITFORKEY
	jmp @exit
l_46C5

; optimize OK (pub.pas), line = 178

	lda #$04
	jsr SYSTEM.RANDOM_02E9
	inx
	mva SYSTEM.RANDOM_02E9.RESULT :STACKORIGIN,x
	inx
	mva #$F4 :STACKORIGIN,x
	mva #$01 :STACKORIGIN+STACKWIDTH,x
	mva #$00 :STACKORIGIN-1+STACKWIDTH,x
	jsr imulWORD
	dex
	lda :eax
	add #$E8
	sta P
	lda :eax+1
	adc #$03
	sta P+1

; optimize FAIL ('CRT_WRITELN', pub.pas), line = 179

	mva LOC_STRING_23 :STACKORIGIN,x
	mva LOC_STRING_23+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN

; optimize FAIL ('B_CRT.CRT_WRITE_053A', pub.pas), line = 180

	inx
	mva LOC_STRING_24 :STACKORIGIN,x
	mva LOC_STRING_24+1 :STACKORIGIN+STACKWIDTH,x
	jsr B_CRT.CRT_WRITE_053A

; optimize OK (pub.pas), line = 181

	lda P
	sta B_CRT.CRT_WRITE_0565.NUM
	lda P+1
	sta B_CRT.CRT_WRITE_0565.NUM+1
	jsr B_CRT.CRT_WRITE_0565

; optimize FAIL ('CRT_WRITELN', pub.pas), line = 182

	inx
	mva LOC_STRING_25 :STACKORIGIN,x
	mva LOC_STRING_25+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN

; optimize FAIL ('GETYESNO', pub.pas), line = 183

	jsr GETYESNO
	lda GETYESNO.RESULT
	jne l_46F5
	jmp @exit
l_46F5

; optimize OK (pub.pas), line = 184

	lda P
	sta PAYMONEY.PRICE
	lda P+1
	sta PAYMONEY.PRICE+1
	jsr PAYMONEY
	lda PAYMONEY.RESULT
	jne l_470A
	jmp @exit
l_470A

; optimize OK (pub.pas), line = 186

	lda #$05
	jsr SYSTEM.RANDOM_02E9
	lda SYSTEM.RANDOM_02E9.RESULT
	sta TIPP

; optimize OK (pub.pas), line = 187

	sta @CASETMP_0012
	cmp #$00
	jne l_471D
@

; optimize FAIL ('CRT_WRITELN', pub.pas), line = 189

	inx
	mva LOC_STRING_26 :STACKORIGIN,x
	mva LOC_STRING_26+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN

; optimize FAIL ('CRT_WRITELN', pub.pas), line = 190

	inx
	mva LOC_STRING_27 :STACKORIGIN,x
	mva LOC_STRING_27+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN
	jmp a_0012
l_471D
	cmp #$01
	jne l_472C

; optimize FAIL ('CRT_WRITELN', pub.pas), line = 193

	inx
	mva LOC_STRING_28 :STACKORIGIN,x
	mva LOC_STRING_28+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN

; optimize FAIL ('CRT_WRITELN', pub.pas), line = 194

	inx
	mva LOC_STRING_29 :STACKORIGIN,x
	mva LOC_STRING_29+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN
	jmp a_0012
l_472C
	cmp #$02
	jne l_473B

; optimize FAIL ('CRT_WRITELN', pub.pas), line = 197

	inx
	mva LOC_STRING_30 :STACKORIGIN,x
	mva LOC_STRING_30+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN

; optimize FAIL ('CRT_WRITELN', pub.pas), line = 198

	inx
	mva LOC_STRING_31 :STACKORIGIN,x
	mva LOC_STRING_31+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN

; optimize FAIL ('CRT_WRITELN', pub.pas), line = 199

	inx
	mva LOC_STRING_32 :STACKORIGIN,x
	mva LOC_STRING_32+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN
	jmp a_0012
l_473B
	cmp #$03
	jne l_474D

; optimize FAIL ('CRT_WRITELN', pub.pas), line = 202

	inx
	mva LOC_STRING_33 :STACKORIGIN,x
	mva LOC_STRING_33+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN

; optimize FAIL ('CRT_WRITELN', pub.pas), line = 203

	inx
	mva LOC_STRING_34 :STACKORIGIN,x
	mva LOC_STRING_34+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN

; optimize FAIL ('GETYESNO', pub.pas), line = 204

	jsr GETYESNO
	lda GETYESNO.RESULT
	jne l_4763
	jmp @exit
l_4763

; optimize OK (pub.pas), line = 205

	lda P
	sta PAYMONEY.PRICE
	lda P+1
	sta PAYMONEY.PRICE+1
	jsr PAYMONEY
	lda PAYMONEY.RESULT
	jne l_4778
	jmp @exit
l_4778

; optimize FAIL ('CRT_WRITELN', pub.pas), line = 206

	inx
	mva LOC_STRING_35 :STACKORIGIN,x
	mva LOC_STRING_35+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN
	jmp a_0012
l_474D
	cmp #$04
	jne l_4787

; optimize FAIL ('CRT_WRITELN', pub.pas), line = 209

	inx
	mva LOC_STRING_36 :STACKORIGIN,x
	mva LOC_STRING_36+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN

; optimize FAIL ('CRT_WRITELN', pub.pas), line = 210

	inx
	mva LOC_STRING_37 :STACKORIGIN,x
	mva LOC_STRING_37+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN

; optimize FAIL ('CRT_WRITELN', pub.pas), line = 211

	inx
	mva LOC_STRING_38 :STACKORIGIN,x
	mva LOC_STRING_38+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN
l_4787
a_0012

; optimize OK (pub.pas), line = 214

	ldy CURRENTPLAYER
	lda adr.PLOPPORTUNITY,y
	sta :STACKORIGIN+10
	lda #$00
	sta :STACKORIGIN+STACKWIDTH*3+11
	sta :STACKORIGIN+STACKWIDTH*2+11
	sta :STACKORIGIN+STACKWIDTH+11
	lda #$01
	ldy TIPP
	beq l_0000_e
l_0000_b
	asl @
	rol :STACKORIGIN+STACKWIDTH+11
	rol :STACKORIGIN+STACKWIDTH*2+11
	rol :STACKORIGIN+STACKWIDTH*3+11
	dey
	bne l_0000_b
l_0000_e
	ora :STACKORIGIN+10
	ldy CURRENTPLAYER
	sta adr.PLOPPORTUNITY,y

; optimize FAIL ('WAITFORKEY', pub.pas), line = 215

	jsr WAITFORKEY
	jmp @exit
l_4697

; optimize OK (pub.pas), line = 221

	mvy CHOICE+1 :bp+1
	ldy CHOICE
	lda (:bp),y
	cmp #$04
	jne l_47C4

; optimize OK (pub.pas), line = 224

	lda #$14
	jsr LOADLOCATION

; optimize OK (pub.pas), line = 226

	ldy CURRENTPLAYER
	lda adr.PLRANK,y
	cmp #$04
	jcc l_47DC

; optimize FAIL ('B_CRT.CRT_WRITE_053A', pub.pas), line = 228

	inx
	mva LOC_STRING_1 :STACKORIGIN,x
	mva LOC_STRING_1+1 :STACKORIGIN+STACKWIDTH,x
	jsr B_CRT.CRT_WRITE_053A

; optimize FAIL ('B_CRT.CRT_WRITE_053A', pub.pas), line = 229

	inx
	ldy CURRENTPLAYER
	lda adr.PLRANK,y
	asl @
	tay
	lda adr.RANKNAMES,y
	sta :STACKORIGIN,x
	lda adr.RANKNAMES+1,y
	sta :STACKORIGIN+STACKWIDTH,x
	jsr B_CRT.CRT_WRITE_053A

; optimize FAIL ('CRT_WRITELN', pub.pas), line = 230

	inx
	mva LOC_STRING_2 :STACKORIGIN,x
	mva LOC_STRING_2+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN

; optimize FAIL ('WAITFORKEY', pub.pas), line = 231

	jsr WAITFORKEY
	jmp @exit
l_47DC

; optimize OK (pub.pas), line = 236

	lda #$05
	jsr SYSTEM.RANDOM_02E9
	lda SYSTEM.RANDOM_02E9.RESULT
	jne l_4800

; optimize FAIL ('CRT_WRITELN', pub.pas), line = 238

	inx
	mva LOC_STRING_3 :STACKORIGIN,x
	mva LOC_STRING_3+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN

; optimize FAIL ('WAITFORKEY', pub.pas), line = 239

	jsr WAITFORKEY
	jmp @exit
l_4800

; optimize OK (pub.pas), line = 244

	lda #$04
	jsr SYSTEM.RANDOM_02E9
	lda SYSTEM.RANDOM_02E9.RESULT
	sta @CASETMP_0013
	jne l_4811
@

; optimize FAIL ('CRT_WRITELN', pub.pas), line = 247

	inx
	mva LOC_STRING_4 :STACKORIGIN,x
	mva LOC_STRING_4+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN

; optimize FAIL ('CRT_WRITELN', pub.pas), line = 248

	inx
	mva LOC_STRING_5 :STACKORIGIN,x
	mva LOC_STRING_5+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN

; optimize FAIL ('CRT_WRITELN', pub.pas), line = 249

	inx
	mva LOC_STRING_6 :STACKORIGIN,x
	mva LOC_STRING_6+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN

; optimize OK (pub.pas), line = 250

	lda #$07
	sta JOBLOCATION

; optimize OK (pub.pas), line = 251

	lda #$03
	sta DURATION

; optimize OK (pub.pas), line = 252

	lda #$02
	jsr SYSTEM.RANDOM_02E9
	inx
	mva SYSTEM.RANDOM_02E9.RESULT :STACKORIGIN,x
	inx
	mva #$E8 :STACKORIGIN,x
	mva #$03 :STACKORIGIN+STACKWIDTH,x
	mva #$00 :STACKORIGIN-1+STACKWIDTH,x
	jsr imulWORD
	dex
	lda :eax
	add #$D0
	sta WAGE
	lda :eax+1
	adc #$07
	sta WAGE+1
	dex
	jmp a_0013
l_4811
	cmp #$01
	jne l_4838

; optimize FAIL ('CRT_WRITELN', pub.pas), line = 256

	inx
	mva LOC_STRING_7 :STACKORIGIN,x
	mva LOC_STRING_7+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN

; optimize FAIL ('CRT_WRITELN', pub.pas), line = 257

	inx
	mva LOC_STRING_8 :STACKORIGIN,x
	mva LOC_STRING_8+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN

; optimize OK (pub.pas), line = 258

	lda #$02
	sta DURATION

; optimize OK (pub.pas), line = 259

	lda #$03
	jsr SYSTEM.RANDOM_02E9
	inx
	mva SYSTEM.RANDOM_02E9.RESULT :STACKORIGIN,x
	inx
	mva #$F4 :STACKORIGIN,x
	mva #$01 :STACKORIGIN+STACKWIDTH,x
	mva #$00 :STACKORIGIN-1+STACKWIDTH,x
	jsr imulWORD
	dex
	lda :eax
	add #$E8
	sta WAGE
	lda :eax+1
	adc #$03
	sta WAGE+1
	dex

; optimize OK (pub.pas), line = 260

	lda #$0B
	sta JOBLOCATION
	jmp a_0013
l_4838
	cmp #$02
	jne l_485C

; optimize FAIL ('CRT_WRITELN', pub.pas), line = 264

	inx
	mva LOC_STRING_9 :STACKORIGIN,x
	mva LOC_STRING_9+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN

; optimize FAIL ('CRT_WRITELN', pub.pas), line = 265

	inx
	mva LOC_STRING_10 :STACKORIGIN,x
	mva LOC_STRING_10+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN

; optimize OK (pub.pas), line = 266

	lda #$02
	sta DURATION

; optimize OK (pub.pas), line = 267

	lda #$03
	jsr SYSTEM.RANDOM_02E9
	inx
	mva SYSTEM.RANDOM_02E9.RESULT :STACKORIGIN,x
	inx
	mva #$F4 :STACKORIGIN,x
	mva #$01 :STACKORIGIN+STACKWIDTH,x
	mva #$00 :STACKORIGIN-1+STACKWIDTH,x
	jsr imulWORD
	dex
	lda :eax
	add #$D0
	sta WAGE
	lda :eax+1
	adc #$07
	sta WAGE+1
	dex

; optimize OK (pub.pas), line = 268

	lda #$0A
	sta JOBLOCATION
	jmp a_0013
l_485C
	cmp #$03
	jne l_4880

; optimize FAIL ('CRT_WRITELN', pub.pas), line = 272

	inx
	mva LOC_STRING_11 :STACKORIGIN,x
	mva LOC_STRING_11+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN

; optimize FAIL ('CRT_WRITELN', pub.pas), line = 273

	inx
	mva LOC_STRING_12 :STACKORIGIN,x
	mva LOC_STRING_12+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN

; optimize FAIL ('CRT_WRITELN', pub.pas), line = 274

	inx
	mva LOC_STRING_13 :STACKORIGIN,x
	mva LOC_STRING_13+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN

; optimize OK (pub.pas), line = 275

	lda #$01
	sta DURATION

; optimize OK (pub.pas), line = 276

	lda #$02
	jsr SYSTEM.RANDOM_02E9
	inx
	mva SYSTEM.RANDOM_02E9.RESULT :STACKORIGIN,x
	inx
	mva #$F4 :STACKORIGIN,x
	mva #$01 :STACKORIGIN+STACKWIDTH,x
	mva #$00 :STACKORIGIN-1+STACKWIDTH,x
	jsr imulWORD
	dex
	lda :eax
	add #$D0
	sta WAGE
	lda :eax+1
	adc #$07
	sta WAGE+1
	dex

; optimize OK (pub.pas), line = 277

	lda #$10
	sta JOBLOCATION
l_4880
a_0013

; optimize FAIL ('B_CRT.CRT_NEWLINE_06EB', pub.pas), line = 281

	jsr B_CRT.CRT_NEWLINE_06EB

; optimize FAIL ('B_CRT.CRT_WRITE_053A', pub.pas), line = 282

	inx
	mva LOC_STRING_14 :STACKORIGIN,x
	mva LOC_STRING_14+1 :STACKORIGIN+STACKWIDTH,x
	jsr B_CRT.CRT_WRITE_053A

; optimize OK (pub.pas), line = 283

	lda WAGE
	sta B_CRT.CRT_WRITE_056E.NUM
	ldy #$00
	lda WAGE+1
	spl
	dey
	sta B_CRT.CRT_WRITE_056E.NUM+1
	sty B_CRT.CRT_WRITE_056E.NUM+2
	sty B_CRT.CRT_WRITE_056E.NUM+3
	jsr B_CRT.CRT_WRITE_056E

; optimize FAIL ('CRT_WRITELN2', pub.pas), line = 284

	inx
	mva #$1E :STACKORIGIN,x
	mva #$0E :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN2

; optimize FAIL ('CRT_WRITELN', pub.pas), line = 285

	inx
	mva LOC_STRING_15 :STACKORIGIN,x
	mva LOC_STRING_15+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN

; optimize FAIL ('GETYESNO', pub.pas), line = 286

	jsr GETYESNO
	lda GETYESNO.RESULT
	cmp #$01
	jne l_48C2

; optimize FAIL ('B_CRT.CRT_NEWLINE_06EB', pub.pas), line = 288

	jsr B_CRT.CRT_NEWLINE_06EB

; optimize FAIL ('CRT_WRITELN', pub.pas), line = 289

	inx
	mva LOC_STRING_16 :STACKORIGIN,x
	mva LOC_STRING_16+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN

; optimize FAIL ('WAITFORKEY', pub.pas), line = 290

	jsr WAITFORKEY

; optimize OK (pub.pas), line = 292

	ldy CURRENTPLAYER
	lda DURATION
	sta adr.PLJOB,y

; optimize OK (pub.pas), line = 293

	tya
	asl @
	tay
	lda WAGE
	sta adr.PLJOBWAGE,y
	lda WAGE+1
	sta adr.PLJOBWAGE+1,y

; optimize OK (pub.pas), line = 294

	lda JOBLOCATION
	sta adr.PLJOBLOCATION,y
	lda #$00
	sta adr.PLJOBLOCATION+1,y

; optimize OK (pub.pas), line = 295

	lda #$11
	sta RESULT
l_48C2
l_47C4
@exit

; ------------------------------------------------------------

CHOICE	= DATAORIGIN+$161A
RESULT	= DATAORIGIN+$161C
R	= DATAORIGIN+$161D
WAGE	= DATAORIGIN+$161E
DURATION	= DATAORIGIN+$1620
JOBLOCATION	= DATAORIGIN+$1621
G	= DATAORIGIN+$1622
K	= DATAORIGIN+$1623
Z	= DATAORIGIN+$1624
TIPP	= DATAORIGIN+$1625
HASHIDEOUT	= DATAORIGIN+$1626
P	= DATAORIGIN+$1627
AL	= DATAORIGIN+$1629
W	= DATAORIGIN+$162B
@CASETMP_0012	= DATAORIGIN+$162D
@CASETMP_0013	= DATAORIGIN+$162E

@VarData	= CHOICE
@VarDataSize	= 20

	rts						; ret
.endl

.local	STORECHOICES					; FUNCTION

; optimize FAIL ('SHOWLOCATIONHEADER', store.pas), line = 7

	jsr SHOWLOCATIONHEADER

; optimize OK (store.pas), line = 8

	lda #$09
	sta RESULT

; optimize OK (store.pas), line = 12

	ldy CURRENTPLAYER
	lda adr.PLRANK,y
	cmp #$02
	jcs l_4908

; optimize FAIL ('CRT_WRITELN', store.pas), line = 14

	inx
	mva LOC_STRING_1 :STACKORIGIN,x
	mva LOC_STRING_1+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN

; optimize FAIL ('WAITFORKEY', store.pas), line = 15

	jsr WAITFORKEY
	jmp @exit
l_4908

; optimize OK (store.pas), line = 22

	lda LASTLOCATION
	cmp #$09
	jne l_4921

; optimize FAIL ('FIGHTPOLICE', store.pas), line = 24

	jsr FIGHTPOLICE
	lda FIGHTPOLICE.RESULT
	sta RESULT
	jmp @exit
l_4921

; optimize OK (store.pas), line = 29

	mvy CHOICE+1 :bp+1
	ldy CHOICE
	lda (:bp),y
	cmp #$01
	jne l_493A

; optimize OK (store.pas), line = 31

	lda CURRENTPLAYER
	sta :STACKORIGIN+9
	lda #$00
	asl :STACKORIGIN+9
	rol @
	asl :STACKORIGIN+9
	rol @
	asl :STACKORIGIN+9
	rol @
	sta :STACKORIGIN+STACKWIDTH+9
	lda :STACKORIGIN+9
	add #$00
	tay
	lda :STACKORIGIN+STACKWIDTH+9
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+9
	lda adr.GANGSTERBRUT,y
	cmp #$1E
	jcc l_4960x
	lda CURRENTSUBLOCATION
	cmp #$01
	jne l_4960
l_4960x

; optimize FAIL ('CRT_WRITELN', store.pas), line = 32

	inx
	mva LOC_STRING_2 :STACKORIGIN,x
	mva LOC_STRING_2+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN

; optimize FAIL ('B_CRT.CRT_NEWLINE_06EB', store.pas), line = 33

	jsr B_CRT.CRT_NEWLINE_06EB

; optimize FAIL ('CRT_WRITELN', store.pas), line = 34

	inx
	mva LOC_STRING_3 :STACKORIGIN,x
	mva LOC_STRING_3+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN

; optimize FAIL ('WAITFORKEY', store.pas), line = 35

	jsr WAITFORKEY

; optimize FAIL ('FIGHTPOLICE', store.pas), line = 36

	jsr FIGHTPOLICE
	lda FIGHTPOLICE.RESULT
	sta RESULT
	jmp @exit
l_4960
l_493A

; optimize OK (store.pas), line = 42

	mvy CHOICE+1 :bp+1
	ldy CHOICE
	lda (:bp),y
	cmp #$02
	jne l_4983

; optimize OK (store.pas), line = 44

	lda CURRENTSUBLOCATION
	cmp #$04
	jeq l_49A2x
	cmp #$03
	jne l_49A2
l_49A2x

; optimize FAIL ('CRT_WRITELN', store.pas), line = 45

	inx
	mva LOC_STRING_4 :STACKORIGIN,x
	mva LOC_STRING_4+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN
	jmp @exit
l_49A2
l_4983

; optimize OK (store.pas), line = 51

	mvy CHOICE+1 :bp+1
	ldy CHOICE
	lda (:bp),y
	cmp #$03
	jne l_49BC

; optimize OK (store.pas), line = 52

	lda CURRENTSUBLOCATION
	cmp #$02
	jeq l_49DBx
	cmp #$01
	jne l_49DB
l_49DBx

; optimize FAIL ('CRT_WRITELN', store.pas), line = 53

	inx
	mva LOC_STRING_5 :STACKORIGIN,x
	mva LOC_STRING_5+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN

; optimize FAIL ('CRT_WRITELN', store.pas), line = 54

	inx
	mva LOC_STRING_6 :STACKORIGIN,x
	mva LOC_STRING_6+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN

; optimize FAIL ('WAITFORKEY', store.pas), line = 55

	jsr WAITFORKEY

; -------------------  ASM Block 00000169  -------------------

; 
                lda loc_string_35
                sta adr.FP_GANG+$02
                lda loc_string_35+1
                sta adr.FP_GANG+1+$02
            
; optimize OK (store.pas), line = 65

	lda #$01
	sta adr.FP_AI+$01

; optimize OK (store.pas), line = 66

	ldy CURRENTPLAYER
	lda adr.PLRANK,y
	ldy #1
	cmp #$06
	bcs @+
	dey
@
	tya
	asl @
	add #$03
	sta adr.FP_N+$01

; optimize OK (store.pas), line = 67

	lda #$00
	sta K
	lda adr.FP_N+$01
	sub #$01
	sta @FORTMP_4A0D_0

l_4A10
; --- ForToDoCondition
	lda @FORTMP_4A0D_0::#$00
	cmp K
	jcc l_4A1E

; optimize FAIL (1, store.pas), line = 68

	inx
	mva K :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	lda #$02
	jsr SYSTEM.RANDOM_02E9
	ldy :STACKORIGIN,x
	lda SYSTEM.RANDOM_02E9.RESULT
	sta adr.FP_SEX,y
	dex

; --- ForToDoEpilog
	inc K
	jne l_4A10
l_4A1E

; -------------------  ASM Block 00000170  -------------------

                ldy #$00
            @:
                tya 
                asl 
                tay

                lda loc_string_36
                sta adr.FP_NAME+$20,y
                lda loc_string_36+1
                sta adr.FP_NAME+1+$20,y

                tya
                lsr 
                tay

                lda #30
                sta adr.FP_ENERGY+$10,y
                lda #07
                sta adr.FP_WEAPON+$10,y
                iny
                cpy adr.FP_N+$01
                bne @- 
            
; optimize FAIL ('DOFIGHT', store.pas), line = 102

	jsr DOFIGHT
	lda DOFIGHT.RESULT
	cmp #$01
	jne l_4A3B

; optimize OK (store.pas), line = 104

	lda #$11
	sta RESULT
	jmp @exit
l_4A3B

; optimize FAIL ('CRT_WRITELN', store.pas), line = 107

	inx
	mva LOC_STRING_7 :STACKORIGIN,x
	mva LOC_STRING_7+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN

; optimize FAIL ('CRT_WRITELN', store.pas), line = 108

	inx
	mva LOC_STRING_8 :STACKORIGIN,x
	mva LOC_STRING_8+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN

; optimize FAIL ('WAITFORKEY', store.pas), line = 109

	jsr WAITFORKEY
l_49DB
l_49BC

; optimize OK (store.pas), line = 114

	mvy CHOICE+1 :bp+1
	ldy CHOICE
	lda (:bp),y
	cmp #$04
	jne l_4A5F

; optimize OK (store.pas), line = 115

	lda CURRENTSUBLOCATION
	cmp #$03
	jeq l_4A85x
	lda CURRENTPLAYER
	sta :STACKORIGIN+10
	lda #$00
	asl :STACKORIGIN+10
	rol @
	asl :STACKORIGIN+10
	rol @
	asl :STACKORIGIN+10
	rol @
	sta :STACKORIGIN+STACKWIDTH+10
	lda :STACKORIGIN+10
	add #$00
	tay
	lda :STACKORIGIN+STACKWIDTH+10
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+10
	lda adr.GANGSTERINT,y
	cmp #$1E
	jcs l_4A85
l_4A85x

; optimize FAIL ('CRT_WRITELN', store.pas), line = 116

	inx
	mva LOC_STRING_9 :STACKORIGIN,x
	mva LOC_STRING_9+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN

; optimize FAIL ('CRT_WRITELN', store.pas), line = 117

	inx
	mva LOC_STRING_10 :STACKORIGIN,x
	mva LOC_STRING_10+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN

; optimize FAIL ('WAITFORKEY', store.pas), line = 118

	jsr WAITFORKEY
	jmp @exit
l_4A85
l_4A5F

; optimize OK (store.pas), line = 124

	ldy CURRENTPLAYER
	lda adr.PLNEWPOINTS,y
	add #$02
	sta adr.PLNEWPOINTS,y

; optimize OK (store.pas), line = 125

	lda #$C8
	jsr SYSTEM.RANDOM_02E9
	inx
	lda SYSTEM.RANDOM_02E9.RESULT
	add #$20
	sta P
	lda #$00
	adc #$03
	sta P+1
	dex

; optimize OK (store.pas), line = 126

	lda CURRENTSUBLOCATION
	cmp #$02
	jeq l_4AC8x
	cmp #$03
	jne l_4AC8
l_4AC8x

; optimize OK (store.pas), line = 127

	lda P
	sub #$C8
	sta P
	scs
	dec P+1
l_4AC8

; optimize OK (store.pas), line = 128

	mvy CHOICE+1 :bp+1
	ldy CHOICE
	lda (:bp),y
	cmp #$02
	jne l_4AE6
	lda P
	add #$58
	sta P
	lda P+1
	adc #$02
	sta P+1
l_4AE6

; optimize OK (store.pas), line = 130

	mvy CHOICE+1 :bp+1
	ldy CHOICE
	lda (:bp),y
	cmp #$01
	jne l_4B04

; optimize FAIL ('CRT_WRITELN', store.pas), line = 131

	inx
	mva LOC_STRING_11 :STACKORIGIN,x
	mva LOC_STRING_11+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN

; optimize FAIL ('B_CRT.CRT_WRITE_053A', store.pas), line = 132

	inx
	mva LOC_STRING_12 :STACKORIGIN,x
	mva LOC_STRING_12+1 :STACKORIGIN+STACKWIDTH,x
	jsr B_CRT.CRT_WRITE_053A

; optimize OK (store.pas), line = 133

	lda P
	sta B_CRT.CRT_WRITE_0565.NUM
	lda P+1
	sta B_CRT.CRT_WRITE_0565.NUM+1
	jsr B_CRT.CRT_WRITE_0565

; optimize FAIL ('CRT_WRITELN', store.pas), line = 134

	inx
	mva #$9D :STACKORIGIN,x
	mva #$0D :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN
l_4B04

; optimize OK (store.pas), line = 137

	mvy CHOICE+1 :bp+1
	ldy CHOICE
	lda (:bp),y
	cmp #$02
	jne l_4B24

; optimize FAIL ('CRT_WRITELN', store.pas), line = 138

	inx
	mva LOC_STRING_13 :STACKORIGIN,x
	mva LOC_STRING_13+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN

; optimize OK (store.pas), line = 139

	lda P
	sta B_CRT.CRT_WRITE_0565.NUM
	lda P+1
	sta B_CRT.CRT_WRITE_0565.NUM+1
	jsr B_CRT.CRT_WRITE_0565

; optimize FAIL ('CRT_WRITELN', store.pas), line = 140

	inx
	mva #$9D :STACKORIGIN,x
	mva #$0D :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN
l_4B24

; optimize OK (store.pas), line = 144

	mvy CHOICE+1 :bp+1
	ldy CHOICE
	lda (:bp),y
	cmp #$03
	jne l_4B41

; optimize FAIL ('B_CRT.CRT_WRITE_053A', store.pas), line = 145

	inx
	mva LOC_STRING_14 :STACKORIGIN,x
	mva LOC_STRING_14+1 :STACKORIGIN+STACKWIDTH,x
	jsr B_CRT.CRT_WRITE_053A

; optimize OK (store.pas), line = 146

	lda P
	sta B_CRT.CRT_WRITE_0565.NUM
	lda P+1
	sta B_CRT.CRT_WRITE_0565.NUM+1
	jsr B_CRT.CRT_WRITE_0565

; optimize FAIL ('CRT_WRITELN', store.pas), line = 147

	inx
	mva LOC_STRING_15 :STACKORIGIN,x
	mva LOC_STRING_15+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN
l_4B41

; optimize OK (store.pas), line = 150

	mvy CHOICE+1 :bp+1
	ldy CHOICE
	lda (:bp),y
	cmp #$04
	jne l_4B5F

; optimize FAIL ('CRT_WRITELN', store.pas), line = 151

	inx
	mva LOC_STRING_16 :STACKORIGIN,x
	mva LOC_STRING_16+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN

; optimize FAIL ('B_CRT.CRT_WRITE_053A', store.pas), line = 152

	inx
	mva LOC_STRING_17 :STACKORIGIN,x
	mva LOC_STRING_17+1 :STACKORIGIN+STACKWIDTH,x
	jsr B_CRT.CRT_WRITE_053A

; optimize OK (store.pas), line = 153

	lda P
	sta B_CRT.CRT_WRITE_0565.NUM
	lda P+1
	sta B_CRT.CRT_WRITE_0565.NUM+1
	jsr B_CRT.CRT_WRITE_0565

; optimize FAIL ('CRT_WRITELN', store.pas), line = 154

	inx
	mva #$9D :STACKORIGIN,x
	mva #$0D :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN
l_4B5F

; optimize FAIL ('B_CRT.CRT_NEWLINE_06EB', store.pas), line = 158

	jsr B_CRT.CRT_NEWLINE_06EB

; optimize FAIL ('CRT_WRITELN2', store.pas), line = 159

	inx
	mva LOC_STRING_18 :STACKORIGIN,x
	mva LOC_STRING_18+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN2

; optimize FAIL ('CRT_WRITELN', store.pas), line = 160

	inx
	mva LOC_STRING_19 :STACKORIGIN,x
	mva LOC_STRING_19+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN

; optimize FAIL ('CRT_WRITELN', store.pas), line = 161

	inx
	mva LOC_STRING_20 :STACKORIGIN,x
	mva LOC_STRING_20+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN

; optimize FAIL ('CRT_WRITELN2', store.pas), line = 162

	inx
	mva LOC_STRING_21 :STACKORIGIN,x
	mva LOC_STRING_21+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN2

; optimize FAIL ('B_CRT.CRT_WRITE_053A', store.pas), line = 163

	inx
	mva LOC_STRING_22 :STACKORIGIN,x
	mva LOC_STRING_22+1 :STACKORIGIN+STACKWIDTH,x
	jsr B_CRT.CRT_WRITE_053A

; optimize OK (store.pas), line = 164

	lda #$01
	sta READVALUE.MINVALUE
	lda #$00
	sta READVALUE.MINVALUE+1
	lda #$03
	sta READVALUE.MAXVALUE
	lda #$00
	sta READVALUE.MAXVALUE+1
	jsr READVALUE
	lda READVALUE.RESULT
	sta R

; optimize FAIL ('B_CRT.CRT_NEWLINE_06EB', store.pas), line = 165

	jsr B_CRT.CRT_NEWLINE_06EB

; optimize FAIL ('B_CRT.CRT_NEWLINE_06EB', store.pas), line = 166

	jsr B_CRT.CRT_NEWLINE_06EB

; optimize OK (store.pas), line = 169

	lda R
	cmp #$01
	jne l_4B97

; optimize OK (store.pas), line = 170

	lda P
	sta ADDMONEY.AMOUNT
	lda P+1
	sta ADDMONEY.AMOUNT+1
	jsr ADDMONEY

; optimize FAIL ('CRT_WRITELN', store.pas), line = 171

	inx
	mva LOC_STRING_23 :STACKORIGIN,x
	mva LOC_STRING_23+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN

; optimize FAIL ('WAITFORKEY', store.pas), line = 172

	jsr WAITFORKEY
	jmp @exit
l_4B97

; optimize OK (store.pas), line = 176

	lda R
	cmp #$02
	jne l_4BB3

; optimize OK (store.pas), line = 177

	lda CURRENTSUBLOCATION
	jeq l_4BD2x
	cmp #$02
	jne l_4BD2
l_4BD2x

; optimize FAIL ('CRT_WRITELN', store.pas), line = 178

	inx
	mva LOC_STRING_24 :STACKORIGIN,x
	mva LOC_STRING_24+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN

; optimize FAIL ('CRT_WRITELN', store.pas), line = 179

	inx
	mva LOC_STRING_25 :STACKORIGIN,x
	mva LOC_STRING_25+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN

; optimize FAIL ('WAITFORKEY', store.pas), line = 180

	jsr WAITFORKEY

; -------------------  ASM Block 00000171  -------------------

; 
                lda loc_string_26
                sta adr.FP_GANG+$02
                lda loc_string_26+1
                sta adr.FP_GANG+1+$02
            
; optimize OK (store.pas), line = 190

	lda #$01
	sta adr.FP_AI+$01

; optimize OK (store.pas), line = 191

	lda #$05
	sta adr.FP_N+$01

; -------------------  ASM Block 00000172  -------------------

                ldy #$00
            @:
                tya 
                asl 
                tay

                lda loc_string_26
                sta adr.FP_NAME+$20,y
                lda loc_string_26+1
                sta adr.FP_NAME+1+$20,y

                tya
                lsr 
                tay

                lda #30
                sta adr.FP_ENERGY+$10,y
                lda #03
                sta adr.FP_WEAPON+$10,y
                iny
                cpy adr.FP_N+$01
                bne @- 
            
; optimize FAIL ('DOFIGHT', store.pas), line = 225

	jsr DOFIGHT
	lda DOFIGHT.RESULT
	cmp #$01
	jne l_4BF4

; optimize OK (store.pas), line = 227

	lda #$11
	sta RESULT
	jmp @exit
l_4BF4

; optimize OK (store.pas), line = 230

	lda P
	sta ADDMONEY.AMOUNT
	lda P+1
	sta ADDMONEY.AMOUNT+1
	jsr ADDMONEY
	jmp l_4C07
l_4BD2

; optimize OK (store.pas), line = 234

	lda #$C8
	jsr SYSTEM.RANDOM_02E9
	inx
	lda SYSTEM.RANDOM_02E9.RESULT
	add #$2C
	sta Q
	lda #$00
	adc #$01
	sta Q+1

; optimize FAIL ('CRT_WRITELN', store.pas), line = 235

	mva LOC_STRING_27 :STACKORIGIN,x
	mva LOC_STRING_27+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN

; optimize FAIL ('CRT_WRITELN', store.pas), line = 236

	inx
	mva LOC_STRING_28 :STACKORIGIN,x
	mva LOC_STRING_28+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN

; optimize OK (store.pas), line = 237

	lda Q
	sta B_CRT.CRT_WRITE_0565.NUM
	lda Q+1
	sta B_CRT.CRT_WRITE_0565.NUM+1
	jsr B_CRT.CRT_WRITE_0565

; optimize FAIL ('CRT_WRITELN', store.pas), line = 238

	inx
	mva #$1E :STACKORIGIN,x
	mva #$0E :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN

; optimize OK (store.pas), line = 239

	lda P
	sta ADDMONEY.AMOUNT
	lda P+1
	sta ADDMONEY.AMOUNT+1
	jsr ADDMONEY

; optimize OK (store.pas), line = 240

	lda Q
	sta ADDMONEY.AMOUNT
	lda Q+1
	sta ADDMONEY.AMOUNT+1
	jsr ADDMONEY

; optimize OK (store.pas), line = 241

	ldy CURRENTPLAYER
	lda adr.PLNEWPOINTS,y
	add #$01
	sta adr.PLNEWPOINTS,y

; optimize FAIL ('WAITFORKEY', store.pas), line = 242

	jsr WAITFORKEY
	jmp @exit
l_4C07
l_4BB3

; optimize OK (store.pas), line = 247

	lda R
	cmp #$03
	jne l_4C46

; optimize OK (store.pas), line = 248

	lda CURRENTSUBLOCATION
	cmp #$03
	jeq l_4C65x
	cmp #$04
	jne l_4C65
l_4C65x

; optimize FAIL ('CRT_WRITELN', store.pas), line = 250

	inx
	mva LOC_STRING_29 :STACKORIGIN,x
	mva LOC_STRING_29+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN

; optimize FAIL ('CRT_WRITELN', store.pas), line = 251

	inx
	mva LOC_STRING_30 :STACKORIGIN,x
	mva LOC_STRING_30+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN

; -------------------  ASM Block 00000173  -------------------

; 
                lda loc_string_31
                sta adr.FP_GANG+$02
                lda loc_string_31+1
                sta adr.FP_GANG+1+$02
            
; optimize OK (store.pas), line = 260

	lda #$01
	sta adr.FP_AI+$01

; optimize OK (store.pas), line = 261

	sta adr.FP_N+$01

; optimize OK (store.pas), line = 262

	lda adr.FP_NAME+$20
	sta @move.dst
	lda adr.FP_NAME+1+$20
	sta @move.dst+1
	lda LOC_STRING_31
	sta @move.src
	lda LOC_STRING_31+1
	sta @move.src+1
	ldy #$00
	lda (@move.src),y
	add #1
	sta @move.cnt
	scc
	iny
	sty @move.cnt+1
	jsr @move

; optimize OK (store.pas), line = 263

	lda #$07
	sta adr.FP_WEAPON+$10

; optimize OK (store.pas), line = 264

	lda #$1E
	sta adr.FP_ENERGY+$10

; optimize FAIL ('DOFIGHT', store.pas), line = 266

	jsr DOFIGHT
	lda DOFIGHT.RESULT
	cmp #$01
	jne l_4C96

; optimize OK (store.pas), line = 268

	lda #$11
	sta RESULT
	jmp @exit
l_4C96

; optimize OK (store.pas), line = 271

	lda P
	sta ADDMONEY.AMOUNT
	lda P+1
	sta ADDMONEY.AMOUNT+1
	jsr ADDMONEY
	jmp l_4CA9
l_4C65

; optimize OK (store.pas), line = 275

	lda #$64
	jsr SYSTEM.RANDOM_02E9
	inx
	mva SYSTEM.RANDOM_02E9.RESULT :STACKORIGIN,x
	inx
	mva #$01 :STACKORIGIN,x
	jsr shlEAX_CL.BYTE
	mva #$96 :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	sta :STACKORIGIN+STACKWIDTH*2,x
	sta :STACKORIGIN+STACKWIDTH*3,x
	jsr addAX_CX
	dex
	lda :STACKORIGIN,x
	sta Q
	lda :STACKORIGIN+STACKWIDTH,x
	sta Q+1

; optimize FAIL ('CRT_WRITELN', store.pas), line = 276

	mva LOC_STRING_32 :STACKORIGIN,x
	mva LOC_STRING_32+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN

; optimize FAIL ('B_CRT.CRT_WRITE_053A', store.pas), line = 277

	inx
	mva LOC_STRING_33 :STACKORIGIN,x
	mva LOC_STRING_33+1 :STACKORIGIN+STACKWIDTH,x
	jsr B_CRT.CRT_WRITE_053A

; optimize OK (store.pas), line = 278

	lda Q
	sta B_CRT.CRT_WRITE_0565.NUM
	lda Q+1
	sta B_CRT.CRT_WRITE_0565.NUM+1
	jsr B_CRT.CRT_WRITE_0565

; optimize FAIL ('B_CRT.CRT_WRITE_053A', store.pas), line = 279

	inx
	mva LOC_STRING_34 :STACKORIGIN,x
	mva LOC_STRING_34+1 :STACKORIGIN+STACKWIDTH,x
	jsr B_CRT.CRT_WRITE_053A

; optimize OK (store.pas), line = 280

	lda P
	sta ADDMONEY.AMOUNT
	lda P+1
	sta ADDMONEY.AMOUNT+1
	jsr ADDMONEY

; optimize OK (store.pas), line = 281

	lda Q
	sta ADDMONEY.AMOUNT
	lda Q+1
	sta ADDMONEY.AMOUNT+1
	jsr ADDMONEY

; optimize FAIL ('WAITFORKEY', store.pas), line = 282

	jsr WAITFORKEY
l_4CA9
l_4C46
@exit

; ------------------------------------------------------------

CHOICE	= DATAORIGIN+$162F
RESULT	= DATAORIGIN+$1631
R	= DATAORIGIN+$1632
K	= DATAORIGIN+$1633
P	= DATAORIGIN+$1634
Q	= DATAORIGIN+$1636

@VarData	= CHOICE
@VarDataSize	= 8

	rts						; ret
.endl

.local	SUBWAYCHOICES					; FUNCTION

; optimize OK (subway.pas), line = 9

	lda #$0C
	sta RESULT

; optimize FAIL ('SHOWLOCATIONHEADER', subway.pas), line = 10

	jsr SHOWLOCATIONHEADER

; optimize OK (subway.pas), line = 12

	mvy CHOICE+1 :bp+1
	ldy CHOICE
	lda (:bp),y
	cmp #$02
	jne l_4CE6

; optimize FAIL ('CRT_WRITELN', subway.pas), line = 14

	inx
	mva LOC_STRING_1 :STACKORIGIN,x
	mva LOC_STRING_1+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN

; optimize FAIL ('CRT_WRITELN', subway.pas), line = 15

	inx
	mva LOC_STRING_2 :STACKORIGIN,x
	mva LOC_STRING_2+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN

; optimize FAIL ('GETYESNO', subway.pas), line = 16

	jsr GETYESNO
	lda GETYESNO.RESULT
	jne l_4CFD
	jmp @exit
l_4CFD

; optimize OK (subway.pas), line = 17

	lda #$32
	sta PAYMONEY.PRICE
	lda #$00
	sta PAYMONEY.PRICE+1
	jsr PAYMONEY
	lda PAYMONEY.RESULT
	jne l_4D11
	jmp @exit
l_4D11

; optimize OK (subway.pas), line = 18

	lda #$04
	jsr SYSTEM.RANDOM_02E9
	lda SYSTEM.RANDOM_02E9.RESULT
	sta LOOT

; optimize OK (subway.pas), line = 19

	sta @CASETMP_0014
	cmp #$00
	jne l_4D24
@

; optimize OK (subway.pas), line = 21

	lda #$08
	sta I
	lda #$02
	sta J
	sta K
	jmp a_0014
l_4D24
	cmp #$01
	jne l_4D39

; optimize OK (subway.pas), line = 24

	lda #$04
	sta I
	lda #$01
	sta J
	lda #$05
	sta K
	jmp a_0014
l_4D39
	cmp #$02
	jne l_4D4E

; optimize OK (subway.pas), line = 27

	lda #$08
	sta I
	lda #$03
	sta J
	lda #$09
	sta K
	jmp a_0014
l_4D4E
	cmp #$03
	jne l_4D63

; optimize OK (subway.pas), line = 30

	lda #$04
	sta I
	lda #$07
	sta J
	sta K
l_4D63
a_0014

; optimize OK (subway.pas), line = 34

	ldy CURRENTPLAYER
	lda I
	sta adr.PLMAPPOSX,y

; optimize OK (subway.pas), line = 35

	lda J
	sta adr.PLMAPPOSY,y

; optimize OK (subway.pas), line = 36

	lda K
	sta adr.PLCURRENTMAP,y

; optimize FAIL ('PLACECURRENTPLAYER', subway.pas), line = 37

	jsr PLACECURRENTPLAYER
l_4CE6

; optimize OK (subway.pas), line = 40

	mvy CHOICE+1 :bp+1
	ldy CHOICE
	lda (:bp),y
	cmp #$01
	jne l_4DA7

; optimize OK (subway.pas), line = 42

	ldy CURRENTPLAYER
	lda adr.PLNGANGSTERS,y
	cmp #$02
	jcc l_4DBD

; optimize FAIL ('CRT_WRITELN', subway.pas), line = 43

	inx
	mva LOC_STRING_3 :STACKORIGIN,x
	mva LOC_STRING_3+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN
l_4DBD

; optimize FAIL ('SELECTGANGSTER', subway.pas), line = 44

	jsr SELECTGANGSTER

; optimize OK (subway.pas), line = 45

	lda CURRENTGANGSTER
	cmp #$63
	jne l_4DD6
	jmp @exit
l_4DD6
l_4DA7

; optimize FAIL ('B_CRT.CRT_NEWLINE_06EB', subway.pas), line = 47

	jsr B_CRT.CRT_NEWLINE_06EB

; optimize FAIL ('CRT_WRITELN', subway.pas), line = 48

	inx
	mva LOC_STRING_4 :STACKORIGIN,x
	mva LOC_STRING_4+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN

; optimize OK (subway.pas), line = 49

	lda #$5A
	jsr WAITFRAMES

; optimize OK (subway.pas), line = 53

	ldy CURRENTGANGSTER
	lda adr.GANGSTERINT,y
	jsr SYSTEM.RANDOM_02E9
	inx
	ldy #1
	lda SYSTEM.RANDOM_02E9.RESULT
	cmp #$0A
	bcc @+
	dey
@
	tya
	sta HOPS
	dex

; optimize OK (subway.pas), line = 54

	lda #$11
	jsr SYSTEM.RANDOM_02E9
	inx
	mva SYSTEM.RANDOM_02E9.RESULT :STACKORIGIN,x
	inx
	mva #$01 :STACKORIGIN,x
	jsr shrAL_CL.BYTE
	dex
	lda :STACKORIGIN,x
	sta LOOT

; optimize FAIL (1, subway.pas), line = 55

	mva LOOT :STACKORIGIN,x
	lda CURRENTSUBLOCATION
	add #$01
	sta SYSTEM.RANDOM_02EA.RANGE
	lda #$00
	adc #$00
	sta SYSTEM.RANDOM_02EA.RANGE+1
	jsr SYSTEM.RANDOM_02EA
	inx
	mva SYSTEM.RANDOM_02EA.RESULT :STACKORIGIN,x
	mva SYSTEM.RANDOM_02EA.RESULT+1 :STACKORIGIN+STACKWIDTH,x
	jsr @expandSHORT2SMALL1
	lda :STACKORIGIN-1,x
	sub :STACKORIGIN,x
	sta LOOT
	dex
	dex

; optimize OK (subway.pas), line = 56

	lda LOOT
	jpl l_4E1D
	lda #$00
	sta LOOT
l_4E1D

; optimize OK (subway.pas), line = 57

	lda HOPS
	cmp #$01
	jne l_4E36
	lda #$00
	sta LOOT
l_4E36

; optimize OK (subway.pas), line = 58

	lda #$00
	sta VALUE
	sta VALUE+1

; optimize OK (subway.pas), line = 59

	lda LOOT
	sta @CASETMP_0015
	cmp #$00
	beq @+
	cmp #$01
	jne l_4E4E
@

; optimize FAIL ('CRT_WRITELN', subway.pas), line = 60

	inx
	mva LOC_STRING_5 :STACKORIGIN,x
	mva LOC_STRING_5+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN
	jmp a_0015
l_4E4E
	cmp #$02
	jne l_4E5A

; optimize FAIL ('CRT_WRITELN', subway.pas), line = 61

	inx
	mva LOC_STRING_6 :STACKORIGIN,x
	mva LOC_STRING_6+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN
	jmp a_0015
l_4E5A
	cmp #$03
	jne l_4E66

; optimize FAIL ('CRT_WRITELN', subway.pas), line = 62

	inx
	mva LOC_STRING_7 :STACKORIGIN,x
	mva LOC_STRING_7+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN
	jmp a_0015
l_4E66
	cmp #$04
	jne l_4E72

; optimize FAIL ('CRT_WRITELN', subway.pas), line = 64

	inx
	mva LOC_STRING_8 :STACKORIGIN,x
	mva LOC_STRING_8+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN

; optimize OK (subway.pas), line = 65

	lda #$32
	sta VALUE
	lda #$00
	sta VALUE+1
	jmp a_0015
l_4E72
	cmp #$05
	jne l_4E82

; optimize FAIL ('CRT_WRITELN', subway.pas), line = 68

	inx
	mva LOC_STRING_9 :STACKORIGIN,x
	mva LOC_STRING_9+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN

; optimize OK (subway.pas), line = 69

	lda #$FA
	sta VALUE
	lda #$00
	sta VALUE+1
	jmp a_0015
l_4E82
	cmp #$06
	jne l_4E92

; optimize FAIL ('CRT_WRITELN', subway.pas), line = 72

	inx
	mva LOC_STRING_10 :STACKORIGIN,x
	mva LOC_STRING_10+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN

; optimize OK (subway.pas), line = 73

	lda #$F4
	sta VALUE
	lda #$01
	sta VALUE+1
	jmp a_0015
l_4E92
	cmp #$07
	jne l_4EA2

; optimize FAIL ('CRT_WRITELN', subway.pas), line = 76

	inx
	mva LOC_STRING_11 :STACKORIGIN,x
	mva LOC_STRING_11+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN

; optimize OK (subway.pas), line = 77

	lda #$20
	sta VALUE
	lda #$03
	sta VALUE+1
	jmp a_0015
l_4EA2
	cmp #$08
	jne l_4EB2

; optimize FAIL ('CRT_WRITELN', subway.pas), line = 80

	inx
	mva LOC_STRING_12 :STACKORIGIN,x
	mva LOC_STRING_12+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN

; optimize OK (subway.pas), line = 81

	ldy CURRENTPLAYER
	lda adr.PLSTUFF,y
	ora #$20
	sta adr.PLSTUFF,y

; optimize FAIL ('WAITFORKEY', subway.pas), line = 82

	jsr WAITFORKEY
	jmp @exit
l_4EB2
a_0015

; optimize FAIL ('WAITFORKEY', subway.pas), line = 86

	jsr WAITFORKEY

; optimize OK (subway.pas), line = 87

	lda LOOT
	sub #$02
	svc
	eor #$80
	jpl l_4EE5

; optimize FAIL ('GOTCAUGHT', subway.pas), line = 88

	jsr GOTCAUGHT

; optimize OK (subway.pas), line = 89

	lda #$11
	sta RESULT
	jmp @exit
l_4EE5

; optimize OK (subway.pas), line = 92

	mvy CHOICE+1 :bp+1
	ldy CHOICE
	lda (:bp),y
	cmp #$02
	jne l_4EFF
	jsr LOADMAP
l_4EFF

; optimize OK (subway.pas), line = 93

	lda VALUE
	sta ADDMONEY.AMOUNT
	lda VALUE+1
	sta ADDMONEY.AMOUNT+1
	jsr ADDMONEY

; optimize OK (subway.pas), line = 94

	ldy CURRENTPLAYER
	lda adr.PLNEWPOINTS,y
	add #$01
	sta adr.PLNEWPOINTS,y
@exit

; ------------------------------------------------------------

CHOICE	= DATAORIGIN+$1639
RESULT	= DATAORIGIN+$163B
LOOT	= DATAORIGIN+$163C
VALUE	= DATAORIGIN+$163D
HOPS	= DATAORIGIN+$163F
I	= DATAORIGIN+$1640
J	= DATAORIGIN+$1641
K	= DATAORIGIN+$1642
@CASETMP_0014	= DATAORIGIN+$1643
@CASETMP_0015	= DATAORIGIN+$1644

@VarData	= CHOICE
@VarDataSize	= 11

	rts						; ret
.endl

.local	CENTRALSTATIONCHOICES				; FUNCTION

; optimize OK (centralstation.pas), line = 6

	lda #$17
	sta RESULT

; optimize OK (centralstation.pas), line = 7

	mvy CHOICE+1 :bp+1
	ldy CHOICE
	lda (:bp),y
	cmp #$01
	jne l_4F30

; optimize OK (centralstation.pas), line = 9

	lda #$07
	jsr LOADLOCATION

; optimize OK (centralstation.pas), line = 10

	lda #$07
	jsr SHOWLOCATION
	mwy CHOICE :bp2
	ldy #$00
	lda SHOWLOCATION.RESULT
	sta (:bp2),y

; optimize OK (centralstation.pas), line = 11

	mvy CHOICE+1 :bp+1
	ldy CHOICE
	lda (:bp),y
	cmp LOC_NOPTIONS
	jne l_4F4C

; optimize OK (centralstation.pas), line = 13

	lda #$0F
	sta CURRENTLOCATION
	jmp @exit
l_4F4C

; optimize OK (centralstation.pas), line = 16

	lda CHOICE
	sta PUBCHOICES.CHOICE
	lda CHOICE+1
	sta PUBCHOICES.CHOICE+1
	jsr PUBCHOICES
	lda PUBCHOICES.RESULT
	sta RESULT
	jmp @exit
l_4F30

; optimize OK (centralstation.pas), line = 20

	mvy CHOICE+1 :bp+1
	ldy CHOICE
	lda (:bp),y
	cmp #$02
	jne l_4F6D

; optimize OK (centralstation.pas), line = 22

	lda #$0C
	jsr LOADLOCATION

; optimize OK (centralstation.pas), line = 23

	mwy CHOICE :bp2
	ldy #$00
	lda #$01
	sta (:bp2),y

; optimize OK (centralstation.pas), line = 24

	lda CHOICE
	sta SUBWAYCHOICES.CHOICE
	lda CHOICE+1
	sta SUBWAYCHOICES.CHOICE+1
	jsr SUBWAYCHOICES
	lda SUBWAYCHOICES.RESULT
	sta RESULT
	jmp @exit
l_4F6D

; optimize OK (centralstation.pas), line = 28

	mvy CHOICE+1 :bp+1
	ldy CHOICE
	lda (:bp),y
	cmp #$03
	jne l_4F8E

; optimize FAIL ('SHOWLOCATIONHEADER', centralstation.pas), line = 30

	jsr SHOWLOCATIONHEADER

; optimize OK (centralstation.pas), line = 31

	ldy CURRENTPLAYER
	lda adr.PLOPPORTUNITY,y
	ora #$01
	jne l_4FA9

; optimize FAIL ('CRT_WRITELN', centralstation.pas), line = 33

	inx
	mva LOC_STRING_1 :STACKORIGIN,x
	mva LOC_STRING_1+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN

; optimize FAIL ('WAITFORKEY', centralstation.pas), line = 34

	jsr WAITFORKEY
	jmp @exit
l_4FA9

; optimize OK (centralstation.pas), line = 38

	ldy CURRENTPLAYER
	lda adr.PLNGANGSTERS,y
	cmp #$03
	jcs l_4FC5

; optimize FAIL ('CRT_WRITELN', centralstation.pas), line = 39

	inx
	mva LOC_STRING_2 :STACKORIGIN,x
	mva LOC_STRING_2+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN

; optimize OK (centralstation.pas), line = 40

	ldy CURRENTPLAYER
	lda adr.PLOPPORTUNITY,y
	and #$FE
	sta adr.PLOPPORTUNITY,y

; optimize FAIL ('WAITFORKEY', centralstation.pas), line = 41

	jsr WAITFORKEY
	jmp @exit
l_4FC5

; optimize FAIL ('CRT_WRITELN', centralstation.pas), line = 45

	inx
	mva LOC_STRING_3 :STACKORIGIN,x
	mva LOC_STRING_3+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN

; optimize FAIL ('CRT_WRITELN', centralstation.pas), line = 46

	inx
	mva LOC_STRING_4 :STACKORIGIN,x
	mva LOC_STRING_4+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN

; optimize FAIL ('CRT_WRITELN', centralstation.pas), line = 47

	inx
	mva LOC_STRING_5 :STACKORIGIN,x
	mva LOC_STRING_5+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN

; optimize FAIL ('WAITFORKEY', centralstation.pas), line = 48

	jsr WAITFORKEY

; -------------------  ASM Block 00000174  -------------------

; 
            lda loc_string_7
            sta adr.FP_GANG+$02
            lda loc_string_7+1
            sta adr.FP_GANG+1+$02
        
; optimize OK (centralstation.pas), line = 59

	lda #$01
	sta adr.FP_AI+$01

; optimize OK (centralstation.pas), line = 60

	lda #$03
	sta adr.FP_N+$01

; -------------------  ASM Block 00000175  -------------------

            ldy #$00
        @:
            tya 
            asl 
            tay

            lda loc_string_8
            sta adr.FP_NAME+$20,y
            lda loc_string_8+1
            sta adr.FP_NAME+1+$20,y

            tya
            lsr 
            tay

            lda #30
            sta adr.FP_ENERGY+$10,y
            lda #7
            sta adr.FP_WEAPON+$10,y
            iny
            cpy adr.FP_N+$01
            bne @- 
        
; optimize FAIL ('DOFIGHT', centralstation.pas), line = 94

	jsr DOFIGHT
	lda DOFIGHT.RESULT
	cmp #$01
	jne l_5000

; optimize FAIL ('GOTCAUGHT', centralstation.pas), line = 96

	jsr GOTCAUGHT

; optimize OK (centralstation.pas), line = 97

	lda #$11
	sta RESULT
	jmp @exit
l_5000

; optimize OK (centralstation.pas), line = 100

	lda #$88
	sta CRACKEDBANK.P
	lda #$13
	sta CRACKEDBANK.P+1
	jsr CRACKEDBANK
l_4F8E
@exit

; ------------------------------------------------------------

CHOICE	= DATAORIGIN+$1645
RESULT	= DATAORIGIN+$1647
R	= DATAORIGIN+$1648
K	= DATAORIGIN+$1649
OUTCOME	= DATAORIGIN+$164A

@VarData	= CHOICE
@VarDataSize	= 5

	rts						; ret
.endl

.local	MAJORCHOICES					; FUNCTION

; optimize OK (major.pas), line = 5

	lda #$03
	jsr LOADLOCATION

; optimize FAIL ('SHOWLOCATIONHEADER', major.pas), line = 6

	jsr SHOWLOCATIONHEADER

; optimize FAIL ('CRT_WRITELN', major.pas), line = 8

	inx
	mva LOC_STRING_6 :STACKORIGIN,x
	mva LOC_STRING_6+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN

; optimize FAIL ('CRT_WRITELN', major.pas), line = 9

	inx
	mva LOC_STRING_7 :STACKORIGIN,x
	mva LOC_STRING_7+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN

; optimize FAIL ('WAITFORKEY', major.pas), line = 10

	jsr WAITFORKEY

; optimize OK (major.pas), line = 12

	ldy CURRENTPLAYER
	lda adr.PLOPPORTUNITY,y
	and #$EF
	sta adr.PLOPPORTUNITY,y

; -------------------  ASM Block 00000176  -------------------

; 
            lda loc_string_8
            sta adr.FP_GANG+$02
            lda loc_string_8+1
            sta adr.FP_GANG+1+$02
        
; optimize OK (major.pas), line = 23

	lda #$01
	sta adr.FP_AI+$01

; optimize OK (major.pas), line = 24

	lda #$05
	sta adr.FP_N+$01

; -------------------  ASM Block 00000177  -------------------

        ldy #$00
    @:
        tya 
        asl 
        tay

        lda loc_string_8
        sta adr.FP_NAME+$20,y
        lda loc_string_8+1
        sta adr.FP_NAME+1+$20,y

        tya
        lsr 
        tay

        lda #20
        sta adr.FP_ENERGY+$10,y
        lda #07
        sta adr.FP_WEAPON+$10,y
        iny
        cpy adr.FP_N+$01
        bne @- 
    
; optimize FAIL ('DOFIGHT', major.pas), line = 57

	jsr DOFIGHT
	lda DOFIGHT.RESULT
	cmp #$01
	jne l_5044

; optimize FAIL ('GOTCAUGHT', major.pas), line = 59

	jsr GOTCAUGHT

; optimize OK (major.pas), line = 60

	lda #$11
	sta RESULT
	jmp @exit
l_5044

; -------------------  ASM Block 00000178  -------------------

; 
        lda loc_string_9
        sta adr.FP_GANG+$02
        lda loc_string_9+1
        sta adr.FP_GANG+1+$02
    
; optimize OK (major.pas), line = 73

	lda #$01
	sta adr.FP_AI+$01

; optimize OK (major.pas), line = 74

	sta adr.FP_N+$01

; optimize OK (major.pas), line = 75

	lda adr.FP_NAME+$20
	sta @move.dst
	lda adr.FP_NAME+1+$20
	sta @move.dst+1
	lda LOC_STRING_9
	sta @move.src
	lda LOC_STRING_9+1
	sta @move.src+1
	ldy #$00
	lda (@move.src),y
	add #1
	sta @move.cnt
	scc
	iny
	sty @move.cnt+1
	jsr @move

; optimize OK (major.pas), line = 76

	lda #$1E
	sta adr.FP_ENERGY+$10

; optimize OK (major.pas), line = 77

	lda #$01
	sta adr.FP_WEAPON+$10

; optimize FAIL (1, major.pas), line = 78

	inx
	mva #$10 :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	lda #$02
	jsr SYSTEM.RANDOM_02E9
	ldy :STACKORIGIN,x
	lda SYSTEM.RANDOM_02E9.RESULT
	sta adr.FP_SEX,y
	dex

; optimize FAIL ('DOFIGHT', major.pas), line = 81

	jsr DOFIGHT
	lda DOFIGHT.RESULT
	cmp #$01
	jne l_507C

; optimize FAIL ('GOTCAUGHT', major.pas), line = 83

	jsr GOTCAUGHT

; optimize OK (major.pas), line = 84

	lda #$11
	sta RESULT
	jmp @exit
l_507C

; optimize FAIL ('SHOWLOCATIONHEADER', major.pas), line = 88

	jsr SHOWLOCATIONHEADER

; optimize FAIL ('CRT_WRITELN', major.pas), line = 89

	inx
	mva LOC_STRING_10 :STACKORIGIN,x
	mva LOC_STRING_10+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN

; optimize FAIL ('CRT_WRITELN', major.pas), line = 90

	inx
	mva LOC_STRING_11 :STACKORIGIN,x
	mva LOC_STRING_11+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN

; optimize FAIL ('WAITFORKEY', major.pas), line = 91

	jsr WAITFORKEY

; optimize OK (major.pas), line = 92

	lda #$58
	sta ADDMONEY.AMOUNT
	lda #$1B
	sta ADDMONEY.AMOUNT+1
	jsr ADDMONEY

; optimize OK (major.pas), line = 93

	ldy CURRENTPLAYER
	lda #$01
	sta adr.PLFORGEDID,y
@exit

; ------------------------------------------------------------

CHOICE	= DATAORIGIN+$164B
RESULT	= DATAORIGIN+$164D
K	= DATAORIGIN+$164E

@VarData	= CHOICE
@VarDataSize	= 3

	rts						; ret
.endl

.local	MONEYTRANSPORTERCHOICES				; FUNCTION

; optimize OK (moneytransporter.pas), line = 5

	lda #$03
	jsr LOADLOCATION

; optimize FAIL ('SHOWLOCATIONHEADER', moneytransporter.pas), line = 6

	jsr SHOWLOCATIONHEADER

; optimize OK (moneytransporter.pas), line = 8

	ldy CURRENTPLAYER
	lda adr.PLNGANGSTERS,y
	cmp #$03
	jcs l_50B1

; optimize FAIL ('CRT_WRITELN', moneytransporter.pas), line = 10

	inx
	mva LOC_STRING_1 :STACKORIGIN,x
	mva LOC_STRING_1+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN

; optimize FAIL ('WAITFORKEY', moneytransporter.pas), line = 11

	jsr WAITFORKEY

; optimize OK (moneytransporter.pas), line = 12

	ldy CURRENTPLAYER
	lda adr.PLOPPORTUNITY,y
	and #$FB
	sta adr.PLOPPORTUNITY,y
	jmp @exit
l_50B1

; optimize FAIL ('CRT_WRITELN', moneytransporter.pas), line = 16

	inx
	mva LOC_STRING_2 :STACKORIGIN,x
	mva LOC_STRING_2+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN

; optimize FAIL ('CRT_WRITELN', moneytransporter.pas), line = 17

	inx
	mva LOC_STRING_3 :STACKORIGIN,x
	mva LOC_STRING_3+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN

; optimize FAIL ('WAITFORKEY', moneytransporter.pas), line = 18

	jsr WAITFORKEY

; -------------------  ASM Block 00000179  -------------------

; 
        lda loc_string_4
        sta adr.FP_GANG+$02
        lda loc_string_4+1
        sta adr.FP_GANG+1+$02
    
; optimize OK (moneytransporter.pas), line = 29

	lda #$01
	sta adr.FP_AI+$01

; optimize OK (moneytransporter.pas), line = 30

	lda #$0A
	sta adr.FP_N+$01

; -------------------  ASM Block 00000180  -------------------

        ldy #$00
    @:
        tya 
        asl 
        tay

        lda loc_string_5
        sta adr.FP_NAME+$20,y
        lda loc_string_5+1
        sta adr.FP_NAME+1+$20,y

        tya
        lsr 
        tay

        lda #50
        sta adr.FP_ENERGY+$10,y
        lda #07
        sta adr.FP_WEAPON+$10,y
        iny
        cpy adr.FP_N+$01
        bne @- 
    
; optimize FAIL ('DOFIGHT', moneytransporter.pas), line = 65

	jsr DOFIGHT
	lda DOFIGHT.RESULT
	cmp #$01
	jne l_50E9

; optimize FAIL ('GOTCAUGHT', moneytransporter.pas), line = 67

	jsr GOTCAUGHT

; optimize OK (moneytransporter.pas), line = 68

	lda #$11
	sta RESULT
	jmp @exit
l_50E9

; optimize OK (moneytransporter.pas), line = 71

	ldy CURRENTPLAYER
	lda #$01
	sta adr.PLMONEYTRANSPORTER,y

; optimize OK (moneytransporter.pas), line = 72

	lda #$10
	sta CRACKEDBANK.P
	lda #$27
	sta CRACKEDBANK.P+1
	jsr CRACKEDBANK

; optimize OK (moneytransporter.pas), line = 73

	ldy CURRENTPLAYER
	lda adr.PLNEWPOINTS,y
	add #$04
	sta adr.PLNEWPOINTS,y

; optimize FAIL ('WAITFORKEY', moneytransporter.pas), line = 74

	jsr WAITFORKEY

; optimize OK (moneytransporter.pas), line = 75

	ldy CURRENTPLAYER
	lda adr.PLOPPORTUNITY,y
	and #$FB
	sta adr.PLOPPORTUNITY,y
@exit

; ------------------------------------------------------------

CHOICE	= DATAORIGIN+$164F
RESULT	= DATAORIGIN+$1651
K	= DATAORIGIN+$1652

@VarData	= CHOICE
@VarDataSize	= 3

	rts						; ret
.endl

.local	PRINTMAPSTATUS					; PROCEDURE

; optimize OK (map.pas), line = 8

	lda MAPRELOADED
	jne l_5131

; optimize OK (map.pas), line = 10

	lda #$00
	ldy #256-240
	sta:rne $F6F8+240-256,y+

; optimize OK (map.pas), line = 11

	ldy CURRENTPLAYER
	lda adr.PLRANK,y
	sta Z

; optimize OK (map.pas), line = 12

	asl @
	tay
	lda adr.RANKNAMES+1,y
	sta :bp+1
	lda adr.RANKNAMES,y
	tay
	lda (:bp),y
	add #$03
	sta L

; optimize OK (map.pas), line = 13

	lda CURRENTPLAYER
	asl @
	asl @
	asl @
	sta I

; optimize OK (map.pas), line = 14

	asl @
	tay
	lda adr.GANGSTERNAMES+1,y
	sta :bp+1
	lda adr.GANGSTERNAMES,y
	tay
	lda L
	add (:bp),y
	sta P

; optimize OK (map.pas), line = 15

	lda #$28
	sub P
	sta :STACKORIGIN+10
	lda #$00
	sbc #$00
	sta :STACKORIGIN+STACKWIDTH+10
	lsr :STACKORIGIN+STACKWIDTH+10
	ror :STACKORIGIN+10
	lda :STACKORIGIN+10
	sta B_CRT.CRT_GOTOXY.X
	lda #$13
	sta B_CRT.CRT_GOTOXY.Y
	jsr B_CRT.CRT_GOTOXY

; optimize FAIL ('B_CRT.CRT_WRITE_053A', map.pas), line = 16

	inx
	lda I
	asl @
	tay
	lda adr.GANGSTERNAMES,y
	sta :STACKORIGIN,x
	lda adr.GANGSTERNAMES+1,y
	sta :STACKORIGIN+STACKWIDTH,x
	jsr B_CRT.CRT_WRITE_053A

; optimize FAIL ('B_CRT.CRT_WRITE_053A', map.pas), line = 17

	inx
	mva #$3F :STACKORIGIN,x
	mva #$0E :STACKORIGIN+STACKWIDTH,x
	jsr B_CRT.CRT_WRITE_053A

; optimize FAIL ('B_CRT.CRT_WRITE_053A', map.pas), line = 18

	inx
	lda Z
	asl @
	tay
	lda adr.RANKNAMES,y
	sta :STACKORIGIN,x
	lda adr.RANKNAMES+1,y
	sta :STACKORIGIN+STACKWIDTH,x
	jsr B_CRT.CRT_WRITE_053A

; optimize OK (map.pas), line = 23

	lda #$09
	jsr B_CRT.CRT_WRITE_054D

; optimize OK (map.pas), line = 24

	lda #$00
	sta B_CRT.CRT_INVERT.X
	lda #$13
	sta B_CRT.CRT_INVERT.Y
	lda B_CRT.CRT_SCREENWIDTH
	sta B_CRT.CRT_INVERT.WIDTH
	jsr B_CRT.CRT_INVERT

; optimize OK (map.pas), line = 26

	lda #$00
	sta B_CRT.CRT_GOTOXY.X
	lda #$14
	sta B_CRT.CRT_GOTOXY.Y
	jsr B_CRT.CRT_GOTOXY

; optimize FAIL ('B_CRT.CRT_WRITE_053A', map.pas), line = 27

	inx
	mva MAP_STRING_WEAPON :STACKORIGIN,x
	mva MAP_STRING_WEAPON+1 :STACKORIGIN+STACKWIDTH,x
	jsr B_CRT.CRT_WRITE_053A

; optimize OK (map.pas), line = 28

	ldy I
	lda adr.GANGSTERWEAPON,y
	sta Z

; optimize FAIL ('B_CRT.CRT_WRITE_053A', map.pas), line = 29

	inx
	lda Z
	asl @
	tay
	lda adr.WEAPONNAMES,y
	sta :STACKORIGIN,x
	lda adr.WEAPONNAMES+1,y
	sta :STACKORIGIN+STACKWIDTH,x
	jsr B_CRT.CRT_WRITE_053A

; optimize OK (map.pas), line = 31

	lda #$1E
	sta B_CRT.CRT_GOTOXY.X
	lda #$14
	sta B_CRT.CRT_GOTOXY.Y
	jsr B_CRT.CRT_GOTOXY

; optimize FAIL ('B_CRT.CRT_WRITE_053A', map.pas), line = 32

	inx
	mva MAP_STRING_GANGSTER :STACKORIGIN,x
	mva MAP_STRING_GANGSTER+1 :STACKORIGIN+STACKWIDTH,x
	jsr B_CRT.CRT_WRITE_053A

; optimize OK (map.pas), line = 33

	ldy CURRENTPLAYER
	lda adr.PLNGANGSTERS,y
	sub #$01
	sta B_CRT.CRT_WRITE_056E.NUM
	lda #$00
	sbc #$00
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #$00
	lda :STACKORIGIN+STACKWIDTH+9
	spl
	dey
	sta B_CRT.CRT_WRITE_056E.NUM+1
	sty B_CRT.CRT_WRITE_056E.NUM+2
	sty B_CRT.CRT_WRITE_056E.NUM+3
	jsr B_CRT.CRT_WRITE_056E

; optimize OK (map.pas), line = 35

	lda #$00
	sta B_CRT.CRT_GOTOXY.X
	lda #$15
	sta B_CRT.CRT_GOTOXY.Y
	jsr B_CRT.CRT_GOTOXY

; optimize FAIL ('B_CRT.CRT_WRITE_053A', map.pas), line = 36

	inx
	mva MAP_STRING_CAR :STACKORIGIN,x
	mva MAP_STRING_CAR+1 :STACKORIGIN+STACKWIDTH,x
	jsr B_CRT.CRT_WRITE_053A

; optimize OK (map.pas), line = 38

	ldy CURRENTPLAYER
	lda adr.PLCAR,y
	sta Z

; optimize FAIL ('B_CRT.CRT_WRITE_053A', map.pas), line = 39

	inx
	lda Z
	asl @
	tay
	lda adr.CARNAMES,y
	sta :STACKORIGIN,x
	lda adr.CARNAMES+1,y
	sta :STACKORIGIN+STACKWIDTH,x
	jsr B_CRT.CRT_WRITE_053A

; optimize OK (map.pas), line = 41

	lda #$1B
	sta I

; optimize OK (map.pas), line = 42

	ldy CURRENTPLAYER
	lda adr.PLBRIBE,y
	cmp #$0A
	jcs l_51D6
	lda #$1C
	sta I
l_51D6

; optimize OK (map.pas), line = 43

	lda I
	sta B_CRT.CRT_GOTOXY.X
	lda #$15
	sta B_CRT.CRT_GOTOXY.Y
	jsr B_CRT.CRT_GOTOXY

; optimize FAIL ('B_CRT.CRT_WRITE_053A', map.pas), line = 44

	inx
	mva MAP_STRING_BRIBE :STACKORIGIN,x
	mva MAP_STRING_BRIBE+1 :STACKORIGIN+STACKWIDTH,x
	jsr B_CRT.CRT_WRITE_053A

; optimize OK (map.pas), line = 45

	ldy CURRENTPLAYER
	lda adr.PLBRIBE,y
	jsr B_CRT.CRT_WRITE_055B

; optimize OK (map.pas), line = 47

	lda #$00
	sta B_CRT.CRT_GOTOXY.X
	lda #$16
	sta B_CRT.CRT_GOTOXY.Y
	jsr B_CRT.CRT_GOTOXY

; optimize FAIL ('B_CRT.CRT_WRITE_053A', map.pas), line = 48

	inx
	mva MAP_STRING_RENT :STACKORIGIN,x
	mva MAP_STRING_RENT+1 :STACKORIGIN+STACKWIDTH,x
	jsr B_CRT.CRT_WRITE_053A

; optimize OK (map.pas), line = 49

	ldy CURRENTPLAYER
	lda adr.PLRENTMONTHS,y
	jsr B_CRT.CRT_WRITE_055B

; optimize OK (map.pas), line = 51

	lda #$0F
	sta B_CRT.CRT_GOTOXY.X
	lda #$16
	sta B_CRT.CRT_GOTOXY.Y
	jsr B_CRT.CRT_GOTOXY

; optimize FAIL ('B_CRT.CRT_WRITE_053A', map.pas), line = 52

	inx
	mva MAP_STRING_STEPS :STACKORIGIN,x
	mva MAP_STRING_STEPS+1 :STACKORIGIN+STACKWIDTH,x
	jsr B_CRT.CRT_WRITE_053A

; optimize OK (map.pas), line = 53

	ldy CURRENTPLAYER
	lda adr.PLSTEPS,y
	sta :STACKORIGIN+9
	ldy #$00
	lda :STACKORIGIN+9
	spl
	dey
	sta B_CRT.CRT_WRITE_056E.NUM
	sty B_CRT.CRT_WRITE_056E.NUM+1
	sty B_CRT.CRT_WRITE_056E.NUM+2
	sty B_CRT.CRT_WRITE_056E.NUM+3
	jsr B_CRT.CRT_WRITE_056E

; optimize FAIL ('B_CRT.CRT_WRITE_053A', map.pas), line = 54

	inx
	mva #$43 :STACKORIGIN,x
	mva #$0E :STACKORIGIN+STACKWIDTH,x
	jsr B_CRT.CRT_WRITE_053A

; optimize OK (map.pas), line = 55

	ldy CURRENTPLAYER
	lda adr.PLCAR,y
	tay
	lda adr.CARCARGO,y
	ldy CURRENTPLAYER
	sub adr.PLALCOHOL,y
	sta Z

; optimize OK (map.pas), line = 56

	lda #$20
	sta I

; optimize OK (map.pas), line = 57

	lda Z
	cmp #$0A
	jcs l_5233
	lda #$21
	sta I
l_5233

; optimize OK (map.pas), line = 58

	lda I
	sta B_CRT.CRT_GOTOXY.X
	lda #$16
	sta B_CRT.CRT_GOTOXY.Y
	jsr B_CRT.CRT_GOTOXY

; optimize FAIL ('B_CRT.CRT_WRITE_053A', map.pas), line = 59

	inx
	mva MAP_STRING_CARGO :STACKORIGIN,x
	mva MAP_STRING_CARGO+1 :STACKORIGIN+STACKWIDTH,x
	jsr B_CRT.CRT_WRITE_053A

; optimize OK (map.pas), line = 60

	lda Z
	jsr B_CRT.CRT_WRITE_055B

; optimize OK (map.pas), line = 62

	lda #$00
	sta B_CRT.CRT_GOTOXY.X
	lda #$17
	sta B_CRT.CRT_GOTOXY.Y
	jsr B_CRT.CRT_GOTOXY

; optimize FAIL ('B_CRT.CRT_WRITE_053A', map.pas), line = 63

	inx
	mva MAP_STRING_MONEY :STACKORIGIN,x
	mva MAP_STRING_MONEY+1 :STACKORIGIN+STACKWIDTH,x
	jsr B_CRT.CRT_WRITE_053A

; optimize OK (map.pas), line = 64

	lda CURRENTPLAYER
	asl @
	asl @
	tay
	lda adr.PLMONEY,y
	sta B_CRT.CRT_WRITE_056E.NUM
	lda adr.PLMONEY+1,y
	sta B_CRT.CRT_WRITE_056E.NUM+1
	lda adr.PLMONEY+2,y
	sta B_CRT.CRT_WRITE_056E.NUM+2
	lda adr.PLMONEY+3,y
	sta B_CRT.CRT_WRITE_056E.NUM+3
	jsr B_CRT.CRT_WRITE_056E

; optimize OK (map.pas), line = 66

	lda #$17
	sta B_CRT.CRT_GOTOXY.X
	sta B_CRT.CRT_GOTOXY.Y
	jsr B_CRT.CRT_GOTOXY

; optimize FAIL ('B_CRT.CRT_WRITE_053A', map.pas), line = 67

	inx
	mva MAP_STRING_CREDIT :STACKORIGIN,x
	mva MAP_STRING_CREDIT+1 :STACKORIGIN+STACKWIDTH,x
	jsr B_CRT.CRT_WRITE_053A

; optimize OK (map.pas), line = 68

	lda CURRENTPLAYER
	asl @
	tay
	lda adr.PLLOAN,y
	sta B_CRT.CRT_WRITE_056E.NUM
	lda adr.PLLOAN+1,y
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #$00
	lda :STACKORIGIN+STACKWIDTH+9
	spl
	dey
	sta B_CRT.CRT_WRITE_056E.NUM+1
	sty B_CRT.CRT_WRITE_056E.NUM+2
	sty B_CRT.CRT_WRITE_056E.NUM+3
	jsr B_CRT.CRT_WRITE_056E

; optimize OK (map.pas), line = 69

	lda #$23
	sta B_CRT.CRT_GOTOXY.X
	lda #$17
	sta B_CRT.CRT_GOTOXY.Y
	jsr B_CRT.CRT_GOTOXY

; optimize OK (map.pas), line = 70

	lda #$08
	jsr B_CRT.CRT_WRITE_054D

; optimize OK (map.pas), line = 71

	ldy CURRENTPLAYER
	lda adr.PLLOANTIME,y
	jsr B_CRT.CRT_WRITE_055B

; optimize FAIL ('B_CRT.CRT_WRITE_053A', map.pas), line = 72

	inx
	mva #$48 :STACKORIGIN,x
	mva #$0E :STACKORIGIN+STACKWIDTH,x
	jsr B_CRT.CRT_WRITE_053A

; optimize OK (map.pas), line = 73

	lda #$01
	sta MAPRELOADED
l_5131

; optimize FAIL ('B_SYSTEM.WAITFRAME', map.pas), line = 75

	jsr B_SYSTEM.WAITFRAME

; optimize OK (map.pas), line = 76

	lda #$0F
	sta B_CRT.CRT_GOTOXY.X
	lda #$16
	sta B_CRT.CRT_GOTOXY.Y
	jsr B_CRT.CRT_GOTOXY

; optimize FAIL ('B_CRT.CRT_WRITE_053A', map.pas), line = 77

	inx
	mva MAP_STRING_STEPS :STACKORIGIN,x
	mva MAP_STRING_STEPS+1 :STACKORIGIN+STACKWIDTH,x
	jsr B_CRT.CRT_WRITE_053A

; optimize OK (map.pas), line = 78

	ldy CURRENTPLAYER
	lda adr.PLSTEPS,y
	sta :STACKORIGIN+9
	ldy #$00
	lda :STACKORIGIN+9
	spl
	dey
	sta B_CRT.CRT_WRITE_056E.NUM
	sty B_CRT.CRT_WRITE_056E.NUM+1
	sty B_CRT.CRT_WRITE_056E.NUM+2
	sty B_CRT.CRT_WRITE_056E.NUM+3
	jsr B_CRT.CRT_WRITE_056E

; optimize FAIL ('B_CRT.CRT_WRITE_053A', map.pas), line = 79

	inx
	mva #$43 :STACKORIGIN,x
	mva #$0E :STACKORIGIN+STACKWIDTH,x
	jsr B_CRT.CRT_WRITE_053A

; ------------------------------------------------------------

L	= DATAORIGIN+$1653
Z	= DATAORIGIN+$1654
I	= DATAORIGIN+$1655
P	= DATAORIGIN+$1656

@VarData	= L
@VarDataSize	= 4

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	DRAWMAJORMONEY					; PROCEDURE

; optimize OK (map.pas), line = 87

	lda CURRENTMAP
	cmp #$07
	jne l_5297

; optimize OK (map.pas), line = 93

	ldy CURRENTPLAYER
	lda adr.PLOPPORTUNITY,y
	and #$04
	jne l_52B1

; optimize OK (map.pas), line = 96

	lda #$58
	sta $FA42
	sta $FA42+1

; optimize OK (map.pas), line = 97

	sta $FA44
	sta $FA44+1

; optimize OK (map.pas), line = 98

	sta $FA46
	sta $FA46+1

; optimize OK (map.pas), line = 99

	lda #$04
	sta $F642

; optimize OK (map.pas), line = 100

	sta $F644

; optimize OK (map.pas), line = 101

	sta $F646

; optimize OK (map.pas), line = 102

	lda #$05
	sta $F643

; optimize OK (map.pas), line = 103

	sta $F645

; optimize OK (map.pas), line = 104

	sta $F647

; optimize OK (map.pas), line = 106

	lda #$2E
	sta $FA6A
	sta $FA6A+1

; optimize OK (map.pas), line = 107

	sta $FA6C
	sta $FA6C+1

; optimize OK (map.pas), line = 108

	sta $FA6E
	sta $FA6E+1

; optimize OK (map.pas), line = 109

	lda #$1C
	sta $F66A

; optimize OK (map.pas), line = 110

	sta $F66C

; optimize OK (map.pas), line = 111

	sta $F66E

; optimize OK (map.pas), line = 112

	lda #$1D
	sta $F66B

; optimize OK (map.pas), line = 113

	sta $F66D

; optimize OK (map.pas), line = 114

	sta $F66F
	jmp l_52F1
l_52B1

; optimize OK (map.pas), line = 119

	lda #$4D
	sta $FA42
	sta $FA42+1

; optimize OK (map.pas), line = 120

	sta $FA44
	sta $FA44+1

; optimize OK (map.pas), line = 121

	sta $FA46
	sta $FA46+1

; optimize OK (map.pas), line = 122

	lda #$4B
	sta $F642
	lda #$4C
	sta $F642+1

; optimize OK (map.pas), line = 123

	lda #$4D
	sta $F644
	lda #$4E
	sta $F644+1

; optimize OK (map.pas), line = 124

	lda #$4F
	sta $F646
	lda #$50
	sta $F646+1

; optimize OK (map.pas), line = 126

	lda #$4D
	sta $FA6A
	sta $FA6A+1

; optimize OK (map.pas), line = 127

	sta $FA6C
	sta $FA6C+1

; optimize OK (map.pas), line = 128

	sta $FA6E
	sta $FA6E+1

; optimize OK (map.pas), line = 129

	lda #$56
	sta $F66A
	lda #$57
	sta $F66A+1

; optimize OK (map.pas), line = 130

	lda #$58
	sta $F66C
	lda #$59
	sta $F66C+1

; optimize OK (map.pas), line = 131

	lda #$5A
	sta $F66E
	lda #$5B
	sta $F66E+1
l_52F1

; optimize OK (map.pas), line = 134

	ldy CURRENTPLAYER
	lda adr.PLOPPORTUNITY,y
	and #$10
	jne l_532E

; optimize OK (map.pas), line = 138

	lda #$58
	sta $F90C
	sta $F90C+1

; optimize OK (map.pas), line = 139

	sta $F90E
	sta $F90E+1

; optimize OK (map.pas), line = 141

	lda #$2E
	sta $F934
	sta $F934+1

; optimize OK (map.pas), line = 142

	sta $F936
	sta $F936+1

; optimize OK (map.pas), line = 144

	lda #$04
	sta $F50C

; optimize OK (map.pas), line = 145

	sta $F50E

; optimize OK (map.pas), line = 146

	sta $F534

; optimize OK (map.pas), line = 147

	sta $F536

; optimize OK (map.pas), line = 148

	lda #$05
	sta $F50D

; optimize OK (map.pas), line = 149

	sta $F50F

; optimize OK (map.pas), line = 150

	sta $F535

; optimize OK (map.pas), line = 151

	sta $F537

; optimize OK (map.pas), line = 153

	lda #$2E
	sta $F95C
	sta $F95C+1

; optimize OK (map.pas), line = 154

	sta $F95E
	sta $F95E+1

; optimize OK (map.pas), line = 155

	lda #$1C
	sta $F55C

; optimize OK (map.pas), line = 156

	sta $F55E

; optimize OK (map.pas), line = 157

	lda #$1D
	sta $F55D

; optimize OK (map.pas), line = 158

	sta $F55F
	jmp l_536E
l_532E

; optimize OK (map.pas), line = 164

	lda #$4E
	sta $F90C
	sta $F90C+1

; optimize OK (map.pas), line = 165

	sta $F90E
	sta $F90E+1

; optimize OK (map.pas), line = 166

	lda #$2C
	sta $F50C
	lda #$2D
	sta $F50C+1

; optimize OK (map.pas), line = 167

	lda #$2E
	sta $F50E
	lda #$2F
	sta $F50E+1

; optimize OK (map.pas), line = 169

	lda #$4E
	sta $F934
	sta $F934+1

; optimize OK (map.pas), line = 170

	sta $F936
	sta $F936+1

; optimize OK (map.pas), line = 171

	lda #$38
	sta $F534
	lda #$39
	sta $F534+1

; optimize OK (map.pas), line = 172

	lda #$3A
	sta $F536
	lda #$3B
	sta $F536+1

; optimize OK (map.pas), line = 174

	lda #$4E
	sta $F95C
	sta $F95C+1

; optimize OK (map.pas), line = 175

	sta $F95E
	sta $F95E+1

; optimize OK (map.pas), line = 176

	lda #$41
	sta $F55C
	lda #$42
	sta $F55C+1

; optimize OK (map.pas), line = 177

	lda #$43
	sta $F55E
	lda #$44
	sta $F55E+1
l_536E
l_5297

; ------------------------------------------------------------

I	= DATAORIGIN+$1657

@VarData	= I
@VarDataSize	= 1

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	PRELOADMAP					; PROCEDURE

; optimize FAIL ('BLACKCONSOLE', map.pas), line = 185

	jsr BLACKCONSOLE

; optimize OK (map.pas), line = 187

	lda #$41
	add CURRENTMAP
	sta adr.FNTNAME+$01

; optimize OK (map.pas), line = 189

	lda FNTNAME
	sta XBAPLIB.XBUNAPL.FNAM
	lda FNTNAME+1
	sta XBAPLIB.XBUNAPL.FNAM+1
	lda #$00
	sta XBAPLIB.XBUNAPL.OUTPUTPOINTER
	lda #$F0
	sta XBAPLIB.XBUNAPL.OUTPUTPOINTER+1
	jsr XBAPLIB.XBUNAPL

; optimize FAIL ('CLEARSPRITES', map.pas), line = 192

	jsr CLEARSPRITES

; optimize OK (map.pas), line = 193

	lda #$00
	jsr PAINTPLAYER

; optimize FAIL ('DRAWMAJORMONEY', map.pas), line = 196

	jsr DRAWMAJORMONEY

; optimize OK (map.pas), line = 197

	lda #$00
	sta MAPRELOADED
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	LOADMAP						; PROCEDURE

; optimize FAIL ('PRELOADMAP', map.pas), line = 204

	jsr PRELOADMAP

; optimize FAIL ('ENABLEMAPCONSOLE', map.pas), line = 205

	jsr ENABLEMAPCONSOLE

; optimize FAIL ('PRINTMAPSTATUS', map.pas), line = 206

	jsr PRINTMAPSTATUS
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	CHANGEMAP					; PROCEDURE

; optimize OK (map.pas), line = 214

	lda PLAYERPOS_X
	cmp #$CB
	jcc l_53CD

; optimize OK (map.pas), line = 217

	lda #$31
	sta PLAYERPOS_X

; optimize OK (map.pas), line = 218

	lda #$00
	sta MAPPOS_X

; optimize OK (map.pas), line = 219

	lda CURRENTMAP
	cmp #$04
	jeq l_53F4
	cmp #$09
	jeq l_53F4

; optimize OK (map.pas), line = 221

	inc CURRENTMAP

; optimize FAIL ('LOADMAP', map.pas), line = 222

	jsr LOADMAP
	jmp @exit
l_53F4
l_53CD

; optimize OK (map.pas), line = 227

	lda PLAYERPOS_X
	cmp #$2F
	jcs l_5416

; optimize OK (map.pas), line = 230

	lda #$C9
	sta PLAYERPOS_X

; optimize OK (map.pas), line = 231

	lda #$13
	sta MAPPOS_X

; optimize OK (map.pas), line = 232

	lda CURRENTMAP
	jeq l_543D
	cmp #$05
	jeq l_543D

; optimize OK (map.pas), line = 234

	dec CURRENTMAP

; optimize FAIL ('LOADMAP', map.pas), line = 235

	jsr LOADMAP
	jmp @exit
l_543D
l_5416

; optimize OK (map.pas), line = 240

	lda PLAYERPOS_Y
	cmp #$AD
	jcc l_545F

; optimize OK (map.pas), line = 242

	lda #$24
	sta PLAYERPOS_Y

; optimize OK (map.pas), line = 243

	lda #$00
	sta MAPPOS_Y

; optimize OK (map.pas), line = 244

	lda CURRENTMAP
	cmp #$05
	jcs l_547A

; optimize OK (map.pas), line = 246

	add #$05
	sta CURRENTMAP

; optimize FAIL ('LOADMAP', map.pas), line = 247

	jsr LOADMAP
	jmp @exit
l_547A
l_545F

; optimize OK (map.pas), line = 252

	lda PLAYERPOS_Y
	cmp #$23
	jcs l_549C

; optimize OK (map.pas), line = 254

	lda #$AC
	sta PLAYERPOS_Y

; optimize OK (map.pas), line = 255

	lda #$11
	sta MAPPOS_Y

; optimize OK (map.pas), line = 256

	lda CURRENTMAP
	cmp #$05
	jcc l_54B7

; optimize OK (map.pas), line = 258

	sub #$05
	sta CURRENTMAP

; optimize FAIL ('LOADMAP', map.pas), line = 259

	jsr LOADMAP
	jmp @exit
l_54B7
l_549C
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	SETUPGAME					; PROCEDURE

; optimize OK (setupGame.pas), line = 17

	lda #$1C
	jsr LOADLOCATION

; optimize FAIL ('SHOWLOCATIONHEADER', setupGame.pas), line = 19

	jsr SHOWLOCATIONHEADER

; optimize FAIL ('B_CRT.CRT_WRITECENTERED_06F6', setupGame.pas), line = 21

	inx
	mva LOC_STRING_14 :STACKORIGIN,x
	mva LOC_STRING_14+1 :STACKORIGIN+STACKWIDTH,x
	inx
	mva #$03 :STACKORIGIN,x
	jsr B_CRT.CRT_WRITECENTERED_06F6

; optimize OK (setupGame.pas), line = 22

	lda #$04
	jsr B_CRT.CRT_CLEARROW_0742

; optimize OK (setupGame.pas), line = 23

	lda #$12
	sta B_CRT.CRT_GOTOXY.X
	lda #$04
	sta B_CRT.CRT_GOTOXY.Y
	jsr B_CRT.CRT_GOTOXY

; optimize OK (setupGame.pas), line = 24

	lda #$3E
	sta GETANSWER.A
	lda #$00
	sta GETANSWER.B
	jsr GETANSWER
	lda GETANSWER.RESULT
	sta R

; optimize OK (setupGame.pas), line = 25

	jne l_54EF

; optimize OK (setupGame.pas), line = 26

	lda #$19
	sta GAMELENGTH

; optimize OK (setupGame.pas), line = 27

	lda #$64
	jmp l_5501
l_54EF

; optimize OK (setupGame.pas), line = 31

	lda #$32
	sta GAMELENGTH

; optimize OK (setupGame.pas), line = 32

	lda #$C8
l_5501
	sta GAMEPOINTS
	lda #$00
	sta GAMEPOINTS+1

; optimize FAIL ('B_CRT.CRT_NEWLINE_06EB', setupGame.pas), line = 34

	jsr B_CRT.CRT_NEWLINE_06EB

; optimize FAIL ('B_CRT.CRT_NEWLINE_06EB', setupGame.pas), line = 35

	jsr B_CRT.CRT_NEWLINE_06EB

; optimize OK (setupGame.pas), line = 36

	lda #$06
	sta K

; optimize FAIL ('B_CRT.CRT_WRITECENTERED_06F6', setupGame.pas), line = 52

	inx
	mva LOC_STRING_3 :STACKORIGIN,x
	mva LOC_STRING_3+1 :STACKORIGIN+STACKWIDTH,x
	inx
	mva K :STACKORIGIN,x
	jsr B_CRT.CRT_WRITECENTERED_06F6

; --- RepeatUntilProlog
l_5516

; optimize OK (setupGame.pas), line = 54

	lda #$01
	sta READVALUE.MINVALUE
	lda #$00
	sta READVALUE.MINVALUE+1
	lda #$05
	sta READVALUE.MAXVALUE
	lda #$00
	sta READVALUE.MAXVALUE+1
	jsr READVALUE
	lda READVALUE.RESULT
	sta NPLAYERS

; optimize OK (setupGame.pas), line = 55

	jeq l_5516
	cmp #$05
	jcs l_5516

; optimize FAIL ('B_CRT.CRT_NEWLINE_06EB', setupGame.pas), line = 56

	jsr B_CRT.CRT_NEWLINE_06EB

; optimize OK (setupGame.pas), line = 59

	lda PLGANGSTERS
	sta :bp2
	lda PLGANGSTERS+1
	sta :bp2+1
	lda #$63
	ldy #$1F
	sta:rpl (:bp2),y-

; optimize OK (setupGame.pas), line = 60

	lda #$00
	sta J
	ldy NPLAYERS
	dey
	sty @FORTMP_5547_0

l_554A
; --- ForToDoCondition
	lda @FORTMP_5547_0::#$00
	cmp J
	jcc l_5558

; optimize OK (setupGame.pas), line = 62

	lda J
	sta CURRENTPLAYER

; optimize FAIL ('SHOWLOCATIONHEADER', setupGame.pas), line = 64

	jsr SHOWLOCATIONHEADER

; optimize FAIL ('B_CRT.CRT_WRITECENTERED_06F6', setupGame.pas), line = 67

	inx
	mva LOC_STRING_4 :STACKORIGIN,x
	mva LOC_STRING_4+1 :STACKORIGIN+STACKWIDTH,x
	inx
	mva #$04 :STACKORIGIN,x
	jsr B_CRT.CRT_WRITECENTERED_06F6

; optimize OK (setupGame.pas), line = 68

	lda J
	add #$01
	sta B_CRT.CRT_WRITE_0565.NUM
	lda #$00
	adc #$00
	sta B_CRT.CRT_WRITE_0565.NUM+1
	jsr B_CRT.CRT_WRITE_0565

; optimize FAIL ('B_CRT.CRT_NEWLINE_06EB', setupGame.pas), line = 69

	jsr B_CRT.CRT_NEWLINE_06EB

; optimize FAIL ('B_CRT.CRT_WRITECENTERED_06F6', setupGame.pas), line = 70

	inx
	mva LOC_STRING_5 :STACKORIGIN,x
	mva LOC_STRING_5+1 :STACKORIGIN+STACKWIDTH,x
	inx
	mva #$06 :STACKORIGIN,x
	jsr B_CRT.CRT_WRITECENTERED_06F6

; optimize OK (setupGame.pas), line = 71

	lda #$0B
	sta B_CRT.CRT_GOTOXY.X
	lda #$07
	sta B_CRT.CRT_GOTOXY.Y
	jsr B_CRT.CRT_GOTOXY

; optimize FAIL (1, setupGame.pas), line = 72

	inx
	mva CURRENTPLAYER :STACKORIGIN,x
	inx
	mva #$03 :STACKORIGIN,x
	jsr shlEAX_CL.BYTE
	dex
	lda :STACKORIGIN+STACKWIDTH,x
	asl :STACKORIGIN,x
	rol @
	sta :STACKORIGIN+STACKWIDTH,x
	lda #$0F
	jsr B_CRT.CRT_READSTRING_06B7
	inx
	mva B_CRT.CRT_READSTRING_06B7.RESULT :STACKORIGIN,x
	mva B_CRT.CRT_READSTRING_06B7.RESULT+1 :STACKORIGIN+STACKWIDTH,x
	jsr B_CRT.ATASCII2ANTIC_0448
	inx
	mva B_CRT.ATASCII2ANTIC_0448.RESULT :STACKORIGIN,x
	mva B_CRT.ATASCII2ANTIC_0448.RESULT+1 :STACKORIGIN+STACKWIDTH,x
	ldy :STACKORIGIN-1,x
	lda adr.GANGSTERNAMES,y
	sta @move.dst
	lda adr.GANGSTERNAMES+1,y
	sta @move.dst+1
	lda :STACKORIGIN,x
	sta @move.src
	lda :STACKORIGIN+STACKWIDTH,x
	sta @move.src+1
	ldy #$00
	lda (@move.src),y
	add #1
	sta @move.cnt
	scc
	iny
	sty @move.cnt+1
	jsr @move
	dex
	dex

; optimize OK (setupGame.pas), line = 75

	ldy CURRENTPLAYER
	lda #$01
	sta adr.PLNGANGSTERS,y

; optimize OK (setupGame.pas), line = 76

	tya
	asl @
	asl @
	asl @
	tay
	lda J
	sta adr.PLGANGSTERS,y

; optimize FAIL ('B_CRT.CRT_WRITECENTERED_06F6', setupGame.pas), line = 78

	inx
	mva LOC_STRING_6 :STACKORIGIN,x
	mva LOC_STRING_6+1 :STACKORIGIN+STACKWIDTH,x
	inx
	mva #$09 :STACKORIGIN,x
	jsr B_CRT.CRT_WRITECENTERED_06F6

; optimize OK (setupGame.pas), line = 79

	lda #$0C
	sta B_CRT.CRT_GOTOXY.X
	lda #$0A
	sta B_CRT.CRT_GOTOXY.Y
	jsr B_CRT.CRT_GOTOXY

; optimize FAIL (1, setupGame.pas), line = 80

	inx
	mva CURRENTPLAYER :STACKORIGIN,x
	lda #$00
	asl :STACKORIGIN,x
	rol @
	sta :STACKORIGIN+STACKWIDTH,x
	lda #$0F
	jsr B_CRT.CRT_READSTRING_06B7
	inx
	mva B_CRT.CRT_READSTRING_06B7.RESULT :STACKORIGIN,x
	mva B_CRT.CRT_READSTRING_06B7.RESULT+1 :STACKORIGIN+STACKWIDTH,x
	jsr B_CRT.ATASCII2ANTIC_0448
	inx
	mva B_CRT.ATASCII2ANTIC_0448.RESULT :STACKORIGIN,x
	mva B_CRT.ATASCII2ANTIC_0448.RESULT+1 :STACKORIGIN+STACKWIDTH,x
	ldy :STACKORIGIN-1,x
	lda adr.PLGANG,y
	sta @move.dst
	lda adr.PLGANG+1,y
	sta @move.dst+1
	lda :STACKORIGIN,x
	sta @move.src
	lda :STACKORIGIN+STACKWIDTH,x
	sta @move.src+1
	ldy #$00
	lda (@move.src),y
	add #1
	sta @move.cnt
	scc
	iny
	sty @move.cnt+1
	jsr @move
	dex

; optimize FAIL ('B_CRT.CRT_WRITECENTERED_06F6', setupGame.pas), line = 82

	mva LOC_STRING_7 :STACKORIGIN,x
	mva LOC_STRING_7+1 :STACKORIGIN+STACKWIDTH,x
	inx
	mva #$0C :STACKORIGIN,x
	jsr B_CRT.CRT_WRITECENTERED_06F6

; optimize FAIL ('B_CRT.CRT_WRITECENTERED_06F6', setupGame.pas), line = 83

	inx
	mva LOC_STRING_13 :STACKORIGIN,x
	mva LOC_STRING_13+1 :STACKORIGIN+STACKWIDTH,x
	inx
	mva #$0E :STACKORIGIN,x
	jsr B_CRT.CRT_WRITECENTERED_06F6

; optimize OK (setupGame.pas), line = 84

	lda #$38
	sta GETANSWER.A
	lda #$25
	sta GETANSWER.B
	jsr GETANSWER
	lda GETANSWER.RESULT
	sta R

; optimize OK (setupGame.pas), line = 85

	lda CURRENTPLAYER
	asl @
	asl @
	asl @
	sta :STACKORIGIN+9
	lda #$01
	sub R
	ldy :STACKORIGIN+9
	sta adr.GANGSTERSEX,y

; optimize FAIL ('B_CRT.CRT_WRITECENTERED_06F6', setupGame.pas), line = 87

	inx
	mva LOC_STRING_8 :STACKORIGIN,x
	mva LOC_STRING_8+1 :STACKORIGIN+STACKWIDTH,x
	inx
	mva #$0F :STACKORIGIN,x
	jsr B_CRT.CRT_WRITECENTERED_06F6

; optimize FAIL (1, setupGame.pas), line = 88

	inx
	mva CURRENTPLAYER :STACKORIGIN,x
	inx
	mva #$03 :STACKORIGIN,x
	jsr shlEAX_CL.BYTE
	dex
	lda #$0A
	sta GETRANDOM.MINP
	lda #$00
	sta GETRANDOM.MINP+1
	lda #$63
	sta GETRANDOM.MAXP
	lda #$00
	sta GETRANDOM.MAXP+1
	lda #$05
	sta GETRANDOM.STEPS
	lda #$00
	sta GETRANDOM.STEPS+1
	lda #$17
	sta GETRANDOM.X
	lda #$0F
	sta GETRANDOM.Y
	jsr GETRANDOM
	inx
	mva GETRANDOM.RESULT :STACKORIGIN,x
	mva GETRANDOM.RESULT+1 :STACKORIGIN+STACKWIDTH,x
	ldy :STACKORIGIN-1,x
	lda :STACKORIGIN,x
	sta adr.GANGSTERSTR,y
	dex

; optimize FAIL ('B_CRT.CRT_WRITECENTERED_06F6', setupGame.pas), line = 89

	mva LOC_STRING_9 :STACKORIGIN,x
	mva LOC_STRING_9+1 :STACKORIGIN+STACKWIDTH,x
	inx
	mva #$10 :STACKORIGIN,x
	jsr B_CRT.CRT_WRITECENTERED_06F6

; optimize FAIL (1, setupGame.pas), line = 90

	inx
	mva CURRENTPLAYER :STACKORIGIN,x
	inx
	mva #$03 :STACKORIGIN,x
	jsr shlEAX_CL.BYTE
	dex
	lda #$0A
	sta GETRANDOM.MINP
	lda #$00
	sta GETRANDOM.MINP+1
	lda #$63
	sta GETRANDOM.MAXP
	lda #$00
	sta GETRANDOM.MAXP+1
	lda #$05
	sta GETRANDOM.STEPS
	lda #$00
	sta GETRANDOM.STEPS+1
	lda #$1A
	sta GETRANDOM.X
	lda #$10
	sta GETRANDOM.Y
	jsr GETRANDOM
	inx
	mva GETRANDOM.RESULT :STACKORIGIN,x
	mva GETRANDOM.RESULT+1 :STACKORIGIN+STACKWIDTH,x
	ldy :STACKORIGIN-1,x
	lda :STACKORIGIN,x
	sta adr.GANGSTERINT,y
	dex

; optimize FAIL ('B_CRT.CRT_WRITECENTERED_06F6', setupGame.pas), line = 91

	mva LOC_STRING_10 :STACKORIGIN,x
	mva LOC_STRING_10+1 :STACKORIGIN+STACKWIDTH,x
	inx
	mva #$11 :STACKORIGIN,x
	jsr B_CRT.CRT_WRITECENTERED_06F6

; optimize FAIL (1, setupGame.pas), line = 92

	inx
	mva CURRENTPLAYER :STACKORIGIN,x
	inx
	mva #$03 :STACKORIGIN,x
	jsr shlEAX_CL.BYTE
	dex
	lda #$0A
	sta GETRANDOM.MINP
	lda #$00
	sta GETRANDOM.MINP+1
	lda #$63
	sta GETRANDOM.MAXP
	lda #$00
	sta GETRANDOM.MAXP+1
	lda #$05
	sta GETRANDOM.STEPS
	lda #$00
	sta GETRANDOM.STEPS+1
	lda #$1A
	sta GETRANDOM.X
	lda #$11
	sta GETRANDOM.Y
	jsr GETRANDOM
	inx
	mva GETRANDOM.RESULT :STACKORIGIN,x
	mva GETRANDOM.RESULT+1 :STACKORIGIN+STACKWIDTH,x
	ldy :STACKORIGIN-1,x
	lda :STACKORIGIN,x
	sta adr.GANGSTERBRUT,y
	dex

; optimize FAIL ('B_CRT.CRT_WRITECENTERED_06F6', setupGame.pas), line = 93

	mva LOC_STRING_11 :STACKORIGIN,x
	mva LOC_STRING_11+1 :STACKORIGIN+STACKWIDTH,x
	inx
	mva #$12 :STACKORIGIN,x
	jsr B_CRT.CRT_WRITECENTERED_06F6

; optimize FAIL (1, setupGame.pas), line = 94

	inx
	mva CURRENTPLAYER :STACKORIGIN,x
	inx
	mva #$03 :STACKORIGIN,x
	jsr shlEAX_CL.BYTE
	dex
	lda #$0A
	sta GETRANDOM.MINP
	lda #$00
	sta GETRANDOM.MINP+1
	lda #$63
	sta GETRANDOM.MAXP
	lda #$00
	sta GETRANDOM.MAXP+1
	lda #$05
	sta GETRANDOM.STEPS
	lda #$00
	sta GETRANDOM.STEPS+1
	lda #$1A
	sta GETRANDOM.X
	lda #$12
	sta GETRANDOM.Y
	jsr GETRANDOM
	inx
	mva GETRANDOM.RESULT :STACKORIGIN,x
	mva GETRANDOM.RESULT+1 :STACKORIGIN+STACKWIDTH,x
	ldy :STACKORIGIN-1,x
	lda :STACKORIGIN,x
	sta adr.GANGSTERHEALTH,y
	dex

; optimize FAIL ('B_CRT.CRT_WRITECENTERED_06F6', setupGame.pas), line = 95

	mva LOC_STRING_12 :STACKORIGIN,x
	mva LOC_STRING_12+1 :STACKORIGIN+STACKWIDTH,x
	inx
	mva #$13 :STACKORIGIN,x
	jsr B_CRT.CRT_WRITECENTERED_06F6

; optimize FAIL (1, setupGame.pas), line = 96

	inx
	mva CURRENTPLAYER :STACKORIGIN,x
	lda #$00
	asl :STACKORIGIN,x
	rol @
	asl :STACKORIGIN,x
	rol @
	sta :STACKORIGIN+STACKWIDTH,x
	lda #$88
	sta GETRANDOM.MINP
	lda #$13
	sta GETRANDOM.MINP+1
	lda #$0F
	sta GETRANDOM.MAXP
	lda #$27
	sta GETRANDOM.MAXP+1
	lda #$FA
	sta GETRANDOM.STEPS
	lda #$00
	sta GETRANDOM.STEPS+1
	lda #$18
	sta GETRANDOM.X
	lda #$13
	sta GETRANDOM.Y
	jsr GETRANDOM
	ldy :STACKORIGIN,x
	lda GETRANDOM.RESULT
	sta adr.PLMONEY,y
	lda GETRANDOM.RESULT+1
	sta adr.PLMONEY+1,y
	lda #$00
	sta adr.PLMONEY+2,y
	lda #$00
	sta adr.PLMONEY+3,y
	dex

; optimize FAIL ('WAITFORKEY', setupGame.pas), line = 97

	jsr WAITFORKEY

; --- ForToDoEpilog
	inc J
	jne l_554A
l_5558

; ------------------------------------------------------------

J	= DATAORIGIN+$1658
R	= DATAORIGIN+$1659
K	= DATAORIGIN+$165A

@VarData	= J
@VarDataSize	= 3

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	JOBWORKING					; PROCEDURE

; optimize FAIL ('ENABLECONSOLE', updates.pas), line = 5

	jsr ENABLECONSOLE

; optimize FAIL ('B_CRT.CRT_CLEAR_04E8', updates.pas), line = 6

	jsr B_CRT.CRT_CLEAR_04E8

; optimize FAIL ('B_CRT.CRT_WRITECENTERED_06F6', updates.pas), line = 7

	inx
	mva LOC_STRING_32 :STACKORIGIN,x
	mva LOC_STRING_32+1 :STACKORIGIN+STACKWIDTH,x
	inx
	mva #$01 :STACKORIGIN,x
	jsr B_CRT.CRT_WRITECENTERED_06F6

; optimize OK (updates.pas), line = 8

	lda #$00
	sta B_CRT.CRT_INVERT.X
	lda #$01
	sta B_CRT.CRT_INVERT.Y
	lda B_CRT.CRT_SCREENWIDTH
	sta B_CRT.CRT_INVERT.WIDTH
	jsr B_CRT.CRT_INVERT

; optimize OK (updates.pas), line = 9

	lda #$00
	sta B_CRT.CRT_GOTOXY.X
	lda #$03
	sta B_CRT.CRT_GOTOXY.Y
	jsr B_CRT.CRT_GOTOXY
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	UPDATERANK					; PROCEDURE

; optimize OK (updates.pas), line = 20

	ldy CURRENTPLAYER
	lda adr.PLRANK,y
	sta OLDRANK

; optimize OK (updates.pas), line = 21

	lda adr.PLNEWPOINTS,y
	jmi l_565E
	jeq l_565E

; optimize OK (updates.pas), line = 22

	lda adr.PLPOINTS,y
	add adr.PLNEWPOINTS,y
	jmp l_567D
l_565E

; optimize OK (updates.pas), line = 26

	ldy CURRENTPLAYER
	lda adr.PLPOINTS,y
	sta :STACKORIGIN+9
	lda adr.PLNEWPOINTS,y
	sta :STACKORIGIN+10
	ldy #$00
	lda :STACKORIGIN+10
	spl
	dey
	sty :STACKORIGIN+STACKWIDTH+10
	lda :STACKORIGIN+9
	add :STACKORIGIN+10
	sta K
	lda #$00
	adc :STACKORIGIN+STACKWIDTH+10
	sta K+1

; optimize OK (updates.pas), line = 27

	jpl l_56A0
	lda #$00
	sta K
	sta K+1
l_56A0

; optimize OK (updates.pas), line = 28

	ldy CURRENTPLAYER
	lda K
l_567D
	sta adr.PLPOINTS,y

; optimize OK (updates.pas), line = 30

	ldy CURRENTPLAYER
	lda #$00
	sta adr.PLNEWPOINTS,y

; optimize OK (updates.pas), line = 32

	lda #$0A
	sta @WORD.DIV.B
	lda #$00
	sta @WORD.DIV.B+1
	lda GAMEPOINTS
	sta @WORD.DIV.A
	lda GAMEPOINTS+1
	sta @WORD.DIV.A+1
	jsr @WORD.DIV
	lda :eax
	sta D

; optimize OK (updates.pas), line = 33

	ldy CURRENTPLAYER
	lda adr.PLPOINTS,y
	add #$05
	sta @WORD.DIV.A
	lda #$00
	adc #$00
	sta @WORD.DIV.A+1
	lda D
	sta @WORD.DIV.B
	lda #$00
	sta @WORD.DIV.B+1
	jsr @WORD.DIV
	lda :eax
	sta NEWRANK

; optimize OK (updates.pas), line = 34

	cmp #$0B
	jcc l_56E4
	lda #$0A
	sta NEWRANK
l_56E4

; optimize OK (updates.pas), line = 40

	lda OLDRANK
	cmp NEWRANK
	jcs l_56FF

; optimize FAIL ('BLACKCONSOLE', updates.pas), line = 42

	jsr BLACKCONSOLE

; optimize OK (updates.pas), line = 43

	lda #$13
	jsr LOADLOCATION

; optimize OK (updates.pas), line = 44

	lda #$00
	sta PLAYERPOS_X

; optimize OK (updates.pas), line = 45

	sta PLAYERPOS_Y

; optimize OK (updates.pas), line = 46

	sta SYSTEM.FILLCHAR_02BB.A
	lda #$F4
	sta SYSTEM.FILLCHAR_02BB.A+1
	lda #$C0
	sta SYSTEM.FILLCHAR_02BB.COUNT
	lda #$03
	sta SYSTEM.FILLCHAR_02BB.COUNT+1
	lda #$00
	sta SYSTEM.FILLCHAR_02BB.VALUE
	.LOCAL +MAIN.SYSTEM.FILLCHAR_02BB
	m@INLINE
	.ENDL

; optimize OK (updates.pas), line = 47

	lda CURRENTPLAYER
	sta :STACKORIGIN+9
	lda #$00
	asl :STACKORIGIN+9
	rol @
	asl :STACKORIGIN+9
	rol @
	asl :STACKORIGIN+9
	rol @
	sta :STACKORIGIN+STACKWIDTH+9
	lda :STACKORIGIN+9
	add #$00
	tay
	lda :STACKORIGIN+STACKWIDTH+9
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+9
	lda adr.GANGSTERSEX,y
	jne l_5728

; optimize OK (updates.pas), line = 49

	lda WANTED_M_MFNAME
	sta XBAPLIB.XBUNAPL.FNAM
	lda WANTED_M_MFNAME+1
	sta XBAPLIB.XBUNAPL.FNAM+1
	lda #$00
	sta XBAPLIB.XBUNAPL.OUTPUTPOINTER
	lda #$F0
	sta XBAPLIB.XBUNAPL.OUTPUTPOINTER+1
	jsr XBAPLIB.XBUNAPL

; optimize OK (updates.pas), line = 50

	lda WANTED_M_MSNAME
	sta XBAPLIB.XBUNAPL.FNAM
	lda WANTED_M_MSNAME+1
	jmp l_573A
l_5728

; optimize OK (updates.pas), line = 54

	lda WANTED_F_MFNAME
	sta XBAPLIB.XBUNAPL.FNAM
	lda WANTED_F_MFNAME+1
	sta XBAPLIB.XBUNAPL.FNAM+1
	lda #$00
	sta XBAPLIB.XBUNAPL.OUTPUTPOINTER
	lda #$F0
	sta XBAPLIB.XBUNAPL.OUTPUTPOINTER+1
	jsr XBAPLIB.XBUNAPL

; optimize OK (updates.pas), line = 55

	lda WANTED_F_MSNAME
	sta XBAPLIB.XBUNAPL.FNAM
	lda WANTED_F_MSNAME+1
l_573A
	sta XBAPLIB.XBUNAPL.FNAM+1
	lda #$00
	sta XBAPLIB.XBUNAPL.OUTPUTPOINTER
	lda #$F4
	sta XBAPLIB.XBUNAPL.OUTPUTPOINTER+1
	jsr XBAPLIB.XBUNAPL

; optimize FAIL ('ENABLEMAPCONSOLE', updates.pas), line = 57

	jsr ENABLEMAPCONSOLE

; optimize FAIL ('B_CRT.CRT_WRITECENTERED_06F6', updates.pas), line = 59

	inx
	mva LOC_STRING_3 :STACKORIGIN,x
	mva LOC_STRING_3+1 :STACKORIGIN+STACKWIDTH,x
	inx
	mva #$13 :STACKORIGIN,x
	jsr B_CRT.CRT_WRITECENTERED_06F6

; optimize FAIL ('B_CRT.CRT_NEWLINE_06EB', updates.pas), line = 60

	jsr B_CRT.CRT_NEWLINE_06EB

; optimize FAIL ('B_CRT.CRT_WRITE_053A', updates.pas), line = 61

	inx
	mva LOC_STRING_4 :STACKORIGIN,x
	mva LOC_STRING_4+1 :STACKORIGIN+STACKWIDTH,x
	jsr B_CRT.CRT_WRITE_053A

; optimize FAIL ('B_CRT.CRT_WRITE_053A', updates.pas), line = 62

	inx
	mva CURRENTPLAYER :STACKORIGIN,x
	inx
	mva #$03 :STACKORIGIN,x
	jsr shlEAX_CL.BYTE
	dex
	lda :STACKORIGIN+STACKWIDTH,x
	asl :STACKORIGIN,x
	rol @
	sta :STACKORIGIN+STACKWIDTH,x
	ldy :STACKORIGIN,x
	lda adr.GANGSTERNAMES,y
	sta :STACKORIGIN,x
	lda adr.GANGSTERNAMES+1,y
	sta :STACKORIGIN+STACKWIDTH,x
	jsr B_CRT.CRT_WRITE_053A

; optimize FAIL ('CRT_WRITELN', updates.pas), line = 63

	inx
	mva LOC_STRING_5 :STACKORIGIN,x
	mva LOC_STRING_5+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN

; optimize FAIL ('B_CRT.CRT_WRITE_053A', updates.pas), line = 64

	inx
	mva LOC_STRING_6 :STACKORIGIN,x
	mva LOC_STRING_6+1 :STACKORIGIN+STACKWIDTH,x
	jsr B_CRT.CRT_WRITE_053A

; optimize FAIL ('B_CRT.CRT_WRITE_053A', updates.pas), line = 65

	inx
	lda CURRENTPLAYER
	asl @
	tay
	lda adr.PLGANG,y
	sta :STACKORIGIN,x
	lda adr.PLGANG+1,y
	sta :STACKORIGIN+STACKWIDTH,x
	jsr B_CRT.CRT_WRITE_053A

; optimize FAIL ('CRT_WRITELN', updates.pas), line = 66

	inx
	mva LOC_STRING_7 :STACKORIGIN,x
	mva LOC_STRING_7+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN

; optimize FAIL ('CRT_WRITELN', updates.pas), line = 67

	inx
	mva LOC_STRING_8 :STACKORIGIN,x
	mva LOC_STRING_8+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN

; optimize FAIL ('B_CRT.CRT_WRITE_053A', updates.pas), line = 68

	inx
	mva LOC_STRING_9 :STACKORIGIN,x
	mva LOC_STRING_9+1 :STACKORIGIN+STACKWIDTH,x
	jsr B_CRT.CRT_WRITE_053A

; optimize FAIL ('B_CRT.CRT_WRITE_053A', updates.pas), line = 69

	inx
	lda NEWRANK
	asl @
	tay
	lda adr.RANKNAMES,y
	sta :STACKORIGIN,x
	lda adr.RANKNAMES+1,y
	sta :STACKORIGIN+STACKWIDTH,x
	jsr B_CRT.CRT_WRITE_053A

; optimize FAIL ('B_CRT.CRT_WRITE_053A', updates.pas), line = 70

	inx
	mva #$F8 :STACKORIGIN,x
	mva #$0D :STACKORIGIN+STACKWIDTH,x
	jsr B_CRT.CRT_WRITE_053A

; optimize OK (updates.pas), line = 71

	ldy CURRENTPLAYER
	lda adr.PLPOINTS,y
	jsr B_CRT.CRT_WRITE_055B

; optimize FAIL ('B_CRT.CRT_WRITE_053A', updates.pas), line = 72

	inx
	mva LOC_STRING_10 :STACKORIGIN,x
	mva LOC_STRING_10+1 :STACKORIGIN+STACKWIDTH,x
	jsr B_CRT.CRT_WRITE_053A

; optimize FAIL ('B_CRT.CRT_READKEY', updates.pas), line = 73

	jsr B_CRT.CRT_READKEY

; optimize FAIL ('BLACKCONSOLE', updates.pas), line = 74

	jsr BLACKCONSOLE

; optimize OK (updates.pas), line = 75

	lda #$58
	sta SYSTEM.FILLCHAR_02BB.A
	lda #$F6
	sta SYSTEM.FILLCHAR_02BB.A+1
	lda #$68
	sta SYSTEM.FILLCHAR_02BB.COUNT
	lda #$01
	sta SYSTEM.FILLCHAR_02BB.COUNT+1
	lda #$00
	sta SYSTEM.FILLCHAR_02BB.VALUE
	.LOCAL +MAIN.SYSTEM.FILLCHAR_02BB
	m@INLINE
	.ENDL

; optimize OK (updates.pas), line = 76

	ldy CURRENTPLAYER
	lda NEWRANK
	sta adr.PLRANK,y
l_56FF

; ------------------------------------------------------------

OLDRANK	= DATAORIGIN+$165C
NEWRANK	= DATAORIGIN+$165D
K	= DATAORIGIN+$165E
D	= DATAORIGIN+$1660

@VarData	= OLDRANK
@VarDataSize	= 5

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	UPDATERENT					; PROCEDURE

; optimize OK (updates.pas), line = 85

	lda #$00
	sta R

l_579A
; --- ForToDoCondition
	ldy R
	cpy #$04
	jcs l_57A8

; optimize OK (updates.pas), line = 87

	lda adr.PLRENT,y
	cmp CURRENTPLAYER
	jeq l_57BF
	jmp c_579A					; continue
l_57BF

; optimize OK (updates.pas), line = 89

	ldy CURRENTPLAYER
	lda adr.PLRENTMONTHS,y
	jeq l_57D7

; optimize OK (updates.pas), line = 91

	sub #$01
	sta adr.PLRENTMONTHS,y
	jmp @exit
l_57D7

; optimize OK (updates.pas), line = 95

	lda #$13
	jsr LOADLOCATION

; optimize FAIL ('B_CRT.CRT_CLEAR_04E8', updates.pas), line = 98

	jsr B_CRT.CRT_CLEAR_04E8

; optimize FAIL ('B_CRT.CRT_WRITECENTERED_06F6', updates.pas), line = 99

	inx
	mva LOC_STRING_13 :STACKORIGIN,x
	mva LOC_STRING_13+1 :STACKORIGIN+STACKWIDTH,x
	inx
	mva #$01 :STACKORIGIN,x
	jsr B_CRT.CRT_WRITECENTERED_06F6

; optimize OK (updates.pas), line = 100

	lda #$00
	sta B_CRT.CRT_INVERT.X
	lda #$01
	sta B_CRT.CRT_INVERT.Y
	lda B_CRT.CRT_SCREENWIDTH
	sta B_CRT.CRT_INVERT.WIDTH
	jsr B_CRT.CRT_INVERT

; optimize OK (updates.pas), line = 101

	lda #$00
	sta B_CRT.CRT_GOTOXY.X
	lda #$03
	sta B_CRT.CRT_GOTOXY.Y
	jsr B_CRT.CRT_GOTOXY

; optimize FAIL (1, updates.pas), line = 103

	inx
	mva #$C8 :STACKORIGIN,x
	lda #$C8
	jsr SYSTEM.RANDOM_02E9
	lda :STACKORIGIN,x
	add SYSTEM.RANDOM_02E9.RESULT
	sta PR
	lda #$00
	adc #$00
	sta PR+1

; optimize FAIL ('CRT_WRITELN', updates.pas), line = 104

	mva LOC_STRING_14 :STACKORIGIN,x
	mva LOC_STRING_14+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN

; optimize FAIL ('CRT_WRITELN', updates.pas), line = 105

	inx
	mva LOC_STRING_15 :STACKORIGIN,x
	mva LOC_STRING_15+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN

; optimize OK (updates.pas), line = 106

	lda CURRENTPLAYER
	asl @
	asl @
	tay
	.LOCAL
	lda adr.PLMONEY+3,y
	sub #$00
	bne L4
	lda adr.PLMONEY+2,y
	cmp #$00
	bne L1
	lda adr.PLMONEY+1,y
	cmp PR+1
	bne L1
	lda adr.PLMONEY,y
	cmp PR
L1	beq L5
	bcs L3
	lda #$FF
	bne L5
L3	lda #$01
	bne L5
L4	bvc L5
	eor #$FF
	ora #$01
L5
	.ENDL
	jpl l_581D

; optimize FAIL ('CRT_WRITELN', updates.pas), line = 108

	inx
	mva LOC_STRING_16 :STACKORIGIN,x
	mva LOC_STRING_16+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN

; optimize FAIL ('B_CRT.CRT_WRITE_053A', updates.pas), line = 109

	inx
	mva LOC_STRING_17 :STACKORIGIN,x
	mva LOC_STRING_17+1 :STACKORIGIN+STACKWIDTH,x
	jsr B_CRT.CRT_WRITE_053A

; optimize OK (updates.pas), line = 110

	lda PR
	sta B_CRT.CRT_WRITE_0565.NUM
	lda PR+1
	sta B_CRT.CRT_WRITE_0565.NUM+1
	jsr B_CRT.CRT_WRITE_0565

; optimize FAIL ('CRT_WRITELN', updates.pas), line = 111

	inx
	mva LOC_STRING_18 :STACKORIGIN,x
	mva LOC_STRING_18+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN

; optimize OK (updates.pas), line = 112

	lda PR
	sta SUBMONEY.AMOUNT
	lda PR+1
	sta SUBMONEY.AMOUNT+1
	jsr SUBMONEY

; optimize OK (updates.pas), line = 113

	ldy CURRENTPLAYER
	lda #$00
	sta adr.PLRENTMONTHS,y
	jmp l_583D
l_581D

; optimize FAIL ('CRT_WRITELN', updates.pas), line = 117

	inx
	mva LOC_STRING_19 :STACKORIGIN,x
	mva LOC_STRING_19+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN

; optimize OK (updates.pas), line = 118

	ldy CURRENTPLAYER
	lda adr.PLNGANGSTERS,y
	jeq l_5855

; optimize FAIL ('CRT_WRITELN', updates.pas), line = 120

	inx
	mva LOC_STRING_20 :STACKORIGIN,x
	mva LOC_STRING_20+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN

; optimize FAIL ('CRT_WRITELN', updates.pas), line = 121

	inx
	mva LOC_STRING_21 :STACKORIGIN,x
	mva LOC_STRING_21+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN

; optimize OK (updates.pas), line = 122

	ldy CURRENTPLAYER
	lda #$00
	sta adr.PLNGANGSTERS,y

; optimize OK (updates.pas), line = 123

	sta K

l_586C
; --- ForToDoCondition
	lda K
	cmp #$20
	jcs l_587A

; --- ForToDoEpilog
	inc K
	jne l_586C
l_587A

; optimize OK (updates.pas), line = 124

	ldy K
	lda adr.PLGANGSTERS,y
	cmp CURRENTPLAYER
	jne l_5896
	lda #$63
	sta adr.PLGANGSTERS,y
l_583D
l_5896
l_5855

; optimize FAIL ('WAITFORKEY', updates.pas), line = 127

	jsr WAITFORKEY

; --- ForToDoEpilog
c_579A
	inc R
	jne l_579A
l_57A8

; ------------------------------------------------------------

PR	= DATAORIGIN+$1661
K	= DATAORIGIN+$1663
R	= DATAORIGIN+$1664

@VarData	= PR
@VarDataSize	= 4

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	UPDATELOANSHARK					; PROCEDURE

; optimize OK (updates.pas), line = 136

	lda #$15
	jsr LOADLOCATION

; optimize OK (updates.pas), line = 137

	lda CURRENTPLAYER
	asl @
	tay
	lda adr.PLLOANINVEST,y
	sta P
	lda adr.PLLOANINVEST+1,y
	sta P+1

; optimize OK (updates.pas), line = 139

	ora P
	jeq l_58C7

; optimize FAIL ('JOBWORKING', updates.pas), line = 141

	jsr JOBWORKING

; optimize OK (updates.pas), line = 142

	lda #$03
	jsr SYSTEM.RANDOM_02E9
	lda SYSTEM.RANDOM_02E9.RESULT
	jne l_58DA

; optimize FAIL (1, updates.pas), line = 144

	inx
	mva P :STACKORIGIN,x
	mva P+1 :STACKORIGIN+STACKWIDTH,x
	inx
	mva #$06 :STACKORIGIN,x
	jsr shrAX_CL.WORD
	dex
	lda #$00
	jsr SYSTEM.RANDOM_02E9
	lda :STACKORIGIN,x
	add SYSTEM.RANDOM_02E9.RESULT
	sta P
	lda :STACKORIGIN+STACKWIDTH,x
	adc #$00
	sta P+1
	dex

; optimize OK (updates.pas), line = 145

	lda P
	sta ADDMONEY.AMOUNT
	lda P+1
	sta ADDMONEY.AMOUNT+1
	jsr ADDMONEY

; optimize FAIL ('CRT_WRITELN', updates.pas), line = 146

	inx
	mva LOC_STRING_1 :STACKORIGIN,x
	mva LOC_STRING_1+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN

; optimize FAIL ('B_CRT.CRT_WRITE_053A', updates.pas), line = 147

	inx
	mva LOC_STRING_2 :STACKORIGIN,x
	mva LOC_STRING_2+1 :STACKORIGIN+STACKWIDTH,x
	jsr B_CRT.CRT_WRITE_053A

; optimize OK (updates.pas), line = 148

	lda P
	sta B_CRT.CRT_WRITE_0565.NUM
	lda P+1
	sta B_CRT.CRT_WRITE_0565.NUM+1
	jsr B_CRT.CRT_WRITE_0565

; optimize FAIL ('CRT_WRITELN', updates.pas), line = 149

	inx
	mva LOC_STRING_3 :STACKORIGIN,x
	mva LOC_STRING_3+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN

; optimize FAIL ('WAITFORKEY', updates.pas), line = 150

	jsr WAITFORKEY
	jmp @exit
l_58DA

; optimize FAIL ('CRT_WRITELN', updates.pas), line = 155

	inx
	mva LOC_STRING_4 :STACKORIGIN,x
	mva LOC_STRING_4+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN

; optimize FAIL ('CRT_WRITELN', updates.pas), line = 156

	inx
	mva LOC_STRING_5 :STACKORIGIN,x
	mva LOC_STRING_5+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN

; optimize FAIL ('WAITFORKEY', updates.pas), line = 157

	jsr WAITFORKEY
	jmp @exit
l_5902
l_58C7

; optimize OK (updates.pas), line = 163

	lda CURRENTPLAYER
	asl @
	tay
	lda adr.PLLOAN+1,y
	jmi l_591F
	ora adr.PLLOAN,y
	jeq l_591F

; optimize OK (updates.pas), line = 165

	ldy CURRENTPLAYER
	lda adr.PLLOANTIME,y
	sta K

; optimize FAIL ('JOBWORKING', updates.pas), line = 166

	jsr JOBWORKING

; optimize OK (updates.pas), line = 167

	lda K
	jeq l_593C

; optimize FAIL ('B_CRT.CRT_WRITE_053A', updates.pas), line = 169

	inx
	mva LOC_STRING_6 :STACKORIGIN,x
	mva LOC_STRING_6+1 :STACKORIGIN+STACKWIDTH,x
	jsr B_CRT.CRT_WRITE_053A

; optimize OK (updates.pas), line = 170

	lda CURRENTPLAYER
	asl @
	tay
	lda adr.PLLOAN,y
	sta B_CRT.CRT_WRITE_056E.NUM
	lda adr.PLLOAN+1,y
	sta :STACKORIGIN+STACKWIDTH+9
	ldy #$00
	lda :STACKORIGIN+STACKWIDTH+9
	spl
	dey
	sta B_CRT.CRT_WRITE_056E.NUM+1
	sty B_CRT.CRT_WRITE_056E.NUM+2
	sty B_CRT.CRT_WRITE_056E.NUM+3
	jsr B_CRT.CRT_WRITE_056E

; optimize FAIL ('CRT_WRITELN', updates.pas), line = 171

	inx
	mva LOC_STRING_7 :STACKORIGIN,x
	mva LOC_STRING_7+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN

; optimize FAIL ('B_CRT.CRT_WRITE_053A', updates.pas), line = 172

	inx
	mva LOC_STRING_8 :STACKORIGIN,x
	mva LOC_STRING_8+1 :STACKORIGIN+STACKWIDTH,x
	jsr B_CRT.CRT_WRITE_053A

; optimize OK (updates.pas), line = 173

	lda K
	jsr B_CRT.CRT_WRITE_055B

; optimize FAIL ('CRT_WRITELN', updates.pas), line = 174

	inx
	mva LOC_STRING_9 :STACKORIGIN,x
	mva LOC_STRING_9+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN

; optimize FAIL ('WAITFORKEY', updates.pas), line = 175

	jsr WAITFORKEY

; optimize OK (updates.pas), line = 176

	lda K
	sub #$01
	ldy CURRENTPLAYER
	sta adr.PLLOANTIME,y
	jmp @exit
l_593C

; optimize FAIL ('CRT_WRITELN', updates.pas), line = 180

	inx
	mva LOC_STRING_10 :STACKORIGIN,x
	mva LOC_STRING_10+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN

; optimize FAIL ('CRT_WRITELN2', updates.pas), line = 181

	inx
	mva LOC_STRING_11 :STACKORIGIN,x
	mva LOC_STRING_11+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN2

; optimize FAIL ('WAITFORKEY', updates.pas), line = 182

	jsr WAITFORKEY

; optimize OK (updates.pas), line = 184

	lda #$01
	sta adr.FP_AI+$01

; optimize OK (updates.pas), line = 185

	lda #$05
	sta adr.FP_N+$01

; optimize OK (updates.pas), line = 186

	lda adr.FP_GANG+$02
	sta @move.dst
	lda adr.FP_GANG+1+$02
	sta @move.dst+1
	lda LOC_STRING_12
	sta @move.src
	lda LOC_STRING_12+1
	sta @move.src+1
	ldy #$00
	lda (@move.src),y
	add #1
	sta @move.cnt
	scc
	iny
	sty @move.cnt+1
	jsr @move

; optimize OK (updates.pas), line = 187

	lda #$00
	sta K

l_5983
; --- ForToDoCondition
	lda K
	cmp #$05
	jcs l_5991

; optimize FAIL (1, updates.pas), line = 189

	inx
	mva #$10 :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	inx
	mva K :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	jsr addAX_CX
	dex
	lda #$02
	jsr SYSTEM.RANDOM_02E9
	ldy :STACKORIGIN,x
	lda SYSTEM.RANDOM_02E9.RESULT
	sta adr.FP_SEX,y
	dex

; optimize OK (updates.pas), line = 190

	lda K
	asl @
	tay
	lda adr.FP_NAME+$20,y
	sta @move.dst
	lda adr.FP_NAME+1+$20,y
	sta @move.dst+1
	lda LOC_STRING_12
	sta @move.src
	lda LOC_STRING_12+1
	sta @move.src+1
	ldy #$00
	lda (@move.src),y
	add #1
	sta @move.cnt
	scc
	iny
	sty @move.cnt+1
	jsr @move

; optimize OK (updates.pas), line = 191

	ldy K
	lda #$03
	sta adr.FP_WEAPON+$10,y

; optimize OK (updates.pas), line = 192

	lda #$1E
	sta adr.FP_ENERGY+$10,y

; optimize OK (updates.pas), line = 193

	sta adr.FP_STRENGTH+$10,y

; optimize OK (updates.pas), line = 194

	sta adr.FP_BRUTALITY+$10,y

; --- ForToDoEpilog
	inc K
	jne l_5983
l_5991

; optimize FAIL ('DOFIGHT', updates.pas), line = 197

	jsr DOFIGHT
	lda DOFIGHT.RESULT
	cmp #$01
	jne l_59EA

; optimize FAIL ('ENABLECONSOLE', updates.pas), line = 199

	jsr ENABLECONSOLE

; optimize FAIL ('CRT_WRITELN', updates.pas), line = 201

	inx
	mva LOC_STRING_13 :STACKORIGIN,x
	mva LOC_STRING_13+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN

; optimize FAIL ('CRT_WRITELN', updates.pas), line = 202

	inx
	mva LOC_STRING_14 :STACKORIGIN,x
	mva LOC_STRING_14+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN

; optimize OK (updates.pas), line = 203

	lda CURRENTPLAYER
	asl @
	asl @
	tay
	lda #$00
	sta adr.PLMONEY,y
	sta adr.PLMONEY+1,y
	sta adr.PLMONEY+2,y
	sta adr.PLMONEY+3,y

; optimize OK (updates.pas), line = 204

	lda CURRENTPLAYER
	asl @
	tay
	lda #$00
	sta adr.PLLOAN,y
	sta adr.PLLOAN+1,y

; optimize FAIL ('WAITFORKEY', updates.pas), line = 205

	jsr WAITFORKEY
	jmp @exit
l_59EA

; optimize FAIL ('ENABLECONSOLE', updates.pas), line = 209

	jsr ENABLECONSOLE

; optimize FAIL ('CRT_WRITELN', updates.pas), line = 211

	inx
	mva LOC_STRING_15 :STACKORIGIN,x
	mva LOC_STRING_15+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN

; optimize FAIL ('CRT_WRITELN', updates.pas), line = 212

	inx
	mva LOC_STRING_16 :STACKORIGIN,x
	mva LOC_STRING_16+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN

; optimize FAIL ('CRT_WRITELN', updates.pas), line = 213

	inx
	mva LOC_STRING_17 :STACKORIGIN,x
	mva LOC_STRING_17+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN

; optimize FAIL ('WAITFORKEY', updates.pas), line = 214

	jsr WAITFORKEY

; optimize OK (updates.pas), line = 215

	ldy CURRENTPLAYER
	lda #$03
	sta adr.PLLOANTIME,y
l_591F

; ------------------------------------------------------------

P	= DATAORIGIN+$1665
K	= DATAORIGIN+$1667

@VarData	= P
@VarDataSize	= 3

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	UPDATEOPPORTUNITIES				; PROCEDURE

; optimize OK (updates.pas), line = 226

	lda #$16
	jsr LOADLOCATION

; optimize OK (updates.pas), line = 227

	ldy CURRENTPLAYER
	lda adr.PLOPPORTUNITY,y
	jne l_5A32
	jmp @exit
l_5A32

; optimize FAIL ('ENABLECONSOLE', updates.pas), line = 230

	jsr ENABLECONSOLE

; optimize FAIL ('B_CRT.CRT_CLEAR_04E8', updates.pas), line = 231

	jsr B_CRT.CRT_CLEAR_04E8

; optimize FAIL ('B_CRT.CRT_WRITECENTERED_06F6', updates.pas), line = 232

	inx
	mva LOC_STRING_22 :STACKORIGIN,x
	mva LOC_STRING_22+1 :STACKORIGIN+STACKWIDTH,x
	inx
	mva #$01 :STACKORIGIN,x
	jsr B_CRT.CRT_WRITECENTERED_06F6

; optimize OK (updates.pas), line = 233

	lda #$00
	sta B_CRT.CRT_INVERT.X
	lda #$01
	sta B_CRT.CRT_INVERT.Y
	lda B_CRT.CRT_SCREENWIDTH
	sta B_CRT.CRT_INVERT.WIDTH
	jsr B_CRT.CRT_INVERT

; optimize OK (updates.pas), line = 234

	lda #$00
	sta B_CRT.CRT_GOTOXY.X
	lda #$03
	sta B_CRT.CRT_GOTOXY.Y
	jsr B_CRT.CRT_GOTOXY

; optimize OK (updates.pas), line = 236

	ldy CURRENTPLAYER
	lda adr.PLOPPORTUNITY,y
	cmp #$80
	jne l_5A59

; optimize OK (updates.pas), line = 238

	lda #$00
	sta adr.PLOPPORTUNITY,y

; optimize OK (updates.pas), line = 239

	lda #$05
	jsr SYSTEM.RANDOM_02E9
	lda SYSTEM.RANDOM_02E9.RESULT
	jne l_5A72

; optimize FAIL ('CRT_WRITELN', updates.pas), line = 242

	inx
	mva LOC_STRING_23 :STACKORIGIN,x
	mva LOC_STRING_23+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN

; optimize FAIL ('CRT_WRITELN', updates.pas), line = 243

	inx
	mva LOC_STRING_24 :STACKORIGIN,x
	mva LOC_STRING_24+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN
	jmp l_5A82
l_5A72

; optimize FAIL (1, updates.pas), line = 247

	inx
	mva #$7C :STACKORIGIN,x
	mva #$15 :STACKORIGIN+STACKWIDTH,x
	lda #$96
	jsr SYSTEM.RANDOM_02E9
	inx
	mva SYSTEM.RANDOM_02E9.RESULT :STACKORIGIN,x
	inx
	mva #$06 :STACKORIGIN,x
	jsr shlEAX_CL.BYTE
	dex
	mva #$00 :STACKORIGIN-1+STACKWIDTH*2,x
	sta :STACKORIGIN-1+STACKWIDTH*3,x
	jsr addAX_CX
	dex
	lda :STACKORIGIN,x
	sta PR
	lda :STACKORIGIN+STACKWIDTH,x
	sta PR+1

; optimize FAIL ('CRT_WRITELN', updates.pas), line = 248

	mva LOC_STRING_25 :STACKORIGIN,x
	mva LOC_STRING_25+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN

; optimize FAIL ('B_CRT.CRT_WRITE_053A', updates.pas), line = 249

	inx
	mva LOC_STRING_26 :STACKORIGIN,x
	mva LOC_STRING_26+1 :STACKORIGIN+STACKWIDTH,x
	jsr B_CRT.CRT_WRITE_053A

; optimize OK (updates.pas), line = 250

	lda PR
	sta B_CRT.CRT_WRITE_0565.NUM
	lda PR+1
	sta B_CRT.CRT_WRITE_0565.NUM+1
	jsr B_CRT.CRT_WRITE_0565

; optimize FAIL ('CRT_WRITELN', updates.pas), line = 251

	inx
	mva #$9D :STACKORIGIN,x
	mva #$0D :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN

; optimize OK (updates.pas), line = 252

	lda PR
	sta ADDMONEY.AMOUNT
	lda PR+1
	sta ADDMONEY.AMOUNT+1
	jsr ADDMONEY
l_5A82

; optimize FAIL ('WAITFORKEY', updates.pas), line = 254

	jsr WAITFORKEY
l_5A59

; ------------------------------------------------------------

PR	= DATAORIGIN+$1668

@VarData	= PR
@VarDataSize	= 2

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	UPDATEGANGSTERS					; PROCEDURE

; optimize OK (updates.pas), line = 262

	lda #$00
	sta J

l_5AAD
; --- ForToDoCondition
	ldy J
	cpy #$20
	jcs l_5ABB

; optimize OK (updates.pas), line = 264

	lda adr.GANGSTERHEALTH,y
	sta EN

; optimize OK (updates.pas), line = 265

	lda adr.GANGSTERSTR,y
	lsr @
	lsr @
	lsr @
	add EN
	add #$01
	add #$01
	sta EN

; optimize OK (updates.pas), line = 266

	lda adr.GANGSTERBRUT,y
	lsr @
	lsr @
	add #$02
	sta :STACKORIGIN+9
	lda adr.GANGSTERINT,y
	lsr @
	lsr @
	add :STACKORIGIN+9
	sta MAXX

; optimize OK (updates.pas), line = 267

	cmp EN
	jcs l_5B11
	sta EN
l_5B11

; optimize OK (updates.pas), line = 268

	ldy J
	lda EN
	sta adr.GANGSTERHEALTH,y

; --- ForToDoEpilog
	inc J
	jne l_5AAD
l_5ABB

; ------------------------------------------------------------

J	= DATAORIGIN+$166A
EN	= DATAORIGIN+$166B
MAXX	= DATAORIGIN+$166C

@VarData	= J
@VarDataSize	= 3

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	UPDATEPRISON					; PROCEDURE

; optimize OK (updates.pas), line = 278

	lda #$13
	jsr LOADLOCATION

; optimize OK (updates.pas), line = 280

	ldy CURRENTPLAYER
	lda adr.PLPRISON,y
	jeq l_5B43

; optimize OK (updates.pas), line = 282

	lda adr.LOC_MAP_PLACES
	sta CURRENTMAP

; optimize OK (updates.pas), line = 283

	lda LOC_STRING_27
	sta @move.src
	lda LOC_STRING_27+1
	sta @move.src+1
	@moveSTRING LOC_NAME #41

; optimize FAIL ('SHOWLOCATIONHEADER', updates.pas), line = 284

	jsr SHOWLOCATIONHEADER

; optimize FAIL ('CRT_WRITELN', updates.pas), line = 285

	inx
	mva LOC_STRING_28 :STACKORIGIN,x
	mva LOC_STRING_28+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN

; optimize FAIL ('B_CRT.CRT_WRITE_053A', updates.pas), line = 286

	inx
	mva LOC_STRING_29 :STACKORIGIN,x
	mva LOC_STRING_29+1 :STACKORIGIN+STACKWIDTH,x
	jsr B_CRT.CRT_WRITE_053A

; optimize OK (updates.pas), line = 287

	ldy CURRENTPLAYER
	lda adr.PLPRISON,y
	jsr B_CRT.CRT_WRITE_055B

; optimize FAIL ('CRT_WRITELN', updates.pas), line = 288

	inx
	mva LOC_STRING_30 :STACKORIGIN,x
	mva LOC_STRING_30+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN

; optimize OK (updates.pas), line = 289

	ldy CURRENTPLAYER
	lda adr.PLPRISON,y
	sub #$01
	sta adr.PLPRISON,y

; optimize FAIL ('WAITFORKEY', updates.pas), line = 290

	jsr WAITFORKEY

; optimize OK (updates.pas), line = 291

	lda #$11
	sta CURRENTLOCATION
	jmp @exit
l_5B43

; optimize OK (updates.pas), line = 295

	ldy CURRENTPLAYER
	lda adr.PLFREED,y
	cmp #$63
	jeq l_5B8A

; optimize FAIL ('B_CRT.CRT_WRITE_053A', updates.pas), line = 297

	inx
	mva LOC_STRING_31 :STACKORIGIN,x
	mva LOC_STRING_31+1 :STACKORIGIN+STACKWIDTH,x
	jsr B_CRT.CRT_WRITE_053A

; optimize OK (updates.pas), line = 298

	ldy CURRENTPLAYER
	lda adr.PLFREED,y
	sta K

; optimize OK (updates.pas), line = 299

	asl @
	asl @
	asl @
	sta R

; optimize FAIL ('B_CRT.CRT_WRITE_053A', updates.pas), line = 300

	inx
	lda R
	asl @
	tay
	lda adr.GANGSTERNAMES,y
	sta :STACKORIGIN,x
	lda adr.GANGSTERNAMES+1,y
	sta :STACKORIGIN+STACKWIDTH,x
	jsr B_CRT.CRT_WRITE_053A

; optimize FAIL ('CRT_WRITELN', updates.pas), line = 301

	inx
	mva LOC_STRING_32 :STACKORIGIN,x
	mva LOC_STRING_32+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN

; optimize FAIL ('CRT_WRITELN', updates.pas), line = 302

	inx
	mva LOC_STRING_33 :STACKORIGIN,x
	mva LOC_STRING_33+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN

; optimize FAIL ('B_CRT.CRT_WRITE_053A', updates.pas), line = 303

	inx
	mva LOC_STRING_34 :STACKORIGIN,x
	mva LOC_STRING_34+1 :STACKORIGIN+STACKWIDTH,x
	jsr B_CRT.CRT_WRITE_053A

; optimize OK (updates.pas), line = 304

	lda CURRENTPLAYER
	asl @
	asl @
	tay
	lda adr.PLMONEY,y
	sta B_CRT.CRT_WRITE_056E.NUM
	lda adr.PLMONEY+1,y
	sta B_CRT.CRT_WRITE_056E.NUM+1
	lda adr.PLMONEY+2,y
	sta B_CRT.CRT_WRITE_056E.NUM+2
	lda adr.PLMONEY+3,y
	sta B_CRT.CRT_WRITE_056E.NUM+3
	jsr B_CRT.CRT_WRITE_056E

; optimize FAIL ('CRT_WRITELN', updates.pas), line = 305

	inx
	mva #$4D :STACKORIGIN,x
	mva #$0E :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN

; optimize OK (updates.pas), line = 306

	lda CURRENTPLAYER
	asl @
	asl @
	tay
	lda adr.PLMONEY,y
	sta READVALUE.MAXVALUE
	lda adr.PLMONEY+1,y
	sta READVALUE.MAXVALUE+1
	lda #$00
	sta READVALUE.MINVALUE
	sta READVALUE.MINVALUE+1
	jsr READVALUE
	lda READVALUE.RESULT
	sta PR
	lda READVALUE.RESULT+1
	sta PR+1

; optimize OK (updates.pas), line = 307

	ora PR
	jeq l_5BD1

; optimize OK (updates.pas), line = 309

	lda PR
	sta PAYMONEY.PRICE
	lda PR+1
	sta PAYMONEY.PRICE+1
	jsr PAYMONEY

; optimize OK (updates.pas), line = 310

	ldy CURRENTPLAYER
	lda adr.PLNEWPOINTS,y
	add #$02
	sta adr.PLNEWPOINTS,y

; optimize OK (updates.pas), line = 311

	lda K
	asl @
	asl @
	tay
	lda adr.PLMONEY,y
	add PR
	sta :STACKORIGIN+10
	lda adr.PLMONEY+1,y
	adc PR+1
	sta :STACKORIGIN+STACKWIDTH+10
	lda adr.PLMONEY+2,y
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+10
	lda adr.PLMONEY+3,y
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+10
	lda :STACKORIGIN+10
	sta adr.PLMONEY,y
	lda :STACKORIGIN+STACKWIDTH+10
	sta adr.PLMONEY+1,y
	lda :STACKORIGIN+STACKWIDTH*2+10
	sta adr.PLMONEY+2,y
	lda :STACKORIGIN+STACKWIDTH*3+10
	sta adr.PLMONEY+3,y
l_5BD1

; optimize OK (updates.pas), line = 313

	ldy CURRENTPLAYER
	lda #$63
	sta adr.PLFREED,y
l_5B8A

; ------------------------------------------------------------

K	= DATAORIGIN+$166D
R	= DATAORIGIN+$166E
PR	= DATAORIGIN+$166F

@VarData	= K
@VarDataSize	= 4

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	UPDATEJOB					; FUNCTION

; optimize OK (updates.pas), line = 325

	lda #$16
	jsr LOADLOCATION

; optimize FAIL ('JOBWORKING', updates.pas), line = 326

	jsr JOBWORKING

; optimize OK (updates.pas), line = 328

	lda CURRENTPLAYER
	asl @
	tay
	lda adr.PLJOBLOCATION+1,y
	bne @+
	lda adr.PLJOBLOCATION,y
	cmp #$07
@
	jeq l_5C28x
	lda adr.PLJOBLOCATION+1,y
	bne @+
	lda adr.PLJOBLOCATION,y
	cmp #$0A
@
	jne l_5C28
@
l_5C28x

; optimize FAIL ('CRT_WRITELN', updates.pas), line = 330

	inx
	mva LOC_STRING_1 :STACKORIGIN,x
	mva LOC_STRING_1+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN

; optimize FAIL ('CRT_WRITELN', updates.pas), line = 331

	inx
	mva LOC_STRING_2 :STACKORIGIN,x
	mva LOC_STRING_2+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN

; optimize FAIL ('EFFECTWAIT', updates.pas), line = 332

	jsr EFFECTWAIT

; optimize FAIL ('B_CRT.CRT_NEWLINE_06EB', updates.pas), line = 333

	jsr B_CRT.CRT_NEWLINE_06EB

; optimize OK (updates.pas), line = 334

	lda #$02
	jsr SYSTEM.RANDOM_02E9
	lda SYSTEM.RANDOM_02E9.RESULT
	jne l_5C42

; optimize FAIL ('CRT_WRITELN', updates.pas), line = 336

	inx
	mva LOC_STRING_3 :STACKORIGIN,x
	mva LOC_STRING_3+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN

; optimize FAIL ('WAITFORKEY', updates.pas), line = 337

	jsr WAITFORKEY

; optimize OK (updates.pas), line = 338

	lda #$01
	sta JOBDONE
	jmp l_5C54
l_5C42

; optimize FAIL ('CRT_WRITELN', updates.pas), line = 342

	inx
	mva LOC_STRING_4 :STACKORIGIN,x
	mva LOC_STRING_4+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN

; optimize FAIL ('CRT_WRITELN', updates.pas), line = 343

	inx
	mva LOC_STRING_5 :STACKORIGIN,x
	mva LOC_STRING_5+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN

; optimize FAIL ('WAITFORKEY', updates.pas), line = 344

	jsr WAITFORKEY

; optimize OK (updates.pas), line = 345

	lda #$00
	sta adr.FP_SEX+$10

; optimize OK (updates.pas), line = 346

	lda #$03
	jsr SYSTEM.RANDOM_02E9
	lda SYSTEM.RANDOM_02E9.RESULT
	sta @CASETMP_0016
	jne l_5C6A
@

; optimize OK (updates.pas), line = 348

	lda adr.FP_GANG+$02
	sta @move.dst
	lda adr.FP_GANG+1+$02
	sta @move.dst+1
	lda LOC_STRING_6
	sta @move.src
	lda LOC_STRING_6+1
	sta @move.src+1
	ldy #$00
	lda (@move.src),y
	add #1
	sta @move.cnt
	scc
	iny
	sty @move.cnt+1
	jsr @move

; optimize OK (updates.pas), line = 349

	lda #$01
	sta adr.FP_SEX+$10
	jmp a_0016
l_5C6A
	cmp #$01
	jne l_5C7E

; optimize OK (updates.pas), line = 351

	lda adr.FP_GANG+$02
	sta @move.dst
	lda adr.FP_GANG+1+$02
	sta @move.dst+1
	lda LOC_STRING_7
	sta @move.src
	lda LOC_STRING_7+1
	sta @move.src+1
	ldy #$00
	lda (@move.src),y
	add #1
	sta @move.cnt
	scc
	iny
	sty @move.cnt+1
	jsr @move
	jmp a_0016
l_5C7E
	cmp #$02
	jne l_5C8D

; optimize OK (updates.pas), line = 352

	lda adr.FP_GANG+$02
	sta @move.dst
	lda adr.FP_GANG+1+$02
	sta @move.dst+1
	lda LOC_STRING_8
	sta @move.src
	lda LOC_STRING_8+1
	sta @move.src+1
	ldy #$00
	lda (@move.src),y
	add #1
	sta @move.cnt
	scc
	iny
	sty @move.cnt+1
	jsr @move
l_5C8D
a_0016

; optimize OK (updates.pas), line = 354

	lda #$01
	sta adr.FP_AI+$01

; optimize OK (updates.pas), line = 355

	sta adr.FP_N+$01

; optimize OK (updates.pas), line = 356

	lda adr.FP_GANG+$02
	sta @move.src
	lda adr.FP_GANG+1+$02
	sta @move.src+1
	lda adr.FP_NAME+$20
	sta @move.dst
	lda adr.FP_NAME+1+$20
	sta @move.dst+1
	ldy #$00
	lda (@move.src),y
	add #1
	sta @move.cnt
	scc
	iny
	sty @move.cnt+1
	jsr @move

; optimize OK (updates.pas), line = 357

	lda #$05
	sta adr.FP_WEAPON+$10

; optimize OK (updates.pas), line = 358

	lda #$1E
	sta adr.FP_ENERGY+$10

; optimize FAIL ('DOFIGHT', updates.pas), line = 360

	jsr DOFIGHT
	lda DOFIGHT.RESULT
	cmp #$01
	jne l_5CC5

; optimize OK (updates.pas), line = 361

	lda #$00
	jmp l_5CD3
l_5CC5

; optimize OK (updates.pas), line = 363

	lda #$01
l_5CD3
	sta JOBDONE

; optimize FAIL ('ENABLECONSOLE', updates.pas), line = 364

	jsr ENABLECONSOLE
l_5C54
l_5C28

; optimize OK (updates.pas), line = 368

	lda CURRENTPLAYER
	asl @
	tay
	lda adr.PLJOBLOCATION+1,y
	bne @+
	lda adr.PLJOBLOCATION,y
	cmp #$0B
@
	jne l_5CEE

; optimize FAIL ('CRT_WRITELN', updates.pas), line = 370

	inx
	mva LOC_STRING_9 :STACKORIGIN,x
	mva LOC_STRING_9+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN

; optimize FAIL ('CRT_WRITELN2', updates.pas), line = 371

	inx
	mva LOC_STRING_10 :STACKORIGIN,x
	mva LOC_STRING_10+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN2

; optimize FAIL ('CRT_WRITELN', updates.pas), line = 372

	inx
	mva LOC_STRING_11 :STACKORIGIN,x
	mva LOC_STRING_11+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN

; optimize FAIL ('CRT_WRITELN', updates.pas), line = 373

	inx
	mva LOC_STRING_12 :STACKORIGIN,x
	mva LOC_STRING_12+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN

; optimize FAIL ('CRT_WRITELN', updates.pas), line = 374

	inx
	mva LOC_STRING_13 :STACKORIGIN,x
	mva LOC_STRING_13+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN

; optimize FAIL ('B_CRT.CRT_WRITE_053A', updates.pas), line = 375

	inx
	mva LOC_STRING_14 :STACKORIGIN,x
	mva LOC_STRING_14+1 :STACKORIGIN+STACKWIDTH,x
	jsr B_CRT.CRT_WRITE_053A

; optimize FAIL ('B_CRT.CRT_NEWLINE_06EB', updates.pas), line = 376

	jsr B_CRT.CRT_NEWLINE_06EB

; optimize OK (updates.pas), line = 377

	lda #$01
	sta READVALUE.MINVALUE
	lda #$00
	sta READVALUE.MINVALUE+1
	lda #$03
	sta READVALUE.MAXVALUE
	lda #$00
	sta READVALUE.MAXVALUE+1
	jsr READVALUE
	lda READVALUE.RESULT
	sta R

; optimize FAIL ('B_CRT.CRT_NEWLINE_06EB', updates.pas), line = 378

	jsr B_CRT.CRT_NEWLINE_06EB

; optimize FAIL ('B_CRT.CRT_NEWLINE_06EB', updates.pas), line = 379

	jsr B_CRT.CRT_NEWLINE_06EB

; optimize OK (updates.pas), line = 381

	lda #$06
	jsr SYSTEM.RANDOM_02E9
	lda R
	cmp SYSTEM.RANDOM_02E9.RESULT
	jcs l_5D1D

; optimize OK (updates.pas), line = 383

	lda #$64
	jsr SYSTEM.RANDOM_02E9
	inx
	mva SYSTEM.RANDOM_02E9.RESULT :STACKORIGIN,x
	inx
	mva R :STACKORIGIN,x
	jsr imulBYTE
	lda :eax
	add #$2C
	sta :STACKORIGIN-1,x
	lda :eax+1
	adc #$01
	sta :STACKORIGIN-1+STACKWIDTH,x
	dex
	lda :STACKORIGIN,x
	sta P
	lda :STACKORIGIN+STACKWIDTH,x
	sta P+1

; optimize FAIL ('CRT_WRITELN', updates.pas), line = 384

	mva LOC_STRING_15 :STACKORIGIN,x
	mva LOC_STRING_15+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN

; optimize FAIL ('B_CRT.CRT_WRITE_053A', updates.pas), line = 385

	inx
	mva LOC_STRING_16 :STACKORIGIN,x
	mva LOC_STRING_16+1 :STACKORIGIN+STACKWIDTH,x
	jsr B_CRT.CRT_WRITE_053A

; optimize OK (updates.pas), line = 386

	lda P
	sta B_CRT.CRT_WRITE_0565.NUM
	lda P+1
	sta B_CRT.CRT_WRITE_0565.NUM+1
	jsr B_CRT.CRT_WRITE_0565

; optimize FAIL ('CRT_WRITELN', updates.pas), line = 387

	inx
	mva #$9D :STACKORIGIN,x
	mva #$0D :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN

; optimize OK (updates.pas), line = 388

	lda P
	sta ADDMONEY.AMOUNT
	lda P+1
	sta ADDMONEY.AMOUNT+1
	jsr ADDMONEY

; optimize FAIL ('WAITFORKEY', updates.pas), line = 389

	jsr WAITFORKEY

; optimize OK (updates.pas), line = 390

	lda #$01
	sta JOBDONE
	jmp l_5D49
l_5D1D

; optimize FAIL ('CRT_WRITELN', updates.pas), line = 394

	inx
	mva LOC_STRING_17 :STACKORIGIN,x
	mva LOC_STRING_17+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN

; optimize FAIL ('CRT_WRITELN', updates.pas), line = 395

	inx
	mva LOC_STRING_18 :STACKORIGIN,x
	mva LOC_STRING_18+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN

; optimize FAIL ('WAITFORKEY', updates.pas), line = 396

	jsr WAITFORKEY

; optimize OK (updates.pas), line = 397

	lda #$01
	sta adr.FP_AI+$01

; optimize OK (updates.pas), line = 398

	sta adr.FP_N+$01

; optimize OK (updates.pas), line = 399

	lda adr.FP_NAME+$20
	sta @move.dst
	lda adr.FP_NAME+1+$20
	sta @move.dst+1
	lda LOC_STRING_30
	sta @move.src
	lda LOC_STRING_30+1
	sta @move.src+1
	ldy #$00
	lda (@move.src),y
	add #1
	sta @move.cnt
	scc
	iny
	sty @move.cnt+1
	jsr @move

; optimize OK (updates.pas), line = 400

	lda adr.FP_GANG+$02
	sta @move.dst
	lda adr.FP_GANG+1+$02
	sta @move.dst+1
	lda LOC_STRING_30
	sta @move.src
	lda LOC_STRING_30+1
	sta @move.src+1
	ldy #$00
	lda (@move.src),y
	add #1
	sta @move.cnt
	scc
	iny
	sty @move.cnt+1
	jsr @move

; optimize OK (updates.pas), line = 401

	lda #$00
	sta adr.FP_SEX+$10

; optimize OK (updates.pas), line = 402

	lda #$01
	sta adr.FP_WEAPON+$10

; optimize OK (updates.pas), line = 403

	lda #$0A
	sta adr.FP_ENERGY+$10

; optimize OK (updates.pas), line = 404

	lda #$1E
	sta adr.FP_STRENGTH+$10

; optimize OK (updates.pas), line = 405

	sta adr.FP_BRUTALITY+$10

; optimize FAIL ('DOFIGHT', updates.pas), line = 407

	jsr DOFIGHT
	lda DOFIGHT.RESULT
	cmp #$01
	jne l_5D8F

; optimize OK (updates.pas), line = 408

	lda #$00
	jmp l_5D9D
l_5D8F

; optimize OK (updates.pas), line = 410

	lda #$01
l_5D9D
	sta JOBDONE

; optimize FAIL ('ENABLECONSOLE', updates.pas), line = 411

	jsr ENABLECONSOLE
l_5D49
l_5CEE

; optimize OK (updates.pas), line = 415

	lda CURRENTPLAYER
	asl @
	tay
	lda adr.PLJOBLOCATION+1,y
	bne @+
	lda adr.PLJOBLOCATION,y
	cmp #$10
@
	jne l_5DB8

; optimize FAIL ('CRT_WRITELN', updates.pas), line = 417

	inx
	mva LOC_STRING_19 :STACKORIGIN,x
	mva LOC_STRING_19+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN

; optimize FAIL ('CRT_WRITELN', updates.pas), line = 418

	inx
	mva LOC_STRING_20 :STACKORIGIN,x
	mva LOC_STRING_20+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN

; optimize FAIL ('WAITFORKEY', updates.pas), line = 419

	jsr WAITFORKEY

; optimize OK (updates.pas), line = 420

	lda #$01
	sta adr.FP_AI+$01

; optimize OK (updates.pas), line = 421

	sta adr.FP_N+$01

; optimize OK (updates.pas), line = 422

	lda adr.FP_NAME+$20
	sta @move.dst
	lda adr.FP_NAME+1+$20
	sta @move.dst+1
	lda LOC_STRING_31
	sta @move.src
	lda LOC_STRING_31+1
	sta @move.src+1
	ldy #$00
	lda (@move.src),y
	add #1
	sta @move.cnt
	scc
	iny
	sty @move.cnt+1
	jsr @move

; optimize OK (updates.pas), line = 423

	lda #$00
	sta adr.FP_SEX+$10

; optimize OK (updates.pas), line = 424

	sta adr.FP_WEAPON+$10

; optimize OK (updates.pas), line = 425

	lda #$14
	sta adr.FP_ENERGY+$10

; optimize OK (updates.pas), line = 426

	lda #$1E
	sta adr.FP_STRENGTH+$10

; optimize OK (updates.pas), line = 427

	sta adr.FP_BRUTALITY+$10

; optimize FAIL ('DOFIGHT', updates.pas), line = 429

	jsr DOFIGHT
	lda DOFIGHT.RESULT
	cmp #$01
	jne l_5DF9

; optimize OK (updates.pas), line = 430

	lda #$00
	jmp l_5E07
l_5DF9

; optimize OK (updates.pas), line = 432

	lda #$01
l_5E07
	sta JOBDONE

; optimize FAIL ('ENABLECONSOLE', updates.pas), line = 433

	jsr ENABLECONSOLE
l_5DB8

; optimize OK (updates.pas), line = 437

	lda JOBDONE
	cmp #$01
	jne l_5E20

; optimize OK (updates.pas), line = 439

	ldy CURRENTPLAYER
	lda adr.PLJOB,y
	sub #$01
	sta adr.PLJOB,y

; optimize OK (updates.pas), line = 440

	jeq l_5E46
	jmp @exit
l_5E46

; optimize FAIL ('JOBWORKING', updates.pas), line = 441

	jsr JOBWORKING

; optimize FAIL ('CRT_WRITELN', updates.pas), line = 442

	inx
	mva LOC_STRING_21 :STACKORIGIN,x
	mva LOC_STRING_21+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN

; optimize OK (updates.pas), line = 443

	lda CURRENTPLAYER
	asl @
	tay
	lda adr.PLJOBWAGE,y
	sta B_CRT.CRT_WRITE_0565.NUM
	lda adr.PLJOBWAGE+1,y
	sta B_CRT.CRT_WRITE_0565.NUM+1
	jsr B_CRT.CRT_WRITE_0565

; optimize FAIL ('CRT_WRITELN', updates.pas), line = 444

	inx
	mva LOC_STRING_22 :STACKORIGIN,x
	mva LOC_STRING_22+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN

; optimize FAIL ('WAITFORKEY', updates.pas), line = 445

	jsr WAITFORKEY

; optimize OK (updates.pas), line = 446

	lda CURRENTPLAYER
	asl @
	tay
	lda adr.PLJOBWAGE,y
	sta ADDMONEY.AMOUNT
	lda adr.PLJOBWAGE+1,y
	sta ADDMONEY.AMOUNT+1
	jsr ADDMONEY

; optimize OK (updates.pas), line = 447

	ldy CURRENTPLAYER
	lda adr.PLNEWPOINTS,y
	add #$03
	sta adr.PLNEWPOINTS,y

; optimize OK (updates.pas), line = 449

	lda #$00
	sta adr.PLJOB,y

; optimize OK (updates.pas), line = 450

	lda CURRENTPLAYER
	asl @
	tay
	lda #$0F
	sta adr.PLJOBLOCATION,y
	lda #$00
	sta adr.PLJOBLOCATION+1,y
	jmp @exit
l_5E20

; optimize FAIL ('JOBWORKING', updates.pas), line = 454

	jsr JOBWORKING

; optimize FAIL ('CRT_WRITELN', updates.pas), line = 455

	inx
	mva LOC_STRING_23 :STACKORIGIN,x
	mva LOC_STRING_23+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN

; optimize FAIL ('CRT_WRITELN', updates.pas), line = 456

	inx
	mva LOC_STRING_24 :STACKORIGIN,x
	mva LOC_STRING_24+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN

; optimize FAIL ('WAITFORKEY', updates.pas), line = 457

	jsr WAITFORKEY

; optimize OK (updates.pas), line = 458

	ldy CURRENTPLAYER
	lda adr.PLNEWPOINTS,y
	sub #$02
	sta adr.PLNEWPOINTS,y

; optimize OK (updates.pas), line = 459

	lda CURRENTPLAYER
	asl @
	tay
	lda #$00
	sta adr.PLJOBLOCATION,y
	sta adr.PLJOBLOCATION+1,y

; optimize OK (updates.pas), line = 460

	ldy CURRENTPLAYER
	sta adr.PLJOB,y
@exit

; ------------------------------------------------------------

RESULT	= DATAORIGIN+$1671
JOBDONE	= DATAORIGIN+$1672
R	= DATAORIGIN+$1673
P	= DATAORIGIN+$1674
@CASETMP_0016	= DATAORIGIN+$1676

@VarData	= JOBDONE
@VarDataSize	= 5

	rts						; ret
.endl

.local	INITGLOBALVARS					; PROCEDURE

; optimize OK (main.pas), line = 75

	lda #$00
	tay

l_5EB0
; --- ForToDoCondition
	cpy #$04
	jcs l_5EBE

; optimize OK (main.pas), line = 77

	lda #$63
	sta adr.PLRENT,y

; optimize OK (main.pas), line = 78

	sta adr.PLLOANSHARK,y

; optimize OK (main.pas), line = 79

	sta adr.PLFREED,y

; --- ForToDoEpilog
	iny
	jne l_5EB0
l_5EBE
	sty K

; ------------------------------------------------------------

K	= DATAORIGIN+$1677

@VarData	= K
@VarDataSize	= 1

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl
l_0261

; optimize OK (main.pas), line = 91

	lda #$22
	sta ATARI.DMACTL

; -------------------  ASM Block 00000181  -------------------

;
        pha
        jsr xbios.xBIOS_SET_DEFAULT_DEVICE
        lda #$00
        sta xbios.xIRQEN
        pla
    
; optimize FAIL ('SYSTEM.RANDOMIZE', main.pas), line = 101

	jsr SYSTEM.RANDOMIZE

; optimize FAIL ('B_SYSTEM.SYSTEMOFF_0415', main.pas), line = 102

	jsr B_SYSTEM.SYSTEMOFF_0415

; optimize OK (main.pas), line = 105

	lda $0800
	sta CS
	lda $0800+1
	sta CS+1

; optimize OK (main.pas), line = 106

	lda CS
	cmp #$78
	jne l_5F00x
	lda CS+1
	cmp #$42
	jeq l_5F00
l_5F00x

; --- RepeatUntilProlog
l_5F02

; optimize FAIL ('B_CRT.CRT_WRITE_053A', main.pas), line = 109

	inx
	mva #$52 :STACKORIGIN,x
	mva #$0E :STACKORIGIN+STACKWIDTH,x
	jsr B_CRT.CRT_WRITE_053A

; optimize OK (main.pas), line = 110

	jmp l_5F02
l_5F00

; optimize FAIL ('ENABLECONSOLE', main.pas), line = 112

	jsr ENABLECONSOLE

; optimize OK (main.pas), line = 114

	lda E7FNAME
	sta XBAPLIB.XBUNAPL.FNAM
	lda E7FNAME+1
	sta XBAPLIB.XBUNAPL.FNAM+1
	lda #$00
	sta XBAPLIB.XBUNAPL.OUTPUTPOINTER
	lda #$E7
	sta XBAPLIB.XBUNAPL.OUTPUTPOINTER+1
	jsr XBAPLIB.XBUNAPL

; optimize FAIL ('INITGLOBALVARS', main.pas), line = 116

	jsr INITGLOBALVARS

; optimize FAIL ('SETUPGAME', main.pas), line = 117

	jsr SETUPGAME

; optimize FAIL ('INITPLAYERS', main.pas), line = 118

	jsr INITPLAYERS

; optimize OK (main.pas), line = 127

	lda #$00
	sta $D20E

; optimize OK (main.pas), line = 139

	sta CURRENTPLAYER

; optimize OK (main.pas), line = 140

	lda #$01
	sta CURRENTMONTH

; optimize OK (main.pas), line = 141

	lda #$00
	sta CURRENTYEAR

; --- RepeatUntilProlog
l_5F23

; optimize OK (main.pas), line = 143

	lda #$13
	jsr LOADLOCATION

; optimize FAIL ('ENABLECONSOLE', main.pas), line = 144

	jsr ENABLECONSOLE

; optimize FAIL ('PLAYERSTURN', main.pas), line = 145

	jsr PLAYERSTURN

; optimize FAIL ('BLACKCONSOLE', main.pas), line = 146

	jsr BLACKCONSOLE

; optimize OK (main.pas), line = 147

	lda #$0F
	sta CURRENTLOCATION

; optimize OK (main.pas), line = 148

	sta LASTLOCATION

; optimize FAIL ('UPDATERANK', main.pas), line = 150

	jsr UPDATERANK

; optimize OK (main.pas), line = 156

	ldy CURRENTPLAYER
	lda adr.PLFAKEMONEY,y
	jeq l_5F46

; optimize OK (main.pas), line = 158

	sub #$01
	sta adr.PLFAKEMONEY,y

; optimize OK (main.pas), line = 159

	jne l_5F6C

; optimize FAIL ('ENABLECONSOLE', main.pas), line = 161

	jsr ENABLECONSOLE

; optimize FAIL ('CRT_WRITELN', main.pas), line = 162

	inx
	mva LOC_STRING_11 :STACKORIGIN,x
	mva LOC_STRING_11+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN

; optimize FAIL ('WAITFORKEY', main.pas), line = 163

	jsr WAITFORKEY
l_5F6C
l_5F46

; optimize OK (main.pas), line = 168

	ldy CURRENTPLAYER
	lda adr.PLFORGEDID,y
	jeq l_5F8B

; optimize OK (main.pas), line = 170

	lda #$0C
	jsr SYSTEM.RANDOM_02E9
	lda SYSTEM.RANDOM_02E9.RESULT
	cmp #$01
	jne l_5F9D

; optimize FAIL ('ENABLECONSOLE', main.pas), line = 172

	jsr ENABLECONSOLE

; optimize FAIL ('CRT_WRITELN', main.pas), line = 173

	inx
	mva LOC_STRING_12 :STACKORIGIN,x
	mva LOC_STRING_12+1 :STACKORIGIN+STACKWIDTH,x
	jsr CRT_WRITELN

; optimize FAIL ('WAITFORKEY', main.pas), line = 174

	jsr WAITFORKEY

; optimize OK (main.pas), line = 175

	ldy CURRENTPLAYER
	lda #$00
	sta adr.PLFORGEDID,y
l_5F9D
l_5F8B

; optimize FAIL ('UPDATEGANGSTERS', main.pas), line = 179

	jsr UPDATEGANGSTERS

; optimize FAIL ('UPDATERENT', main.pas), line = 180

	jsr UPDATERENT

; optimize FAIL ('UPDATEOPPORTUNITIES', main.pas), line = 181

	jsr UPDATEOPPORTUNITIES

; optimize FAIL ('UPDATEPRISON', main.pas), line = 182

	jsr UPDATEPRISON

; optimize OK (main.pas), line = 183

	lda CURRENTLOCATION
	cmp #$11
	jne l_5FC4

; optimize FAIL ('NEXTPLAYER', main.pas), line = 184

	jsr NEXTPLAYER
	jmp c_5F23					; continue
l_5FC4

; optimize OK (main.pas), line = 189

	ldy CURRENTPLAYER
	lda adr.PLBRIBE,y
	jeq l_5FDD

; optimize OK (main.pas), line = 190

	sub #$01
	sta adr.PLBRIBE,y
l_5FDD

; optimize OK (main.pas), line = 192

	lda #$16
	jsr LOADLOCATION

; optimize FAIL ('UPDATELOANSHARK', main.pas), line = 193

	jsr UPDATELOANSHARK

; optimize OK (main.pas), line = 194

	ldy CURRENTPLAYER
	lda adr.PLJOB,y
	jeq l_6008

; optimize FAIL ('UPDATEJOB', main.pas), line = 196

	jsr UPDATEJOB

; optimize OK (main.pas), line = 197

	lda #$11
	sta CURRENTLOCATION

; optimize FAIL ('NEXTPLAYER', main.pas), line = 199

	jsr NEXTPLAYER
	jmp c_5F23					; continue
l_6008

; optimize OK (main.pas), line = 203

	ldy CURRENTPLAYER
	lda adr.PLCAR,y
	tay
	lda adr.CARRANGE,y
	ldy CURRENTPLAYER
	sta adr.PLSTEPS,y

; optimize FAIL ('PLACECURRENTPLAYER', main.pas), line = 204

	jsr PLACECURRENTPLAYER

; optimize FAIL ('LOADMAP', main.pas), line = 205

	jsr LOADMAP

; optimize FAIL ('ENABLESPRITES', main.pas), line = 206

	jsr ENABLESPRITES

; optimize FAIL ('PRINTMAPSTATUS', main.pas), line = 207

	jsr PRINTMAPSTATUS

; --- WhileProlog
	jmp l_6026
l_6027

; optimize FAIL ('ENABLEMAPCONSOLE', main.pas), line = 212

	jsr ENABLEMAPCONSOLE

; optimize FAIL ('PRINTMAPSTATUS', main.pas), line = 213

	jsr PRINTMAPSTATUS

; optimize OK (main.pas), line = 214

	lda #$00
	jsr PAINTPLAYER

; --- RepeatUntilProlog
l_602C

; optimize FAIL ('READKEYANDSTICK', main.pas), line = 217

	jsr READKEYANDSTICK
	lda READKEYANDSTICK.RESULT
	sta CH

; optimize OK (main.pas), line = 218

	cmp #$1E
	jne l_6042

; optimize FAIL ('LOADGAME', main.pas), line = 219

	jsr LOADGAME
	jmp c_602C					; continue
l_6042

; optimize OK (main.pas), line = 222

	lda CH
	cmp #$1F
	jne l_6058

; optimize FAIL ('SAVEGAME', main.pas), line = 223

	jsr SAVEGAME
	jmp c_602C					; continue
l_6058

; optimize OK (main.pas), line = 226

	lda CH
	jsr MOVECURRENTPLAYER
	lda MOVECURRENTPLAYER.RESULT
	sta CURRENTLOCATION

; optimize OK (main.pas), line = 227

	cmp #$11
	jne l_6075
	jmp b_602C					; break
l_6075

; optimize FAIL ('PRINTMAPSTATUS', main.pas), line = 228

	jsr PRINTMAPSTATUS

; optimize OK (main.pas), line = 229

	lda #$01
	sta MAPRELOADED

; optimize FAIL ('CHANGEMAP', main.pas), line = 230

	jsr CHANGEMAP

; optimize OK (main.pas), line = 231

	ldy #1
	lda CURRENTLOCATION
	cmp #$10
	bne @+
	dey
@
	sty :STACKORIGIN+9
	ldy CURRENTPLAYER
	lda adr.PLSTEPS,y
	sta :STACKORIGIN+10
	ldy #1
	lda :STACKORIGIN+10
	bmi @+
	beq @+
	dey
@
	tya
	ora :STACKORIGIN+9
	sta :STACKORIGIN+9
	bne *+5
c_602C
	jmp l_602C
b_602C

; optimize OK (main.pas), line = 233

	lda CURRENTLOCATION
	cmp #$11
	jne l_60AC

; optimize OK (main.pas), line = 235

	ldy CURRENTPLAYER
	lda #$00
	sta adr.PLSTEPS,y

; optimize FAIL ('BLACKCONSOLE', main.pas), line = 236

	jsr BLACKCONSOLE
	jmp b_6027					; break
l_60AC

; optimize OK (main.pas), line = 241

	lda CURRENTLOCATION
	cmp #$0F
	jeq l_60D5x
	cmp #$10
	jne l_60D5
l_60D5x
	jmp b_6027					; break
l_60D5

; optimize OK (main.pas), line = 244

	lda OLDMAPPOS_X
	sta MAPPOS_X

; optimize OK (main.pas), line = 245

	lda OLDMAPPOS_Y
	sta MAPPOS_Y

; optimize OK (main.pas), line = 246

	lda OLDPLAYERPOS_X
	sta PLAYERPOS_X

; optimize OK (main.pas), line = 247

	lda OLDPLAYERPOS_Y
	sta PLAYERPOS_Y

; optimize OK (main.pas), line = 248

	ldy CURRENTPLAYER
	lda adr.PLSTEPS,y
	sub #$04
	sta adr.PLSTEPS,y

; optimize FAIL ('CLEARSPRITES', main.pas), line = 250

	jsr CLEARSPRITES

; optimize FAIL ('BLACKCONSOLE', main.pas), line = 253

	jsr BLACKCONSOLE

; optimize OK (main.pas), line = 255

	lda CURRENTLOCATION
	jsr SHOWLOCATION
	lda SHOWLOCATION.RESULT
	sta CHOICE

; optimize OK (main.pas), line = 256

	cmp LOC_NOPTIONS
	jne l_611D

; optimize OK (main.pas), line = 257

	lda #$0F
	sta CURRENTLOCATION
l_611D

; optimize OK (main.pas), line = 259

	lda CURRENTLOCATION
	sta @CASETMP_0017
	cmp #$01
	jne l_612F
@

; optimize OK (main.pas), line = 260

	lda <CHOICE
	sta BANKCHOICES.CHOICE
	lda >CHOICE
	sta BANKCHOICES.CHOICE+1
	jsr BANKCHOICES
	lda BANKCHOICES.RESULT
	sta OUTCOME
	jmp a_0017
l_612F
	cmp #$02
	jne l_613D

; optimize OK (main.pas), line = 261

	lda <CHOICE
	sta FORGERYCHOICES.CHOICE
	lda >CHOICE
	sta FORGERYCHOICES.CHOICE+1
	jsr FORGERYCHOICES
	lda FORGERYCHOICES.RESULT
	sta OUTCOME
	jmp a_0017
l_613D
	cmp #$03
	jne l_614B

; optimize OK (main.pas), line = 262

	lda <CHOICE
	sta MONEYTRANSPORTERCHOICES.CHOICE
	lda >CHOICE
	sta MONEYTRANSPORTERCHOICES.CHOICE+1
	jsr MONEYTRANSPORTERCHOICES
	lda MONEYTRANSPORTERCHOICES.RESULT
	sta OUTCOME
	jmp a_0017
l_614B
	cmp #$04
	jne l_6159

; optimize OK (main.pas), line = 263

	lda <CHOICE
	sta LOANSHARKCHOICES.CHOICE
	lda >CHOICE
	sta LOANSHARKCHOICES.CHOICE+1
	jsr LOANSHARKCHOICES
	lda LOANSHARKCHOICES.RESULT
	sta OUTCOME
	jmp a_0017
l_6159
	cmp #$05
	jne l_6167

; optimize OK (main.pas), line = 264

	lda <CHOICE
	sta POLICECHOICES.CHOICE
	lda >CHOICE
	sta POLICECHOICES.CHOICE+1
	jsr POLICECHOICES
	lda POLICECHOICES.RESULT
	sta OUTCOME
	jmp a_0017
l_6167
	cmp #$06
	jne l_6175

; optimize OK (main.pas), line = 265

	lda <CHOICE
	sta CARDEALERCHOICES.CHOICE
	lda >CHOICE
	sta CARDEALERCHOICES.CHOICE+1
	jsr CARDEALERCHOICES
	lda CARDEALERCHOICES.RESULT
	sta OUTCOME
	jmp a_0017
l_6175
	cmp #$07
	jne l_6183

; optimize OK (main.pas), line = 266

	lda <CHOICE
	sta PUBCHOICES.CHOICE
	lda >CHOICE
	sta PUBCHOICES.CHOICE+1
	jsr PUBCHOICES
	lda PUBCHOICES.RESULT
	sta OUTCOME
	jmp a_0017
l_6183
	cmp #$17
	jne l_6191

; optimize OK (main.pas), line = 267

	lda <CHOICE
	sta CENTRALSTATIONCHOICES.CHOICE
	lda >CHOICE
	sta CENTRALSTATIONCHOICES.CHOICE+1
	jsr CENTRALSTATIONCHOICES
	lda CENTRALSTATIONCHOICES.RESULT
	sta OUTCOME
	jmp a_0017
l_6191
	cmp #$09
	jne l_619F

; optimize OK (main.pas), line = 268

	lda <CHOICE
	sta STORECHOICES.CHOICE
	lda >CHOICE
	sta STORECHOICES.CHOICE+1
	jsr STORECHOICES
	lda STORECHOICES.RESULT
	sta OUTCOME
	jmp a_0017
l_619F
	cmp #$0A
	jne l_61AD

; optimize OK (main.pas), line = 269

	lda <CHOICE
	sta HIDEOUTCHOICES.CHOICE
	lda >CHOICE
	sta HIDEOUTCHOICES.CHOICE+1
	jsr HIDEOUTCHOICES
	lda HIDEOUTCHOICES.RESULT
	sta OUTCOME
	jmp a_0017
l_61AD
	cmp #$0B
	jne l_61BB

; optimize OK (main.pas), line = 270

	lda <CHOICE
	sta GAMBLINGCHOICES.CHOICE
	lda >CHOICE
	sta GAMBLINGCHOICES.CHOICE+1
	jsr GAMBLINGCHOICES
	lda GAMBLINGCHOICES.RESULT
	sta OUTCOME
	jmp a_0017
l_61BB
	cmp #$0C
	jne l_61C9

; optimize OK (main.pas), line = 271

	lda <CHOICE
	sta SUBWAYCHOICES.CHOICE
	lda >CHOICE
	sta SUBWAYCHOICES.CHOICE+1
	jsr SUBWAYCHOICES
	lda SUBWAYCHOICES.RESULT
	sta OUTCOME
	jmp a_0017
l_61C9
	cmp #$0D
	jne l_61D7

; optimize OK (main.pas), line = 272

	lda <CHOICE
	sta ARMSDEALERCHOICES.CHOICE
	lda >CHOICE
	sta ARMSDEALERCHOICES.CHOICE+1
	jsr ARMSDEALERCHOICES
	lda ARMSDEALERCHOICES.RESULT
	sta OUTCOME
	jmp a_0017
l_61D7
	cmp #$18
	jne l_61E5

; optimize OK (main.pas), line = 273

	lda <CHOICE
	sta MAJORCHOICES.CHOICE
	lda >CHOICE
	sta MAJORCHOICES.CHOICE+1
	jsr MAJORCHOICES
	lda MAJORCHOICES.RESULT
	sta OUTCOME
	jmp a_0017
l_61E5
	cmp #$0F
	jne l_61F3

; optimize OK (main.pas), line = 274

	lda #$0F
	sta OUTCOME
l_61F3
a_0017

; optimize OK (main.pas), line = 277

	lda #$00
	sta MAPRELOADED

; optimize OK (main.pas), line = 278

	lda CURRENTLOCATION
	sta LASTLOCATION

; optimize OK (main.pas), line = 279

	lda OUTCOME
	sta CURRENTLOCATION

; optimize OK (main.pas), line = 282

	lda DIDFIGHT
	cmp #$01
	jne l_622C

; optimize FAIL ('LOADMAP', main.pas), line = 283

	jsr LOADMAP

; optimize FAIL ('ENABLESPRITES', main.pas), line = 284

	jsr ENABLESPRITES

; optimize OK (main.pas), line = 285

	lda #$00
	sta DIDFIGHT

; optimize OK (main.pas), line = 286

	lda OLDMAPPOS_X
	sta MAPPOS_X

; optimize OK (main.pas), line = 287

	lda OLDMAPPOS_Y
	sta MAPPOS_Y

; optimize OK (main.pas), line = 288

	lda OLDPLAYERPOS_X
	sta PLAYERPOS_X

; optimize OK (main.pas), line = 289

	lda OLDPLAYERPOS_Y
	sta PLAYERPOS_Y

; optimize FAIL ('PRINTMAPSTATUS', main.pas), line = 290

	jsr PRINTMAPSTATUS
l_622C
l_6026

; optimize OK (main.pas), line = 210

	ldy CURRENTPLAYER
	lda adr.PLSTEPS,y
	smi
	bne @+
	jmp l_6027w
@
	lda CURRENTLOCATION
	cmp #$11
	jeq l_6027w
@
	jmp l_6027
l_6027w
b_6027

; optimize OK (main.pas), line = 295

	ldy CURRENTPLAYER
	lda MAPPOS_X
	sta adr.PLMAPPOSX,y

; optimize OK (main.pas), line = 296

	lda MAPPOS_Y
	sta adr.PLMAPPOSY,y

; optimize OK (main.pas), line = 297

	lda CURRENTMAP
	sta adr.PLCURRENTMAP,y

; optimize FAIL ('NEXTPLAYER', main.pas), line = 299

	jsr NEXTPLAYER

; optimize OK (main.pas), line = 301

	ldy #1
	lda GAMELENGTH
	cmp CURRENTYEAR
	bcc @+
	dey
@
	tya
	sta GAMEENDS

; optimize OK (main.pas), line = 302

	lda #$00
	sta K
	ldy NPLAYERS
	dey
	sty @FORTMP_629F_0

l_62A2
; --- ForToDoCondition
	lda @FORTMP_629F_0::#$00
	cmp K
	jcc l_62B0

; optimize OK (main.pas), line = 303

	ldy K
	lda adr.PLRANK,y
	cmp #$0B
	jne l_62E3
	lda adr.PLMONEYTRANSPORTER,y
	cmp #$01
	jne l_62E3
	lda adr.PLKILLEDMAJOR,y
	cmp #$01
	jne l_62E3
	inc GAMEENDS
l_62E3

; --- ForToDoEpilog
	inc K
	jne l_62A2
l_62B0

; optimize OK (main.pas), line = 304

	ldy #1
	lda GAMEENDS
	cmp #$01
	beq @+
	dey
@
	tya
	bne *+5
c_5F23
	jmp l_5F23

; optimize FAIL ('ENABLECONSOLE', main.pas), line = 307

	jsr ENABLECONSOLE

; optimize FAIL ('B_CRT.CRT_CLEAR_04E8', main.pas), line = 308

	jsr B_CRT.CRT_CLEAR_04E8

; optimize OK (main.pas), line = 310

	lda #$00
	sta PLAYERPOS_X

; optimize OK (main.pas), line = 311

	sta K
	ldy NPLAYERS
	dey
	sty @FORTMP_6314_0

l_6317
; --- ForToDoCondition
	lda @FORTMP_6314_0::#$00
	cmp K
	jcc l_6325

; optimize OK (main.pas), line = 313

	ldy K
	lda adr.PLRANK,y
	cmp #$0B
	jne l_6358
	lda adr.PLMONEYTRANSPORTER,y
	cmp #$01
	jne l_6358
	lda adr.PLKILLEDMAJOR,y
	cmp #$01
	jne l_6358

; optimize OK (main.pas), line = 314

	lda #$00
	jmp l_6369
l_6358

; optimize OK (main.pas), line = 315

	ldy K
	lda #$01
l_6369
	sta adr.PLCURRENTMAP,y

; optimize OK (main.pas), line = 316

	ldy K
	lda PLAYERPOS_X
	add adr.PLCURRENTMAP,y
	sta PLAYERPOS_X

; --- ForToDoEpilog
	inc K
	jne l_6317
l_6325

; optimize OK (main.pas), line = 319

	lda #$13
	jsr LOADLOCATION

; optimize OK (main.pas), line = 321

	lda PLAYERPOS_X
	cmp #$01
	jne l_6398

; optimize OK (main.pas), line = 322

	lda #$00
	sta K
	ldy NPLAYERS
	dey
	sty @FORTMP_63A5_0

l_63A8
; --- ForToDoCondition
	lda @FORTMP_63A5_0::#$00
	cmp K
	jcc l_63B6

; optimize OK (main.pas), line = 324

	ldy K
	lda adr.PLCURRENTMAP,y
	cmp #$01
	jne l_63CB

; optimize FAIL ('B_CRT.CRT_WRITECENTERED_06F6', main.pas), line = 326

	inx
	mva K :STACKORIGIN,x
	inx
	mva #$03 :STACKORIGIN,x
	jsr shrAL_CL.BYTE
	dex
	lda :STACKORIGIN,x
	asl @
	tay
	lda adr.GANGSTERNAMES,y
	sta :STACKORIGIN,x
	lda adr.GANGSTERNAMES+1,y
	sta :STACKORIGIN+STACKWIDTH,x
	inx
	mva #$05 :STACKORIGIN,x
	jsr B_CRT.CRT_WRITECENTERED_06F6

; optimize FAIL ('B_CRT.CRT_WRITECENTERED_06F6', main.pas), line = 327

	inx
	mva LOC_STRING_35 :STACKORIGIN,x
	mva LOC_STRING_35+1 :STACKORIGIN+STACKWIDTH,x
	inx
	mva #$07 :STACKORIGIN,x
	jsr B_CRT.CRT_WRITECENTERED_06F6

; optimize FAIL ('B_CRT.CRT_WRITECENTERED_06F6', main.pas), line = 328

	inx
	mva LOC_STRING_36 :STACKORIGIN,x
	mva LOC_STRING_36+1 :STACKORIGIN+STACKWIDTH,x
	inx
	mva #$08 :STACKORIGIN,x
	jsr B_CRT.CRT_WRITECENTERED_06F6

; optimize FAIL ('B_CRT.CRT_WRITECENTERED_06F6', main.pas), line = 329

	inx
	mva LOC_STRING_37 :STACKORIGIN,x
	mva LOC_STRING_37+1 :STACKORIGIN+STACKWIDTH,x
	inx
	mva #$09 :STACKORIGIN,x
	jsr B_CRT.CRT_WRITECENTERED_06F6
	jmp b_63A8					; break
l_63CB

; --- ForToDoEpilog
	inc K
	jne l_63A8
l_63B6
b_63A8
	jmp l_63F3
l_6398

; optimize FAIL ('B_CRT.CRT_WRITECENTERED_06F6', main.pas), line = 336

	inx
	mva LOC_STRING_38 :STACKORIGIN,x
	mva LOC_STRING_38+1 :STACKORIGIN+STACKWIDTH,x
	inx
	mva #$05 :STACKORIGIN,x
	jsr B_CRT.CRT_WRITECENTERED_06F6

; optimize OK (main.pas), line = 337

	lda #$00
	sta CHOICE

; optimize OK (main.pas), line = 338

	sta K
	ldy NPLAYERS
	dey
	sty @FORTMP_6407_0

l_640A
; --- ForToDoCondition
	lda @FORTMP_6407_0::#$00
	cmp K
	jcc l_6418

; optimize OK (main.pas), line = 340

	ldy K
	lda adr.PLCURRENTMAP,y
	cmp #$01
	jne l_642D

; optimize FAIL ('B_CRT.CRT_WRITECENTERED_06F6', main.pas), line = 342

	inx
	mva K :STACKORIGIN,x
	inx
	mva #$03 :STACKORIGIN,x
	jsr shlEAX_CL.BYTE
	dex
	lda :STACKORIGIN+STACKWIDTH,x
	asl :STACKORIGIN,x
	rol @
	sta :STACKORIGIN+STACKWIDTH,x
	ldy :STACKORIGIN,x
	lda adr.GANGSTERNAMES,y
	sta :STACKORIGIN,x
	lda adr.GANGSTERNAMES+1,y
	sta :STACKORIGIN+STACKWIDTH,x
	inx
	lda #$07
	add CHOICE
	sta :STACKORIGIN,x
	jsr B_CRT.CRT_WRITECENTERED_06F6

; optimize OK (main.pas), line = 343

	inc CHOICE
l_642D

; --- ForToDoEpilog
	inc K
	jne l_640A
l_6418

; optimize FAIL ('B_CRT.CRT_WRITECENTERED_06F6', main.pas), line = 346

	inx
	mva LOC_STRING_39 :STACKORIGIN,x
	mva LOC_STRING_39+1 :STACKORIGIN+STACKWIDTH,x
	inx
	lda #$07
	add CHOICE
	sta :STACKORIGIN,x
	inx
	mva #$02 :STACKORIGIN,x
	jsr addAL_CL
	dex
	jsr B_CRT.CRT_WRITECENTERED_06F6
l_63F3

; optimize FAIL ('WAITFORKEY', main.pas), line = 348

	jsr WAITFORKEY

; optimize FAIL ('B_SYSTEM.DISABLEDLI', main.pas), line = 350

	jsr B_SYSTEM.DISABLEDLI

; optimize OK (main.pas), line = 351

	lda #$40
	sta ATARI.DLISTL
	lda #$FC
	sta ATARI.DLISTL+1

; optimize OK (main.pas), line = 352

	lda #$0A
	jsr WAITFRAMES

; optimize OK (main.pas), line = 354

	lda FINALFNAME
	sta XBAPLIB.XBUNAPL.FNAM
	lda FINALFNAME+1
	sta XBAPLIB.XBUNAPL.FNAM+1
	lda #$FA
	sta XBAPLIB.XBUNAPL.OUTPUTPOINTER
	lda #$1F
	sta XBAPLIB.XBUNAPL.OUTPUTPOINTER+1
	jsr XBAPLIB.XBUNAPL

; -------------------  ASM Block 00000182  -------------------

    lpend:
        jsr $5000;
        jmp lpend
    
; ------------------------------------------------------------

TXT_ADDRESS	= $C800
MAINFONT_ADR	= $CC00
PMG_BASE_ADR	= $D800
MAP_FNT_ADDRESS	= $F000
MAP_SCR_ADDRESS	= $F400
LOC_MAP_ADR	= $F800
DL_CONSOLE_ADR	= $FC00
DL_BLACK_CONSOLE_ADR	= $FC40
DL_MAP_ADR	= $FC80
XEX_ADDRESS	= $1FFA
VARADRESSE	= $E000
NPLAYERS	= $E000
LASTLOCATIONSTRINGS	= $E001
adr.PLSTUFF	= $E004
.var PLSTUFF	= adr.PLSTUFF .word
adr.PLMONEYTRANSPORTER	= $E008
.var PLMONEYTRANSPORTER	= adr.PLMONEYTRANSPORTER .word
adr.PLKILLEDMAJOR	= $E00C
.var PLKILLEDMAJOR	= adr.PLKILLEDMAJOR .word
adr.PLMONEY	= $E010
.var PLMONEY	= adr.PLMONEY .word
adr.PLFAKEMONEY	= $E020
.var PLFAKEMONEY	= adr.PLFAKEMONEY .word
adr.PLALCOHOL	= $E024
.var PLALCOHOL	= adr.PLALCOHOL .word
adr.PLFORGEDID	= $E028
.var PLFORGEDID	= adr.PLFORGEDID .word
adr.PLCAR	= $E02C
.var PLCAR	= adr.PLCAR .word
adr.PLSTEPS	= $E030
.var PLSTEPS	= adr.PLSTEPS .word
adr.PLMAPPOSX	= $E034
.var PLMAPPOSX	= adr.PLMAPPOSX .word
adr.PLMAPPOSY	= $E038
.var PLMAPPOSY	= adr.PLMAPPOSY .word
adr.PLCURRENTMAP	= $E03C
.var PLCURRENTMAP	= adr.PLCURRENTMAP .word
adr.PLOPPORTUNITY	= $E040
.var PLOPPORTUNITY	= adr.PLOPPORTUNITY .word
adr.PLLOAN	= $E044
.var PLLOAN	= adr.PLLOAN .word
adr.PLLOANTIME	= $E04C
.var PLLOANTIME	= adr.PLLOANTIME .word
adr.PLLOANSHARK	= $E050
.var PLLOANSHARK	= adr.PLLOANSHARK .word
adr.PLRENTMONTHS	= $E054
.var PLRENTMONTHS	= adr.PLRENTMONTHS .word
adr.PLRENTCOST	= $E058
.var PLRENTCOST	= adr.PLRENTCOST .word
adr.PLBRIBE	= $E05C
.var PLBRIBE	= adr.PLBRIBE .word
adr.PLJOB	= $E060
.var PLJOB	= adr.PLJOB .word
adr.PLJOBWAGE	= $E064
.var PLJOBWAGE	= adr.PLJOBWAGE .word
adr.PLJOBLOCATION	= $E06C
.var PLJOBLOCATION	= adr.PLJOBLOCATION .word
adr.PLPRISON	= $E074
.var PLPRISON	= adr.PLPRISON .word
adr.PLRANK	= $E078
.var PLRANK	= adr.PLRANK .word
adr.PLPOINTS	= $E07C
.var PLPOINTS	= adr.PLPOINTS .word
adr.PLNEWPOINTS	= $E080
.var PLNEWPOINTS	= adr.PLNEWPOINTS .word
adr.PLLOANINVEST	= $E084
.var PLLOANINVEST	= adr.PLLOANINVEST .word
adr.PLFREED	= $E08C
.var PLFREED	= adr.PLFREED .word
E7ADR	= $E700
adr.CARPRICES	= $E700
.var CARPRICES	= adr.CARPRICES .word
adr.CARCARGO	= $E706
.var CARCARGO	= adr.CARCARGO .word
adr.CARRANGE	= $E70C
.var CARRANGE	= adr.CARRANGE .word
adr.WEAPONPRICES	= $E712
.var WEAPONPRICES	= adr.WEAPONPRICES .word
adr.WEAPONREACH	= $E724
.var WEAPONREACH	= adr.WEAPONREACH .word
adr.WEAPONPRECISION	= $E72D
.var WEAPONPRECISION	= adr.WEAPONPRECISION .word
adr.WEAPONEFFECT	= $E736
.var WEAPONEFFECT	= adr.WEAPONEFFECT .word
adr.WEAPONSOUND	= $E73F
.var WEAPONSOUND	= adr.WEAPONSOUND .word
adr.FNTNAME	= $E748
.var FNTNAME	= adr.FNTNAME .word
adr.WANTED_M_MFNAME	= $E758
.var WANTED_M_MFNAME	= adr.WANTED_M_MFNAME .word
adr.WANTED_M_MSNAME	= $E768
.var WANTED_M_MSNAME	= adr.WANTED_M_MSNAME .word
adr.WANTED_F_MFNAME	= $E778
.var WANTED_F_MFNAME	= adr.WANTED_F_MFNAME .word
adr.WANTED_F_MSNAME	= $E788
.var WANTED_F_MSNAME	= adr.WANTED_F_MSNAME .word
adr.FIGHTSCRNAME	= $E798
.var FIGHTSCRNAME	= adr.FIGHTSCRNAME .word
adr.FIGHTFNTNAME	= $E7A8
.var FIGHTFNTNAME	= adr.FIGHTFNTNAME .word
adr.GANGSTERFILENAME	= $E7B8
.var GANGSTERFILENAME	= adr.GANGSTERFILENAME .word
adr.LOCABANKFNAME	= $E7C8
.var LOCABANKFNAME	= adr.LOCABANKFNAME .word
adr.LOCAFORGFNAME	= $E7D8
.var LOCAFORGFNAME	= adr.LOCAFORGFNAME .word
adr.LOCAMONYFNAME	= $E7E8
.var LOCAMONYFNAME	= adr.LOCAMONYFNAME .word
adr.LOCALOANFNAME	= $E7F8
.var LOCALOANFNAME	= adr.LOCALOANFNAME .word
adr.LOCAPOLIFNAME	= $E808
.var LOCAPOLIFNAME	= adr.LOCAPOLIFNAME .word
adr.LOCACARSFNAME	= $E818
.var LOCACARSFNAME	= adr.LOCACARSFNAME .word
adr.LOCAPUBBFNAME	= $E828
.var LOCAPUBBFNAME	= adr.LOCAPUBBFNAME .word
adr.LOCAPUBCFNAME	= $E838
.var LOCAPUBCFNAME	= adr.LOCAPUBCFNAME .word
adr.LOCASTORFNAME	= $E848
.var LOCASTORFNAME	= adr.LOCASTORFNAME .word
adr.LOCAHIDEFNAME	= $E858
.var LOCAHIDEFNAME	= adr.LOCAHIDEFNAME .word
adr.LOCAGAMBFNAME	= $E868
.var LOCAGAMBFNAME	= adr.LOCAGAMBFNAME .word
adr.LOCASUBWFNAME	= $E878
.var LOCASUBWFNAME	= adr.LOCASUBWFNAME .word
adr.LOCAARMSFNAME	= $E888
.var LOCAARMSFNAME	= adr.LOCAARMSFNAME .word
adr.LOCAMAINFNAME	= $E898
.var LOCAMAINFNAME	= adr.LOCAMAINFNAME .word
adr.LOCAJOBBFNAME	= $E8A8
.var LOCAJOBBFNAME	= adr.LOCAJOBBFNAME .word
adr.LOCMAJOFNAME	= $E8B8
.var LOCMAJOFNAME	= adr.LOCMAJOFNAME .word
adr.LOCACOURFNAME	= $E8C8
.var LOCACOURFNAME	= adr.LOCACOURFNAME .word
adr.LOCACAUGFNAME	= $E8D8
.var LOCACAUGFNAME	= adr.LOCACAUGFNAME .word
adr.LOCAROADFNAME	= $E8E8
.var LOCAROADFNAME	= adr.LOCAROADFNAME .word
adr.LOCAUPDTFNAME	= $E8F8
.var LOCAUPDTFNAME	= adr.LOCAUPDTFNAME .word
adr.LOCASETUFNAME	= $E908
.var LOCASETUFNAME	= adr.LOCASETUFNAME .word
adr.RANK_1	= $E918
.var RANK_1	= adr.RANK_1 .word
adr.RANK_2	= $E928
.var RANK_2	= adr.RANK_2 .word
adr.RANK_3	= $E938
.var RANK_3	= adr.RANK_3 .word
adr.RANK_4	= $E948
.var RANK_4	= adr.RANK_4 .word
adr.RANK_5	= $E958
.var RANK_5	= adr.RANK_5 .word
adr.RANK_6	= $E968
.var RANK_6	= adr.RANK_6 .word
adr.RANK_7	= $E978
.var RANK_7	= adr.RANK_7 .word
adr.RANK_8	= $E988
.var RANK_8	= adr.RANK_8 .word
adr.RANK_9	= $E998
.var RANK_9	= adr.RANK_9 .word
adr.RANK_10	= $E9A8
.var RANK_10	= adr.RANK_10 .word
adr.RANK_11	= $E9B8
.var RANK_11	= adr.RANK_11 .word
adr.WEAPONNAME_1	= $E9C8
.var WEAPONNAME_1	= adr.WEAPONNAME_1 .word
adr.WEAPONNAME_2	= $E9D8
.var WEAPONNAME_2	= adr.WEAPONNAME_2 .word
adr.WEAPONNAME_3	= $E9E8
.var WEAPONNAME_3	= adr.WEAPONNAME_3 .word
adr.WEAPONNAME_4	= $E9F8
.var WEAPONNAME_4	= adr.WEAPONNAME_4 .word
adr.WEAPONNAME_5	= $EA08
.var WEAPONNAME_5	= adr.WEAPONNAME_5 .word
adr.WEAPONNAME_6	= $EA18
.var WEAPONNAME_6	= adr.WEAPONNAME_6 .word
adr.WEAPONNAME_7	= $EA28
.var WEAPONNAME_7	= adr.WEAPONNAME_7 .word
adr.WEAPONNAME_8	= $EA38
.var WEAPONNAME_8	= adr.WEAPONNAME_8 .word
adr.WEAPONNAME_9	= $EA48
.var WEAPONNAME_9	= adr.WEAPONNAME_9 .word
adr.CARNAMES_1	= $EA58
.var CARNAMES_1	= adr.CARNAMES_1 .word
adr.CARNAMES_2	= $EA68
.var CARNAMES_2	= adr.CARNAMES_2 .word
adr.CARNAMES_3	= $EA78
.var CARNAMES_3	= adr.CARNAMES_3 .word
adr.CARNAMES_4	= $EA88
.var CARNAMES_4	= adr.CARNAMES_4 .word
adr.CARNAMES_5	= $EA98
.var CARNAMES_5	= adr.CARNAMES_5 .word
adr.CARNAMES_6	= $EAA8
.var CARNAMES_6	= adr.CARNAMES_6 .word
adr.RANKNAMES	= [DATAORIGIN+$0B6B] .array [11] .word
.var RANKNAMES	= adr.RANKNAMES .word
adr.WEAPONNAMES	= [DATAORIGIN+$0B81] .array [9] .word
.var WEAPONNAMES	= adr.WEAPONNAMES .word
adr.CARNAMES	= [DATAORIGIN+$0B93] .array [6] .word
.var CARNAMES	= adr.CARNAMES .word
PLAYERPOS_X	= $EAB8
PLAYERPOS_Y	= $EAB9
MAPPOS_X	= $EABA
MAPPOS_Y	= $EABB
OLDMAPPOS_X	= $EABC
OLDMAPPOS_Y	= $EABD
OLDPLAYERPOS_X	= $EABE
OLDPLAYERPOS_Y	= $EABF
adr.FPPOSSTART	= $EAC0
.var FPPOSSTART	= adr.FPPOSSTART .word
adr.LOCACENTFNAME	= $EB00
.var LOCACENTFNAME	= adr.LOCACENTFNAME .word
adr.E7FNAME	= [DATAORIGIN+$0B9F] .array [33]
.var E7FNAME	= adr.E7FNAME .word
adr.SAVEFNAME	= [DATAORIGIN+$0BC0] .array [33]
.var SAVEFNAME	= adr.SAVEFNAME .word
adr.FINALFNAME	= [DATAORIGIN+$0BE1] .array [33]
.var FINALFNAME	= adr.FINALFNAME .word
MAPRELOADED	= DATAORIGIN+$0C02
STICK	= $0278
PCOLR0	= $D012
PCOLR1	= $D013
PCOLR2	= $D014
PCOLR3	= $D015
FP_WINNER	= $EC00
adr.FP_AI	= $EC01
.var FP_AI	= adr.FP_AI .word
adr.FP_N	= $EC03
.var FP_N	= adr.FP_N .word
adr.FP_POSW	= $EC05
.var FP_POSW	= adr.FP_POSW .word
adr.FP_WEAPON	= $EC45
.var FP_WEAPON	= adr.FP_WEAPON .word
adr.FP_ENERGY	= $EC85
.var FP_ENERGY	= adr.FP_ENERGY .word
adr.FP_STRENGTH	= $ECC5
.var FP_STRENGTH	= adr.FP_STRENGTH .word
adr.FP_BRUTALITY	= $ED05
.var FP_BRUTALITY	= adr.FP_BRUTALITY .word
adr.FP_SEX	= $ED45
.var FP_SEX	= adr.FP_SEX .word
adr.FP_GANG_1	= $ED85
.var FP_GANG_1	= adr.FP_GANG_1 .word
adr.FP_GANG_2	= $ED95
.var FP_GANG_2	= adr.FP_GANG_2 .word
adr.FP_NAME_1	= $EDA5
.var FP_NAME_1	= adr.FP_NAME_1 .word
adr.FP_NAME_2	= $EDB5
.var FP_NAME_2	= adr.FP_NAME_2 .word
adr.FP_NAME_3	= $EDC5
.var FP_NAME_3	= adr.FP_NAME_3 .word
adr.FP_NAME_4	= $EDD5
.var FP_NAME_4	= adr.FP_NAME_4 .word
adr.FP_NAME_5	= $EDE5
.var FP_NAME_5	= adr.FP_NAME_5 .word
adr.FP_NAME_6	= $EDF5
.var FP_NAME_6	= adr.FP_NAME_6 .word
adr.FP_NAME_7	= $EE05
.var FP_NAME_7	= adr.FP_NAME_7 .word
adr.FP_NAME_8	= $EE15
.var FP_NAME_8	= adr.FP_NAME_8 .word
adr.FP_NAME_9	= $EE25
.var FP_NAME_9	= adr.FP_NAME_9 .word
adr.FP_NAME_10	= $EE35
.var FP_NAME_10	= adr.FP_NAME_10 .word
adr.FP_NAME_11	= $EE45
.var FP_NAME_11	= adr.FP_NAME_11 .word
adr.FP_NAME_12	= $EE55
.var FP_NAME_12	= adr.FP_NAME_12 .word
adr.FP_NAME_13	= $EE65
.var FP_NAME_13	= adr.FP_NAME_13 .word
adr.FP_NAME_14	= $EE75
.var FP_NAME_14	= adr.FP_NAME_14 .word
adr.FP_NAME_15	= $EE85
.var FP_NAME_15	= adr.FP_NAME_15 .word
adr.FP_NAME_16	= $EE95
.var FP_NAME_16	= adr.FP_NAME_16 .word
adr.FP_NAME_17	= $EEA5
.var FP_NAME_17	= adr.FP_NAME_17 .word
adr.FP_NAME_18	= $EEB5
.var FP_NAME_18	= adr.FP_NAME_18 .word
adr.FP_NAME_19	= $EEC5
.var FP_NAME_19	= adr.FP_NAME_19 .word
adr.FP_NAME_20	= $EED5
.var FP_NAME_20	= adr.FP_NAME_20 .word
FP_CURRENTPLAYER	= $EEE5
FP_CURRENTSITE	= $EEE6
FP_CURRENTCOMMAND	= $EEE7
FP_VALIDCMD	= $EEE8
SHOOT_DIFF	= $EEE9
SHOOT_START	= $EEEA
F_CURPOS	= $EEEF
FIGHT_BULLETTIME	= $03
FIGHT_HITTIME	= $05
FIGHT_TEXTTIME	= $05
FIGHT_ROUNDTIME	= $05
FIGHT_DEADTIME	= $46
adr.FP_GANG	= [DATAORIGIN+$0C03] .array [2] .word
.var FP_GANG	= adr.FP_GANG .word
adr.FP_NAME	= [DATAORIGIN+$0C07] .array [32] .word
.var FP_NAME	= adr.FP_NAME .word
BASEADDRESS	= $BE80
adr.LOC_NAME	= $BE80
.var LOC_NAME	= adr.LOC_NAME .word
adr.LOC_SUBLOCATION_NAME_1	= $BEA8
.var LOC_SUBLOCATION_NAME_1	= adr.LOC_SUBLOCATION_NAME_1 .word
adr.LOC_SUBLOCATION_NAME_2	= $BED0
.var LOC_SUBLOCATION_NAME_2	= adr.LOC_SUBLOCATION_NAME_2 .word
adr.LOC_SUBLOCATION_NAME_3	= $BEF8
.var LOC_SUBLOCATION_NAME_3	= adr.LOC_SUBLOCATION_NAME_3 .word
adr.LOC_SUBLOCATION_NAME_4	= $BF20
.var LOC_SUBLOCATION_NAME_4	= adr.LOC_SUBLOCATION_NAME_4 .word
adr.LOC_OPTIONS_1	= $BF48
.var LOC_OPTIONS_1	= adr.LOC_OPTIONS_1 .word
adr.LOC_OPTIONS_2	= $BF70
.var LOC_OPTIONS_2	= adr.LOC_OPTIONS_2 .word
adr.LOC_OPTIONS_3	= $BF98
.var LOC_OPTIONS_3	= adr.LOC_OPTIONS_3 .word
adr.LOC_OPTIONS_4	= $BFC0
.var LOC_OPTIONS_4	= adr.LOC_OPTIONS_4 .word
adr.LOC_OPTIONS_5	= $BFE8
.var LOC_OPTIONS_5	= adr.LOC_OPTIONS_5 .word
adr.LOC_OPTIONS_6	= $C010
.var LOC_OPTIONS_6	= adr.LOC_OPTIONS_6 .word
adr.LOC_OPTIONS_7	= $C038
.var LOC_OPTIONS_7	= adr.LOC_OPTIONS_7 .word
adr.LOC_OPTIONS_8	= $C060
.var LOC_OPTIONS_8	= adr.LOC_OPTIONS_8 .word
adr.LOC_OPTIONS_9	= $C088
.var LOC_OPTIONS_9	= adr.LOC_OPTIONS_9 .word
adr.LOC_OPTIONS_10	= $C0B0
.var LOC_OPTIONS_10	= adr.LOC_OPTIONS_10 .word
adr.LOC_DESCRIPTION_1	= $C0D8
.var LOC_DESCRIPTION_1	= adr.LOC_DESCRIPTION_1 .word
adr.LOC_DESCRIPTION_2	= $C100
.var LOC_DESCRIPTION_2	= adr.LOC_DESCRIPTION_2 .word
LOC_NOPTIONS	= $C129
adr.LOC_MAP_PLACES	= $C12A
.var LOC_MAP_PLACES	= adr.LOC_MAP_PLACES .word
adr.LOC_STRING_1	= $C130
.var LOC_STRING_1	= adr.LOC_STRING_1 .word
adr.LOC_STRING_2	= $C158
.var LOC_STRING_2	= adr.LOC_STRING_2 .word
adr.LOC_STRING_3	= $C180
.var LOC_STRING_3	= adr.LOC_STRING_3 .word
adr.LOC_STRING_4	= $C1A8
.var LOC_STRING_4	= adr.LOC_STRING_4 .word
adr.LOC_STRING_5	= $C1D0
.var LOC_STRING_5	= adr.LOC_STRING_5 .word
adr.LOC_STRING_6	= $C1F8
.var LOC_STRING_6	= adr.LOC_STRING_6 .word
adr.LOC_STRING_7	= $C220
.var LOC_STRING_7	= adr.LOC_STRING_7 .word
adr.LOC_STRING_8	= $C248
.var LOC_STRING_8	= adr.LOC_STRING_8 .word
adr.LOC_STRING_9	= $C270
.var LOC_STRING_9	= adr.LOC_STRING_9 .word
adr.LOC_STRING_10	= $C298
.var LOC_STRING_10	= adr.LOC_STRING_10 .word
adr.LOC_STRING_11	= $C2C0
.var LOC_STRING_11	= adr.LOC_STRING_11 .word
adr.LOC_STRING_12	= $C2E8
.var LOC_STRING_12	= adr.LOC_STRING_12 .word
adr.LOC_STRING_13	= $C310
.var LOC_STRING_13	= adr.LOC_STRING_13 .word
adr.LOC_STRING_14	= $C338
.var LOC_STRING_14	= adr.LOC_STRING_14 .word
adr.LOC_STRING_15	= $C360
.var LOC_STRING_15	= adr.LOC_STRING_15 .word
adr.LOC_STRING_16	= $C388
.var LOC_STRING_16	= adr.LOC_STRING_16 .word
adr.LOC_STRING_17	= $C3B0
.var LOC_STRING_17	= adr.LOC_STRING_17 .word
adr.LOC_STRING_18	= $C3D8
.var LOC_STRING_18	= adr.LOC_STRING_18 .word
adr.LOC_STRING_19	= $C400
.var LOC_STRING_19	= adr.LOC_STRING_19 .word
adr.LOC_STRING_20	= $C428
.var LOC_STRING_20	= adr.LOC_STRING_20 .word
adr.LOC_STRING_21	= $C450
.var LOC_STRING_21	= adr.LOC_STRING_21 .word
adr.LOC_STRING_22	= $C478
.var LOC_STRING_22	= adr.LOC_STRING_22 .word
adr.LOC_STRING_23	= $C4A0
.var LOC_STRING_23	= adr.LOC_STRING_23 .word
adr.LOC_STRING_24	= $C4C8
.var LOC_STRING_24	= adr.LOC_STRING_24 .word
adr.LOC_STRING_25	= $C4F0
.var LOC_STRING_25	= adr.LOC_STRING_25 .word
adr.LOC_STRING_26	= $C518
.var LOC_STRING_26	= adr.LOC_STRING_26 .word
adr.LOC_STRING_27	= $C540
.var LOC_STRING_27	= adr.LOC_STRING_27 .word
adr.LOC_STRING_28	= $C568
.var LOC_STRING_28	= adr.LOC_STRING_28 .word
adr.LOC_STRING_29	= $C590
.var LOC_STRING_29	= adr.LOC_STRING_29 .word
adr.LOC_STRING_30	= $C5B8
.var LOC_STRING_30	= adr.LOC_STRING_30 .word
adr.LOC_STRING_31	= $C5E0
.var LOC_STRING_31	= adr.LOC_STRING_31 .word
adr.LOC_STRING_32	= $C608
.var LOC_STRING_32	= adr.LOC_STRING_32 .word
adr.LOC_STRING_33	= $C630
.var LOC_STRING_33	= adr.LOC_STRING_33 .word
adr.LOC_STRING_34	= $C658
.var LOC_STRING_34	= adr.LOC_STRING_34 .word
adr.LOC_STRING_35	= $C680
.var LOC_STRING_35	= adr.LOC_STRING_35 .word
adr.LOC_STRING_36	= $C6A8
.var LOC_STRING_36	= adr.LOC_STRING_36 .word
adr.LOC_STRING_37	= $C6D0
.var LOC_STRING_37	= adr.LOC_STRING_37 .word
adr.LOC_STRING_38	= $C6F8
.var LOC_STRING_38	= adr.LOC_STRING_38 .word
adr.LOC_STRING_39	= $C720
.var LOC_STRING_39	= adr.LOC_STRING_39 .word
adr.LOC_STRING_40	= $C748
.var LOC_STRING_40	= adr.LOC_STRING_40 .word
adr.LOC_STRING_41	= $C770
.var LOC_STRING_41	= adr.LOC_STRING_41 .word
LOCCOLBK	= $C798
LOCCOLPF0	= $C799
LOCCOLPF1	= $C79A
LOCCOLPF2	= $C79B
adr.LOC_OPTIONS	= [DATAORIGIN+$0C47] .array [10] .word
.var LOC_OPTIONS	= adr.LOC_OPTIONS .word
adr.LOC_SUBLOCATION_NAMES	= [DATAORIGIN+$0C5B] .array [4] .word
.var LOC_SUBLOCATION_NAMES	= adr.LOC_SUBLOCATION_NAMES .word
adr.PLGANG_1	= $E0D4
.var PLGANG_1	= adr.PLGANG_1 .word
adr.PLGANG_2	= $E0E4
.var PLGANG_2	= adr.PLGANG_2 .word
adr.PLGANG_3	= $E0F4
.var PLGANG_3	= adr.PLGANG_3 .word
adr.PLGANG_4	= $E104
.var PLGANG_4	= adr.PLGANG_4 .word
adr.PLGANG	= [DATAORIGIN+$0C63] .array [4] .word
.var PLGANG	= adr.PLGANG .word
CURRENTMONTH	= $E152
CURRENTYEAR	= $E153
GAMELENGTH	= $E154
GAMEPOINTS	= $E155
adr.GANGSTERNAME_1	= $E158
.var GANGSTERNAME_1	= adr.GANGSTERNAME_1 .word
adr.GANGSTERNAME_2	= $E168
.var GANGSTERNAME_2	= adr.GANGSTERNAME_2 .word
adr.GANGSTERNAME_3	= $E178
.var GANGSTERNAME_3	= adr.GANGSTERNAME_3 .word
adr.GANGSTERNAME_4	= $E188
.var GANGSTERNAME_4	= adr.GANGSTERNAME_4 .word
adr.GANGSTERNAME_5	= $E198
.var GANGSTERNAME_5	= adr.GANGSTERNAME_5 .word
adr.GANGSTERNAME_6	= $E1A8
.var GANGSTERNAME_6	= adr.GANGSTERNAME_6 .word
adr.GANGSTERNAME_7	= $E1B8
.var GANGSTERNAME_7	= adr.GANGSTERNAME_7 .word
adr.GANGSTERNAME_8	= $E1C8
.var GANGSTERNAME_8	= adr.GANGSTERNAME_8 .word
adr.GANGSTERNAME_9	= $E1D8
.var GANGSTERNAME_9	= adr.GANGSTERNAME_9 .word
adr.GANGSTERNAME_10	= $E1E8
.var GANGSTERNAME_10	= adr.GANGSTERNAME_10 .word
adr.GANGSTERNAME_11	= $E1F8
.var GANGSTERNAME_11	= adr.GANGSTERNAME_11 .word
adr.GANGSTERNAME_12	= $E208
.var GANGSTERNAME_12	= adr.GANGSTERNAME_12 .word
adr.GANGSTERNAME_13	= $E218
.var GANGSTERNAME_13	= adr.GANGSTERNAME_13 .word
adr.GANGSTERNAME_14	= $E228
.var GANGSTERNAME_14	= adr.GANGSTERNAME_14 .word
adr.GANGSTERNAME_15	= $E238
.var GANGSTERNAME_15	= adr.GANGSTERNAME_15 .word
adr.GANGSTERNAME_16	= $E248
.var GANGSTERNAME_16	= adr.GANGSTERNAME_16 .word
adr.GANGSTERNAME_17	= $E258
.var GANGSTERNAME_17	= adr.GANGSTERNAME_17 .word
adr.GANGSTERNAME_18	= $E268
.var GANGSTERNAME_18	= adr.GANGSTERNAME_18 .word
adr.GANGSTERNAME_19	= $E278
.var GANGSTERNAME_19	= adr.GANGSTERNAME_19 .word
adr.GANGSTERNAME_20	= $E288
.var GANGSTERNAME_20	= adr.GANGSTERNAME_20 .word
adr.GANGSTERNAME_21	= $E298
.var GANGSTERNAME_21	= adr.GANGSTERNAME_21 .word
adr.GANGSTERNAME_22	= $E2A8
.var GANGSTERNAME_22	= adr.GANGSTERNAME_22 .word
adr.GANGSTERNAME_23	= $E2B8
.var GANGSTERNAME_23	= adr.GANGSTERNAME_23 .word
adr.GANGSTERNAME_24	= $E2C8
.var GANGSTERNAME_24	= adr.GANGSTERNAME_24 .word
adr.GANGSTERNAME_25	= $E2D8
.var GANGSTERNAME_25	= adr.GANGSTERNAME_25 .word
adr.GANGSTERNAME_26	= $E2E8
.var GANGSTERNAME_26	= adr.GANGSTERNAME_26 .word
adr.GANGSTERNAME_27	= $E2F8
.var GANGSTERNAME_27	= adr.GANGSTERNAME_27 .word
adr.GANGSTERNAME_28	= $E308
.var GANGSTERNAME_28	= adr.GANGSTERNAME_28 .word
adr.GANGSTERNAME_29	= $E318
.var GANGSTERNAME_29	= adr.GANGSTERNAME_29 .word
adr.GANGSTERNAME_30	= $E328
.var GANGSTERNAME_30	= adr.GANGSTERNAME_30 .word
adr.GANGSTERNAME_31	= $E338
.var GANGSTERNAME_31	= adr.GANGSTERNAME_31 .word
adr.GANGSTERNAME_32	= $E348
.var GANGSTERNAME_32	= adr.GANGSTERNAME_32 .word
adr.GANGSTERSTR	= $E358
.var GANGSTERSTR	= adr.GANGSTERSTR .word
adr.GANGSTERINT	= $E378
.var GANGSTERINT	= adr.GANGSTERINT .word
adr.GANGSTERBRUT	= $E398
.var GANGSTERBRUT	= adr.GANGSTERBRUT .word
adr.GANGSTERHEALTH	= $E3B8
.var GANGSTERHEALTH	= adr.GANGSTERHEALTH .word
adr.GANGSTERWEAPON	= $E3D8
.var GANGSTERWEAPON	= adr.GANGSTERWEAPON .word
adr.GANGSTERSEX	= $E3F8
.var GANGSTERSEX	= adr.GANGSTERSEX .word
CURRENTGANGSTER	= $E418
GAMEENDS	= $E419
CURRENTPLAYER	= $E41A
LOCCOL	= $E41B
adr.PLRENT	= $E41C
.var PLRENT	= adr.PLRENT .word
CURRENTMAP	= $E420
adr.PLGANGSTERS	= $E421
.var PLGANGSTERS	= adr.PLGANGSTERS .word
adr.PLNGANGSTERS	= $E441
.var PLNGANGSTERS	= adr.PLNGANGSTERS .word
DIDFIGHT	= $E445
adr.BUF_GANGSTERTEXT1	= $E600
.var BUF_GANGSTERTEXT1	= adr.BUF_GANGSTERTEXT1 .word
adr.BUF_GANGSTERTEXT2	= $E628
.var BUF_GANGSTERTEXT2	= adr.BUF_GANGSTERTEXT2 .word
adr.BUF_GANGSTERTEXT3	= $E650
.var BUF_GANGSTERTEXT3	= adr.BUF_GANGSTERTEXT3 .word
adr.BUF_GANGSTERTEXT4	= $E678
.var BUF_GANGSTERTEXT4	= adr.BUF_GANGSTERTEXT4 .word
adr.BUF_GANGSTERTEXT5	= $E6A0
.var BUF_GANGSTERTEXT5	= adr.BUF_GANGSTERTEXT5 .word
adr.BUF_GANGSTERANREDE	= $E6C8
.var BUF_GANGSTERANREDE	= adr.BUF_GANGSTERANREDE .word
BUF_GANGSTERSEX	= $E6D8
BUF_GANGSTERSTR	= $E6D9
BUF_GANGSTERBRUT	= $E6DA
BUF_GANGSTERINT	= $E6DB
BUF_GANGSTERWEAPON	= $E6DC
adr.BUF_GANGSTERNAME	= $E6DD
.var BUF_GANGSTERNAME	= adr.BUF_GANGSTERNAME .word
BUF_GANGSTERPRICE	= $E6ED
adr.GANGSTERNAMES	= [DATAORIGIN+$0C6B] .array [32] .word
.var GANGSTERNAMES	= adr.GANGSTERNAMES .word
adr.FIGHT_STRING_1	= [DATAORIGIN+$0CAB] .array [41]
.var FIGHT_STRING_1	= adr.FIGHT_STRING_1 .word
adr.FIGHT_STRING_2	= [DATAORIGIN+$0CD4] .array [41]
.var FIGHT_STRING_2	= adr.FIGHT_STRING_2 .word
adr.FIGHT_STRING_3	= [DATAORIGIN+$0CFD] .array [41]
.var FIGHT_STRING_3	= adr.FIGHT_STRING_3 .word
adr.FIGHT_STRING_4	= [DATAORIGIN+$0D26] .array [41]
.var FIGHT_STRING_4	= adr.FIGHT_STRING_4 .word
adr.FIGHT_STRING_5	= [DATAORIGIN+$0D4F] .array [41]
.var FIGHT_STRING_5	= adr.FIGHT_STRING_5 .word
adr.FIGHT_STRING_6	= [DATAORIGIN+$0D78] .array [41]
.var FIGHT_STRING_6	= adr.FIGHT_STRING_6 .word
adr.WAITKEY_STRING	= [DATAORIGIN+$0DA1] .array [41]
.var WAITKEY_STRING	= adr.WAITKEY_STRING .word
adr.MAP_STRING_WEAPON	= [DATAORIGIN+$0DCA] .array [41]
.var MAP_STRING_WEAPON	= adr.MAP_STRING_WEAPON .word
adr.MAP_STRING_GANGSTER	= [DATAORIGIN+$0DF3] .array [41]
.var MAP_STRING_GANGSTER	= adr.MAP_STRING_GANGSTER .word
adr.MAP_STRING_RENT	= [DATAORIGIN+$0E1C] .array [41]
.var MAP_STRING_RENT	= adr.MAP_STRING_RENT .word
adr.MAP_STRING_BRIBE	= [DATAORIGIN+$0E45] .array [41]
.var MAP_STRING_BRIBE	= adr.MAP_STRING_BRIBE .word
adr.MAP_STRING_CAR	= [DATAORIGIN+$0E6E] .array [41]
.var MAP_STRING_CAR	= adr.MAP_STRING_CAR .word
adr.MAP_STRING_STEPS	= [DATAORIGIN+$0E97] .array [41]
.var MAP_STRING_STEPS	= adr.MAP_STRING_STEPS .word
adr.MAP_STRING_CARGO	= [DATAORIGIN+$0EC0] .array [41]
.var MAP_STRING_CARGO	= adr.MAP_STRING_CARGO .word
adr.MAP_STRING_MONEY	= [DATAORIGIN+$0EE9] .array [41]
.var MAP_STRING_MONEY	= adr.MAP_STRING_MONEY .word
adr.MAP_STRING_CREDIT	= [DATAORIGIN+$0F12] .array [41]
.var MAP_STRING_CREDIT	= adr.MAP_STRING_CREDIT .word
adr.FIGHT_POLICE_STRING_1	= [DATAORIGIN+$0F3B] .array [41]
.var FIGHT_POLICE_STRING_1	= adr.FIGHT_POLICE_STRING_1 .word
adr.FIGHT_POLICE_STRING_2	= [DATAORIGIN+$0F64] .array [41]
.var FIGHT_POLICE_STRING_2	= adr.FIGHT_POLICE_STRING_2 .word
adr.NOT_ENOUGH_MONEY_STRING	= [DATAORIGIN+$0F8D] .array [41]
.var NOT_ENOUGH_MONEY_STRING	= adr.NOT_ENOUGH_MONEY_STRING .word
adr.YOUR_CHOICE_STRING	= [DATAORIGIN+$0FB6] .array [41]
.var YOUR_CHOICE_STRING	= adr.YOUR_CHOICE_STRING .word
adr.POLICE_STRING_1	= [DATAORIGIN+$0FDF] .array [41]
.var POLICE_STRING_1	= adr.POLICE_STRING_1 .word
N_KEYCODE	= $23
Y_KEYCODE	= $2B
F_KEYCODE	= $38
M_KEYCODE	= $25
SHORT_GAME_KEYCODE	= $3E
LONG_GAME_KEYCODE	= $00
SHOOTING_RANGE_KEYCODE	= $3E
TRAINING_CAMP_KEYCODE	= $2D
CONSOLESTATE	= DATAORIGIN+$1437
BANK_	= $01
FORGERY_	= $02
MONEYTRANSPORT_	= $03
LOANSHARK_	= $04
POLICE_	= $05
CARDEALER_	= $06
PUB_	= $07
MAILTRAIN_	= $08
STORE_	= $09
HIDEOUT_	= $0A
GAMBLING_	= $0B
SUBWAY_	= $0C
ARMSDEALER_	= $0D
TITLE_	= $0E
NONE_	= $0F
STREET_	= $10
END_TURN_	= $11
LOSTFIGHT_	= $12
MAIN_	= $13
PUB2_	= $14
UPDATES_	= $15
JOB_	= $16
CENTRALSTATION_	= $17
MAJOR_	= $18
COURT_	= $19
CAUGHT_	= $1A
ROADBLOCK_	= $1B
SETUP_	= $1C
CURRENTLOCATION	= DATAORIGIN+$1439
CURRENTSUBLOCATION	= DATAORIGIN+$143A
adr.CURRENTSUBLOCATIONNAME	= [DATAORIGIN+$143B] .array [41]
.var CURRENTSUBLOCATIONNAME	= adr.CURRENTSUBLOCATIONNAME .word
MOVESPEED	= $01
LASTLOCATION	= DATAORIGIN+$1577
adr.SAFECLMFNAME	= [DATAORIGIN+$158B] .array [33]
.var SAFECLMFNAME	= adr.SAFECLMFNAME .word
adr.SAFECLMSNAME	= [DATAORIGIN+$15AC] .array [33]
.var SAFECLMSNAME	= adr.SAFECLMSNAME .word
K	= DATAORIGIN+$1678
CHOICE	= DATAORIGIN+$1679
OUTCOME	= DATAORIGIN+$167A
CS	= DATAORIGIN+$167B
CH	= DATAORIGIN+$167D
@CASETMP_0017	= DATAORIGIN+$167E
@exit

@halt	ldx #$00
	txs
	.ifdef MAIN.@DEFINES.ROMOFF
	inc portb
	.fi

	ldy #$01

	rts

; ------------------------------------------------------------

IOCB@COPY	:16 brk

; ------------------------------------------------------------

.local	@DEFINES
ATARI
LOCATION_EN
ROMOFF
NOROMFONT
BASICOFF
.endl

.local	@RESOURCE
.endl

.endl							; MAIN

; ------------------------------------------------------------
; ------------------------------------------------------------

.macro	UNITINITIALIZATION

	.ifdef MAIN.SYSTEM.@UnitInit
	jsr MAIN.SYSTEM.@UnitInit
	.fi

	.ifdef MAIN.ATARI.@UnitInit
	jsr MAIN.ATARI.@UnitInit
	.fi

	.ifdef MAIN.JOYSTICK.@UnitInit
	jsr MAIN.JOYSTICK.@UnitInit
	.fi

	.ifdef MAIN.MATH.@UnitInit
	jsr MAIN.MATH.@UnitInit
	.fi

	.ifdef MAIN.PMG.@UnitInit
	jsr MAIN.PMG.@UnitInit
	.fi

	.ifdef MAIN.XBIOS.@UnitInit
	jsr MAIN.XBIOS.@UnitInit
	.fi

	.ifdef MAIN.XBAPLIB.@UnitInit
	jsr MAIN.XBAPLIB.@UnitInit
	.fi

	.ifdef MAIN.CRT.@UnitInit
	jsr MAIN.CRT.@UnitInit
	.fi

	.ifdef MAIN.CIO.@UnitInit
	jsr MAIN.CIO.@UnitInit
	.fi

	.ifdef MAIN.APLIB.@UnitInit
	jsr MAIN.APLIB.@UnitInit
	.fi

	.ifdef MAIN.B_UTILS.@UnitInit
	jsr MAIN.B_UTILS.@UnitInit
	.fi

	.ifdef MAIN.MISC.@UnitInit
	jsr MAIN.MISC.@UnitInit
	.fi

	.ifdef MAIN.RMT.@UnitInit
	jsr MAIN.RMT.@UnitInit
	.fi

	.ifdef MAIN.B_PMG.@UnitInit
	jsr MAIN.B_PMG.@UnitInit
	.fi

	.ifdef MAIN.DOS.@UnitInit
	jsr MAIN.DOS.@UnitInit
	.fi

	.ifdef MAIN.STRUTILS.@UnitInit
	jsr MAIN.STRUTILS.@UnitInit
	.fi

	.ifdef MAIN.SYSUTILS.@UnitInit
	jsr MAIN.SYSUTILS.@UnitInit
	.fi

	.ifdef MAIN.B_SYSTEM.@UnitInit
	jsr MAIN.B_SYSTEM.@UnitInit
	.fi

	.ifdef MAIN.B_CRT.@UnitInit
	jsr MAIN.B_CRT.@UnitInit
	.fi
.endm

; ------------------------------------------------------------

	ift .SIZEOF(MAIN.SYSTEM) > 0
	.print 'SYSTEM: ',MAIN.SYSTEM,'..',MAIN.SYSTEM+.SIZEOF(MAIN.SYSTEM)-1
	eif

	ift .SIZEOF(MAIN.ATARI) > 0
	.print 'ATARI: ',MAIN.ATARI,'..',MAIN.ATARI+.SIZEOF(MAIN.ATARI)-1
	eif

	ift .SIZEOF(MAIN.JOYSTICK) > 0
	.print 'JOYSTICK: ',MAIN.JOYSTICK,'..',MAIN.JOYSTICK+.SIZEOF(MAIN.JOYSTICK)-1
	eif

	ift .SIZEOF(MAIN.MATH) > 0
	.print 'MATH: ',MAIN.MATH,'..',MAIN.MATH+.SIZEOF(MAIN.MATH)-1
	eif

	ift .SIZEOF(MAIN.PMG) > 0
	.print 'PMG: ',MAIN.PMG,'..',MAIN.PMG+.SIZEOF(MAIN.PMG)-1
	eif

	ift .SIZEOF(MAIN.XBIOS) > 0
	.print 'XBIOS: ',MAIN.XBIOS,'..',MAIN.XBIOS+.SIZEOF(MAIN.XBIOS)-1
	eif

	ift .SIZEOF(MAIN.XBAPLIB) > 0
	.print 'XBAPLIB: ',MAIN.XBAPLIB,'..',MAIN.XBAPLIB+.SIZEOF(MAIN.XBAPLIB)-1
	eif

	ift .SIZEOF(MAIN.CRT) > 0
	.print 'CRT: ',MAIN.CRT,'..',MAIN.CRT+.SIZEOF(MAIN.CRT)-1
	eif

	ift .SIZEOF(MAIN.CIO) > 0
	.print 'CIO: ',MAIN.CIO,'..',MAIN.CIO+.SIZEOF(MAIN.CIO)-1
	eif

	ift .SIZEOF(MAIN.APLIB) > 0
	.print 'APLIB: ',MAIN.APLIB,'..',MAIN.APLIB+.SIZEOF(MAIN.APLIB)-1
	eif

	ift .SIZEOF(MAIN.B_UTILS) > 0
	.print 'B_UTILS: ',MAIN.B_UTILS,'..',MAIN.B_UTILS+.SIZEOF(MAIN.B_UTILS)-1
	eif

	ift .SIZEOF(MAIN.MISC) > 0
	.print 'MISC: ',MAIN.MISC,'..',MAIN.MISC+.SIZEOF(MAIN.MISC)-1
	eif

	ift .SIZEOF(MAIN.RMT) > 0
	.print 'RMT: ',MAIN.RMT,'..',MAIN.RMT+.SIZEOF(MAIN.RMT)-1
	eif

	ift .SIZEOF(MAIN.B_PMG) > 0
	.print 'B_PMG: ',MAIN.B_PMG,'..',MAIN.B_PMG+.SIZEOF(MAIN.B_PMG)-1
	eif

	ift .SIZEOF(MAIN.DOS) > 0
	.print 'DOS: ',MAIN.DOS,'..',MAIN.DOS+.SIZEOF(MAIN.DOS)-1
	eif

	ift .SIZEOF(MAIN.STRUTILS) > 0
	.print 'STRUTILS: ',MAIN.STRUTILS,'..',MAIN.STRUTILS+.SIZEOF(MAIN.STRUTILS)-1
	eif

	ift .SIZEOF(MAIN.SYSUTILS) > 0
	.print 'SYSUTILS: ',MAIN.SYSUTILS,'..',MAIN.SYSUTILS+.SIZEOF(MAIN.SYSUTILS)-1
	eif

	ift .SIZEOF(MAIN.B_SYSTEM) > 0
	.print 'B_SYSTEM: ',MAIN.B_SYSTEM,'..',MAIN.B_SYSTEM+.SIZEOF(MAIN.B_SYSTEM)-1
	eif

	ift .SIZEOF(MAIN.B_CRT) > 0
	.print 'B_CRT: ',MAIN.B_CRT,'..',MAIN.B_CRT+.SIZEOF(MAIN.B_CRT)-1
	eif

.nowarn	.print 'CODE: ',CODEORIGIN,'..',MAIN.@RESOURCE-1

; ------------------------------------------------------------

	?adr = *
	ift (?adr < ?old_adr) && (?old_adr - ?adr < $120)
	?adr = ?old_adr
	eif

	org ?adr
	?old_adr = *

DATAORIGIN
.by  $28 $00 $18 $00 $2D $0C $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $02 $08 $80 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  <[CODEORIGIN+$0003] >[CODEORIGIN+$0003] $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $1F $1C $1F $1E $1F $1E  $1F $1F $1E $1F $1E $1F $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $0E $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $18 $E9 $28 $E9 $38
.by  $E9 $48 $E9 $58 $E9 $68 $E9 $78  $E9 $88 $E9 $98 $E9 $A8 $E9 $B8  $E9 $C8 $E9 $D8 $E9 $E8 $E9 $F8
.by  $E9 $08 $EA $18 $EA $28 $EA $38  $EA $48 $EA $58 $EA $68 $EA $78  $EA $88 $EA $98 $EA $A8 $EA $0B
.by  $45 $37 $30 $30 $50 $41 $47 $45  $41 $50 $4C $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $0B $53 $41 $56 $45 $47 $41 $4D  $45 $44 $41 $54 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $0B $46 $49 $4E $41 $4C $4D
.by  $41 $50 $41 $50 $4C $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $85 $ED $95 $ED $A5  $ED $B5 $ED $C5 $ED $D5 $ED $E5  $ED $F5 $ED $05 $EE $15 $EE $25
.by  $EE $35 $EE $35 $EE $35 $EE $35  $EE $35 $EE $35 $EE $35 $EE $45  $EE $55 $EE $65 $EE $75 $EE $85
.by  $EE $95 $EE $A5 $EE $B5 $EE $C5  $EE $D5 $EE $D5 $EE $D5 $EE $D5  $EE $D5 $EE $D5 $EE $D5 $EE $48
.by  $BF $70 $BF $98 $BF $C0 $BF $E8  $BF $10 $C0 $38 $C0 $60 $C0 $88  $C0 $B0 $C0 $A8 $BE $D0 $BE $F8
.by  $BE $20 $BF $D4 $E0 $E4 $E0 $F4  $E0 $04 $E1 $58 $E1 $68 $E1 $78  $E1 $88 $E1 $98 $E1 $A8 $E1 $B8
.by  $E1 $C8 $E1 $D8 $E1 $E8 $E1 $F8  $E1 $08 $E2 $18 $E2 $28 $E2 $38  $E2 $48 $E2 $58 $E2 $68 $E2 $78
.by  $E2 $88 $E2 $98 $E2 $A8 $E2 $B8  $E2 $C8 $E2 $D8 $E2 $E8 $E2 $F8  $E2 $08 $E3 $18 $E3 $28 $E3 $38
.by  $E3 $48 $E3 $08 $39 $6F $75 $00  $68 $69 $74 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $02 $00 $01 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $0F $35 $6E  $66 $6F $72 $74 $75 $6E $61 $74
.by  $65 $6C $79 $0C $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $0D $00  $69 $73 $00 $6E $6F $77 $00 $64  $65 $61 $64 $0E $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $0B
.by  $39 $6F $75 $00 $6D $69 $73 $73  $65 $64 $01 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $0A $37 $69 $6E $6E $65 $72 $00
.by  $69 $73 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $0C $30 $72 $65 $73 $73 $00  $61 $00 $6B $65 $79 $01 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $07 $37 $65 $61 $70 $6F  $6E $1A $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $09 $27 $61 $6E $67
.by  $73 $74 $65 $72 $1A $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $05 $32 $65 $6E  $74 $1A $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $06 $22 $72  $69 $62 $65 $1A $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $04 $23
.by  $61 $72 $1A $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $06  $33 $74 $65 $70 $73 $1A $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $06 $23 $61 $72 $67 $6F $1A $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $06 $2D $6F $6E $65 $79 $1A  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $07 $23 $72 $65 $64 $69
.by  $74 $1A $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $0A $34 $68 $65 $00  $70 $6F $6C $69 $63 $65 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $07 $2F $66 $66  $69 $63 $65 $72 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $1D $39 $6F
.by  $75 $00 $64 $6F $00 $6E $6F $74  $00 $68 $61 $76 $65 $00 $65 $6E  $6F $75 $67 $68 $00 $6D $6F $6E
.by  $65 $79 $01 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $0D $39  $6F $75 $72 $00 $63 $68 $6F $69
.by  $63 $65 $1F $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $1A  $29 $6E $00 $66 $72 $6F $6E $74  $00 $6F $66 $00 $74 $68 $65 $00
.by  $62 $75 $69 $6C $64 $69 $6E $67  $00 $01 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $0B $53 $41 $46 $45
.by  $43 $4C $4D $46 $41 $50 $4C $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $0B $53 $41 $46  $45 $43 $4C $4D $53 $41 $50 $4C

VARINITSIZE	= *-DATAORIGIN
VARDATASIZE	= 5763

PROGRAMSTACK	= DATAORIGIN+VARDATASIZE

	.print 'DATA: ',DATAORIGIN,'..',PROGRAMSTACK

	run START

; ------------------------------------------------------------

.macro	STATICDATA
.by  $00 $00 $40 $41 $42 $43 $44 $45  $46 $47 $48 $49 $4A $4B $4C $4D  $4E $4F $50 $51 $52 $53 $54 $55
.by  $56 $57 $58 $59 $5A $61 $62 $63  $64 $65 $66 $67 $68 $69 $6A $6B  $6C $6D $6E $6F $70 $71 $72 $73
.by  $74 $75 $76 $77 $78 $79 $7A $30  $31 $32 $33 $34 $35 $36 $37 $38  $39 $2B $2F $00 $04 $54 $52 $55
.by  $45 $00 $05 $46 $41 $4C $53 $45  $00 $0B $45 $37 $30 $30 $50 $41  $47 $45 $41 $50 $4C $00 $0B $53
.by  $41 $56 $45 $47 $41 $4D $45 $44  $41 $54 $00 $0B $46 $49 $4E $41  $4C $4D $41 $50 $41 $50 $4C $00
.by  $08 $39 $6F $75 $00 $68 $69 $74  $00 $00 $02 $00 $01 $00 $0F $35  $6E $66 $6F $72 $74 $75 $6E $61
.by  $74 $65 $6C $79 $0C $00 $00 $0D  $00 $69 $73 $00 $6E $6F $77 $00  $64 $65 $61 $64 $0E $00 $0B $39
.by  $6F $75 $00 $6D $69 $73 $73 $65  $64 $01 $00 $0A $37 $69 $6E $6E  $65 $72 $00 $69 $73 $00 $00 $0C
.by  $30 $72 $65 $73 $73 $00 $61 $00  $6B $65 $79 $01 $00 $07 $37 $65  $61 $70 $6F $6E $1A $00 $09 $27
.by  $61 $6E $67 $73 $74 $65 $72 $1A  $00 $05 $32 $65 $6E $74 $1A $00  $06 $22 $72 $69 $62 $65 $1A $00
.by  $04 $23 $61 $72 $1A $00 $06 $33  $74 $65 $70 $73 $1A $00 $06 $23  $61 $72 $67 $6F $1A $00 $06 $2D
.by  $6F $6E $65 $79 $1A $00 $07 $23  $72 $65 $64 $69 $74 $1A $00 $0A  $34 $68 $65 $00 $70 $6F $6C $69
.by  $63 $65 $00 $07 $2F $66 $66 $69  $63 $65 $72 $00 $1D $39 $6F $75  $00 $64 $6F $00 $6E $6F $74 $00
.by  $68 $61 $76 $65 $00 $65 $6E $6F  $75 $67 $68 $00 $6D $6F $6E $65  $79 $01 $00 $0D $39 $6F $75 $72
.by  $00 $63 $68 $6F $69 $63 $65 $1F  $00 $00 $1A $29 $6E $00 $66 $72  $6F $6E $74 $00 $6F $66 $00 $74
.by  $68 $65 $00 $62 $75 $69 $6C $64  $69 $6E $67 $00 $01 $00 $02 $00  $00 $00 $06 $00 $00 $00 $00 $00
.by  $00 $00 $19 $35 $6E $61 $62 $6C  $65 $00 $74 $6F $00 $6C $6F $61  $64 $00 $27 $21 $2E $27 $33 $34
.by  $25 $32 $33 $01 $00 $02 $04 $01  $00 $03 $00 $0D $00 $00 $02 $25  $1A $00 $03 $00 $22 $1A $00 $03
.by  $00 $29 $1A $00 $03 $00 $33 $1A  $00 $09 $33 $61 $76 $69 $6E $67  $0E $0E $0E $00 $0A $2C $6F $61
.by  $64 $69 $6E $67 $0E $0E $0E $00  $12 $29 $6E $76 $61 $6C $69 $64  $00 $73 $61 $76 $65 $00 $67 $61
.by  $6D $65 $01 $00 $02 $37 $1A $00  $0E $25 $32 $32 $2F $32 $1A $10  $00 $65 $6E $65 $6D $79 $0E $00
.by  $02 $0C $00 $00 $02 $04 $00 $00  $02 $09 $00 $00 $0B $53 $41 $46  $45 $43 $4C $4D $46 $41 $50 $4C
.by  $00 $0B $53 $41 $46 $45 $43 $4C  $4D $53 $41 $50 $4C $00 $02 $04  $0E $00 $02 $09 $1F $00 $04 $04
.by  $09 $1F $00 $00 $03 $0E $0E $0E  $00 $03 $08 $10 $0D $00 $02 $01  $01 $00 $03 $09 $00 $1F $00 $02
.by  $00 $08 $00 $03 $00 $00 $00 $00  $03 $00 $2D $09 $00 $03 $09 $1F  $00 $00 $09 $2E $2F $00 $38 $22
.by  $29 $2F $33 $01 $00 $6C $6A $3B  $FF $FF $6B $2B $2A $6F $FF $70  $75 $9B $69 $2D $3D $76 $FF $63
.by  $FF $FF $62 $78 $7A $34 $FF $33  $36 $1B $35 $32 $31 $2C $20 $2E  $6E $FF $6D $2F $81 $72 $FF $65
.by  $79 $7F $74 $77 $71 $39 $FF $30  $37 $7E $38 $3E $FF $66 $68 $64  $FF $82 $67 $73 $61 $4C $4A $3A
.by  $FF $FF $4B $5C $5E $4F $FF $50  $55 $FF $49 $5F $7C $56 $FF $43  $FF $FF $42 $58 $5A $24 $FF $23
.by  $26 $FF $25 $22 $21 $5B $3B $5D  $4E $FF $4D $3F $FF $52 $FF $45  $59 $FF $54 $57 $51 $28 $FF $29
.by  $27 $FF $40 $FF $FF $46 $48 $44  $FF $FF $47 $53 $41 $FF $FF $FF  $FF $FF $FF $FF $FF $FF $FF $FF
.by  $FF $FF $FF $FF $FF $FF $FF $FF  $FF $FF $FF $FF $FF $FF $FF $FF  $FF $FF $FF $FF $FF $FF $FF $FF
.by  $FF $FF $FF $FF $FF $FF $FF $FF  $FF $FF $FF $FF $FF $FF $FF $FF  $FF $FF $FF $FF $FF $FF $FF $FF
.by  $FF $FF $FF $FF $FF $FF $FF $FF  $FF $FF $FF $FF $FF $FF $FF $FF  $FF $FF $FF $FF $FF $FF $FF $FF
.by  $FF $FF $FF $FF $FF $FF $FF $FF  $FF $FF $FF $FF $FF $FF $FF $FF  $FF $FF $FF $FF $FF $FF $FF $FF
.by  $FF $FF $FF $FF $FF $FF $FF $FF  $FF $FF $FF $FF $FF $FF $FF $FF  $FF $FF $FF $FF $FF
.endm

	end
