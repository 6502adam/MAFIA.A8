mads 2.1.7
  1229 					opt l+
   111 = 0000				?EXTDETECT = 0
   112 = 0000				?VBXDETECT = 0
   113
   114 0C00				DOSFILE '../assets/title.xex' XEX_ADDRESS 0 0 0 0 0 0 0 0
Macro: RESOURCE.DOSFILE [Source: resource.asm]
     1 0C00				.get '../assets/title.xex',0,6
     3 = 4F8F			?len = .filesize('../assets/title.xex')
    76 				 	opt h-
    77 0C00 FF FF 00 20 82 6F + 	ins '../assets/title.xex'
    78 					opt h+
    80 					.print '$R DOSFILE ',.wget[2],'..',*-1," '../assets/title.xex'"
    80 				$R DOSFILE $2000..$5B8E '../assets/title.xex'
Source: title.a65
   115 				.endl
   116
   117 				; ------------------------------------------------------------
   118
   119 5B8F				org CODEORIGIN
   120
   121 0C00				STATICDATA
Macro: STATICDATA [Source: title.a65]
     1 0C00-132C> 00 00 40 41 + .by  $00 $00 $40 $41 $42 $43 $44 $45  $46 $47 $48 $49 $4A $4B $4C $4D  $4E $4F $50 $51 $52 $53 $54 $55
     2 0C18 56 57 58 59 5A 61 + .by  $56 $57 $58 $59 $5A $61 $62 $63  $64 $65 $66 $67 $68 $69 $6A $6B  $6C $6D $6E $6F $70 $71 $72 $73
     3 0C30 74 75 76 77 78 79 + .by  $74 $75 $76 $77 $78 $79 $7A $30  $31 $32 $33 $34 $35 $36 $37 $38  $39 $2B $2F $00 $04 $54 $52 $55
     4 0C48 45 00 05 46 41 4C + .by  $45 $00 $05 $46 $41 $4C $53 $45  $00 $0B $4C $4F $47 $4F $20 $20  $20 $20 $41 $50 $4C $00 $09 $2E
     5 0C60 2F 00 38 22 29 2F + .by  $2F $00 $38 $22 $29 $2F $33 $01  $00 $0B $4D $41 $49 $4E $20 $20  $20 $20 $58 $45 $58 $00 $6C $6A
     6 0C78 3B FF FF 6B 2B 2A + .by  $3B $FF $FF $6B $2B $2A $6F $FF  $70 $75 $9B $69 $2D $3D $76 $FF  $63 $FF $FF $62 $78 $7A $34 $FF
     7 0C90 33 36 1B 35 32 31 + .by  $33 $36 $1B $35 $32 $31 $2C $20  $2E $6E $FF $6D $2F $81 $72 $FF  $65 $79 $7F $74 $77 $71 $39 $FF
     8 0CA8 30 37 7E 38 3E FF + .by  $30 $37 $7E $38 $3E $FF $66 $68  $64 $FF $82 $67 $73 $61 $4C $4A  $3A $FF $FF $4B $5C $5E $4F $FF
     9 0CC0 50 55 FF 49 5F 7C + .by  $50 $55 $FF $49 $5F $7C $56 $FF  $43 $FF $FF $42 $58 $5A $24 $FF  $23 $26 $FF $25 $22 $21 $5B $3B
    10 0CD8 5D 4E FF 4D 3F FF + .by  $5D $4E $FF $4D $3F $FF $52 $FF  $45 $59 $FF $54 $57 $51 $28 $FF  $29 $27 $FF $40 $FF $FF $46 $48
    11 0CF0 44 FF FF 47 53 41 + .by  $44 $FF $FF $47 $53 $41 $FF $FF  $FF $FF $FF $FF $FF $FF $FF $FF  $FF $FF $FF $FF $FF $FF $FF $FF
    12 0D08 FF FF FF FF FF FF + .by  $FF $FF $FF $FF $FF $FF $FF $FF  $FF $FF $FF $FF $FF $FF $FF $FF  $FF $FF $FF $FF $FF $FF $FF $FF
    13 0D20 FF FF FF FF FF FF + .by  $FF $FF $FF $FF $FF $FF $FF $FF  $FF $FF $FF $FF $FF $FF $FF $FF  $FF $FF $FF $FF $FF $FF $FF $FF
    14 0D38 FF FF FF FF FF FF + .by  $FF $FF $FF $FF $FF $FF $FF $FF  $FF $FF $FF $FF $FF $FF $FF $FF  $FF $FF $FF $FF $FF $FF $FF $FF
    15 0D50 FF FF FF FF FF FF + .by  $FF $FF $FF $FF $FF $FF $FF $FF  $FF $FF $FF $FF $FF $FF $FF $FF  $FF $FF $FF $FF $FF $FF $FF $FF
    16 0D68 FF FF FF FF FF FF + .by  $FF $FF $FF $FF $FF $FF $FF $FF  $FF $FF $FF $FF $FF $FF
Source: title.a65
   122
   123 				; ------------------------------------------------------------
   124
   125 0D76			RTLIB
   126 0D76				icl 'rtl6502_a8.asm'
Source: rtl6502_a8.asm
    84 					opt l+
   127
   128 				.print 'ZPAGE: ',zpage,'..',zpend-1
   128 				ZPAGE: $0080..$00D3
   129
   130 				.print 'RTBUF: ',@buf,'..',@buf+255
   130 				RTBUF: $0400..$04FF
   131
   132 				.print 'RTLIB: ',RTLIB,'..',*-1
   132 				RTLIB: $0D76..$0DF5
   133
   134 				; ------------------------------------------------------------
   135
   136 0DF6			START
   137 0DF6 BA				tsx
   138 0DF7 8E 47 12			stx MAIN.@halt+1
   139
   140 					.ifdef MAIN.@DEFINES.ROMOFF
   141 					icl 'atari\romoff.asm'
   142 					.fi
   143
   144 = 011D			VLEN	= VARDATASIZE-VARINITSIZE
   145 = 132D			VADR	= DATAORIGIN+VARINITSIZE
   146
   147 					ift VADR > $BFFF
   148 					ert 'Invalid memory address range ',VADR
   149 					eli (VLEN > 0) && (VLEN <= 256)
   150 					ldx #256-VLEN
   151 					lda #$00
   152 					sta:rne VADR+VLEN-256,x+
   153 					eli VLEN>256
   154 0DFA				m@init
Macro: M@INIT [Source: macros.asm]
     2 0DFA A0 2D			ldy <VADR
     3 0DFC A2 13			ldx >VADR
     5 0DFE A9 00			lda #$00
     6 0E00 F0 07			beq skp_
     8 0E02 99 00 10		clr	sta adr: $1000,y
    10 0E05 C8				iny
    11 0E06 D0 04			bne skp
    12 0E08 E8				inx
    13 0E09 8E 04 0E		skp_	stx adr+1
    15 0E0C E0 14		skp	cpx >VADR+VLEN
    16 0E0E D0 F2			bne clr
    17 0E10 C0 4A			cpy <VADR+VLEN
    18 0E12 D0 EE			bne clr
   155 					eif
   156
   157 				.ifdef psptr
   158 					mwa #PROGRAMSTACK psptr
   159 				.fi
   160
   161 0E14 A2 0F			ldx #$0F					; DOS II+/D ParamStr
   162 0E16 BD 40 03 9D 4C 12 + 	mva:rpl $340,x MAIN.IOCB@COPY,x-
   163
   164 0E1F E8				inx						; X = 0
   165 0E20 86 80			stx bp						; BP = 0
   166
   167 0E22 8E 08 D2			stx audctl					; reset POKEY
   168 0E25 8E 18 D2			stx audctl+$10
   169 0E28 A9 03			lda #3
   170 0E2A 8D 0F D2			sta skctl
   171 0E2D 8D 1F D2			sta skctl+$10
   172
   173 0E30 CA				dex						; X = 255
   174
   175 0E31				UNITINITIALIZATION
Macro: UNITINITIALIZATION [Source: title.a65]
    51 0E31 20 5F 10			jsr MAIN.RMT.@UnitInit
   176
   177 0E34			.local	MAIN						; PROCEDURE
   178
   179 0E34 4C E1 11			jmp l_007A
   180
   181 				; ------------------------------------------------------------
   182
   183 0E37			.local	SYSTEM						; UNIT
   184
   185 0E37			.local	DPEEK						; FUNCTION | ASSEMBLER | REGISTER
   186
   187 				; ------------------------------------------------------------
   188
   189 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   190 				; as Pointer
   191 0E37 B5 94			lda :STACKORIGIN,x
   192 0E39 85 88			sta A
   193 0E3B B5 A4			lda :STACKORIGIN+STACKWIDTH,x
   194 0E3D 85 89			sta A+1
   195 0E3F CA				dex
   196 0E40			@main
   197
   198 				; -------------------  ASM Block 00000003  -------------------
   199
   200 0E40 A0 00			ldy #0
   201 0E42 B1 88 85 90			mva (:edx),y Result
   202 0E46 C8				iny
   203 0E47 B1 88 85 91			mva (:edx),y Result+1
   204
   205 0E4B			@exit
   206
   207 				; ------------------------------------------------------------
   208
   209 				; Push WORD / SMALLINT / SHORTREAL / POINTER
   210 				; as Pointer
   211
   212 0E4B E8				inx
   213 0E4C A5 90 95 94			mva RESULT :STACKORIGIN,x
   214 0E50 A5 91 95 A4			mva RESULT+1 :STACKORIGIN+STACKWIDTH,x
   215
   216 					.ifdef @new
   217 					lda <@VarData
   218 					sta :ztmp
   219 					lda >@VarData
   220 					ldy #@VarDataSize-1
   221 					jmp @FreeMem
   222 					eif
   223
   224 				; ------------------------------------------------------------
   225
   226 = 0088			A	= :EDX
   227 = 0090			RESULT	= :STACKORIGIN-4
   228 0E54 60				rts						; ret
   229 				.endl
   230
   231 0E55			.local	MOVE_00BE					; PROCEDURE | ASSEMBLER | OVERLOAD | REGISTER | INLINE
   232
   233 					.MACRO m@INLINE
   234 				
   235 				; -------------------  ASM Block 00000035  -------------------
   236 				
   237 					jsr @move
   238 				
   239 					.ENDM
   240
   241 				; ------------------------------------------------------------
   242
   243 = 0088			SOURCE	= :EDX
   244 = 008C			DEST	= :ECX
   245 = 0084			COUNT	= :EAX
   246 0E55			@exit
   247 				.endl
   248
   249 				; ------------------------------------------------------------
   250
   251 = 0101			__PORTB_BANKS	= $0101
   252 = 0648			M_PI_2	= $0648
   253 = 0192			D_PI_2	= $0192
   254 = 0004			D_PI_180	= $04
   255 = 0000			MGTIA	= $00
   256 = 0080			MVBXE	= $80
   257 = 0000			VBXE_XDLADR	= $00
   258 = 00E0			VBXE_BCBTMP	= $E0
   259 = 0100			VBXE_BCBADR	= $0100
   260 = 1000			VBXE_MAPADR	= $1000
   261 = 1000			VBXE_CHBASE	= $1000
   262 = 5000			VBXE_OVRADR	= $5000
   263 = B000			VBXE_WINDOW	= $B000
   264 = 0000			IDLI	= $00
   265 = 0001			IVBL	= $01
   266 = 0001			IVBLD	= $01
   267 = 0002			IVBLI	= $02
   268 = 0003			ITIM1	= $03
   269 = 0004			ITIM2	= $04
   270 = 0005			ITIM4	= $05
   271 = 00FE			CH_DELCHR	= $FE
   272 = 009B			CH_ENTER	= $9B
   273 = 001B			CH_ESC	= $1B
   274 = 001C			CH_CURS_UP	= $1C
   275 = 001D			CH_CURS_DOWN	= $1D
   276 = 001E			CH_CURS_LEFT	= $1E
   277 = 001F			CH_CURS_RIGHT	= $1F
   278 = 007F			CH_TAB	= $7F
   279 = 009B			CH_EOL	= $9B
   280 = 007D			CH_CLR	= $7D
   281 = 00FD			CH_BELL	= $FD
   282 = 007E			CH_DEL	= $7E
   283 = 009C			CH_DELLINE	= $9C
   284 = 009D			CH_INSLINE	= $9D
   285 = 0000			PAL_PMCOLOR0	= $00
   286 = 0001			PAL_PMCOLOR1	= $01
   287 = 0002			PAL_PMCOLOR2	= $02
   288 = 0003			PAL_PMCOLOR3	= $03
   289 = 0004			PAL_COLOR0	= $04
   290 = 0005			PAL_COLOR1	= $05
   291 = 0006			PAL_COLOR2	= $06
   292 = 0007			PAL_COLOR3	= $07
   293 = 0008			PAL_COLBAK	= $08
   294 = 0000			COLOR_BLACK	= $00
   295 = 000E			COLOR_WHITE	= $0E
   296 = 0032			COLOR_RED	= $32
   297 = 0096			COLOR_CYAN	= $96
   298 = 0068			COLOR_VIOLET	= $68
   299 = 00C4			COLOR_GREEN	= $C4
   300 = 0074			COLOR_BLUE	= $74
   301 = 00EE			COLOR_YELLOW	= $EE
   302 = 0028			COLOR_ORANGE	= $28
   303 = 00E4			COLOR_BROWN	= $E4
   304 = 003C			COLOR_LIGHTRED	= $3C
   305 = 0004			COLOR_GRAY1	= $04
   306 = 0006			COLOR_GRAY2	= $06
   307 = 000A			COLOR_GRAY3	= $0A
   308 = 00CC			COLOR_LIGHTGREEN	= $CC
   309 = 007C			COLOR_LIGHTBLUE	= $7C
   310 = 0004			FMOPENREAD	= $04
   311 = 0008			FMOPENWRITE	= $08
   312 = 0009			FMOPENAPPEND	= $09
   313 = 000C			FMOPENREADWRITE	= $0C
   314 = 1260			SCREENWIDTH	= DATAORIGIN+$0000
   315 = 1262			SCREENHEIGHT	= DATAORIGIN+$0002
   316 = 1264			DATESEPARATOR	= DATAORIGIN+$0004
   317 = D20A			RND	= $D20A
   318 = 02C0			adr.PALETTE	= $02C0
   319 0E55			.var PALETTE	= adr.PALETTE .word
   320 = D012			adr.HPALETTE	= $D012
   321 0E55			.var HPALETTE	= adr.HPALETTE .word
   322 = 1265			FILEMODE	= DATAORIGIN+$0005
   323 = 1266			GRAPHMODE	= DATAORIGIN+$0006
   324 = 1267			IORESULT	= DATAORIGIN+$0007
   325 = 1268			EOLN	= DATAORIGIN+$0008
   326 = 1269			RNDSEED	= DATAORIGIN+$0009
   327
   328 = 0E55 C0 02		PALETTE
   328 = 0E57 12 D0		HPALETTE
   328 				.endl							; UNIT SYSTEM
   329
   330 				; ------------------------------------------------------------
   331
   332 0E59			.local	ATARI						; UNIT
   333
   334 				; ------------------------------------------------------------
   335
   336 = 0010			IRQENS	= $10
   337 = 0012			RTCLOK	= $12
   338 = 0012			RTCLOK1	= $12
   339 = 0013			RTCLOK2	= $13
   340 = 0014			RTCLOK3	= $14
   341 = 004D			ATRACT	= $4D
   342 = 0052			LMARGIN	= $52
   343 = 0053			RMARGIN	= $53
   344 = 0054			ROWCRS	= $54
   345 = 0055			COLCRS	= $55
   346 = 0057			DINDEX	= $57
   347 = 0058			SAVMSC	= $58
   348 = 0062			PALNTS	= $62
   349 = 006A			RAMTOP	= $6A
   350 = 0200			VDSLST	= $0200
   351 = 0230			SDLSTL	= $0230
   352 = 0290			TXTROW	= $0290
   353 = 0291			TXTCOL	= $0291
   354 = 0293			TINDEX	= $0293
   355 = 0294			TXTMSC	= $0294
   356 = 022F			SDMCTL	= $022F
   357 = 026F			GPRIOR	= $026F
   358 = 02F0			CRSINH	= $02F0
   359 = 02F3			CHACT	= $02F3
   360 = 02F4			CHBAS	= $02F4
   361 = 02FC			CH	= $02FC
   362 = 02FD			FILDAT	= $02FD
   363 = 02C0			PCOLR0	= $02C0
   364 = 02C1			PCOLR1	= $02C1
   365 = 02C2			PCOLR2	= $02C2
   366 = 02C3			PCOLR3	= $02C3
   367 = 02C4			COLOR0	= $02C4
   368 = 02C5			COLOR1	= $02C5
   369 = 02C6			COLOR2	= $02C6
   370 = 02C7			COLOR3	= $02C7
   371 = 02C8			COLOR4	= $02C8
   372 = 02C8			COLBAKS	= $02C8
   373 = D000			HPOSP0	= $D000
   374 = D001			HPOSP1	= $D001
   375 = D002			HPOSP2	= $D002
   376 = D003			HPOSP3	= $D003
   377 = D004			HPOSM0	= $D004
   378 = D005			HPOSM1	= $D005
   379 = D006			HPOSM2	= $D006
   380 = D007			HPOSM3	= $D007
   381 = D008			SIZEP0	= $D008
   382 = D009			SIZEP1	= $D009
   383 = D00A			SIZEP2	= $D00A
   384 = D00B			SIZEP3	= $D00B
   385 = D00C			SIZEM	= $D00C
   386 = D00D			GRAFP0	= $D00D
   387 = D00E			GRAFP1	= $D00E
   388 = D00F			GRAFP2	= $D00F
   389 = D010			GRAFP3	= $D010
   390 = D011			GRAFM	= $D011
   391 = D004			P0PF	= $D004
   392 = D014			PAL	= $D014
   393 = D013			TRIG3	= $D013
   394 = D012			COLPM0	= $D012
   395 = D013			COLPM1	= $D013
   396 = D014			COLPM2	= $D014
   397 = D015			COLPM3	= $D015
   398 = D016			COLPF0	= $D016
   399 = D017			COLPF1	= $D017
   400 = D018			COLPF2	= $D018
   401 = D019			COLPF3	= $D019
   402 = D01A			COLBK	= $D01A
   403 = D01B			PRIOR	= $D01B
   404 = D01D			GRACTL	= $D01D
   405 = D01E			HITCLR	= $D01E
   406 = D01F			CONSOL	= $D01F
   407 = D200			AUDF1	= $D200
   408 = D201			AUDC1	= $D201
   409 = D202			AUDF2	= $D202
   410 = D203			AUDC2	= $D203
   411 = D204			AUDF3	= $D204
   412 = D205			AUDC3	= $D205
   413 = D206			AUDF4	= $D206
   414 = D207			AUDC4	= $D207
   415 = D208			AUDCTL	= $D208
   416 = D209			KBCODE	= $D209
   417 = D20E			IRQEN	= $D20E
   418 = D20F			SKSTAT	= $D20F
   419 = D300			PORTA	= $D300
   420 = D301			PORTB	= $D301
   421 = D302			PACTL	= $D302
   422 = D400			DMACTL	= $D400
   423 = D401			CHACTL	= $D401
   424 = D402			DLISTL	= $D402
   425 = D404			HSCROL	= $D404
   426 = D405			VSCROL	= $D405
   427 = D407			PMBASE	= $D407
   428 = D409			CHBASE	= $D409
   429 = D40A			WSYNC	= $D40A
   430 = D40B			VCOUNT	= $D40B
   431 = D40C			PENH	= $D40C
   432 = D40D			PENV	= $D40D
   433 = D40E			NMIEN	= $D40E
   434 = FFFA			NMIVEC	= $FFFA
   435 = FFFC			RESETVEC	= $FFFC
   436 = FFFE			IRQVEC	= $FFFE
   437
   438 				.endl							; UNIT ATARI
   439
   440 				; ------------------------------------------------------------
   441
   442 0E59			.local	JOYSTICK					; UNIT
   443
   444 				; ------------------------------------------------------------
   445
   446 = 000F			JOY_NONE	= $0F
   447 = 000E			JOY_UP	= $0E
   448 = 000D			JOY_DOWN	= $0D
   449 = 000B			JOY_LEFT	= $0B
   450 = 000A			JOY_LEFT_UP	= $0A
   451 = 0009			JOY_LEFT_DOWN	= $09
   452 = 0007			JOY_RIGHT	= $07
   453 = 0006			JOY_RIGHT_UP	= $06
   454 = 0005			JOY_RIGHT_DOWN	= $05
   455 = 0278			JOY_1	= $0278
   456 = 0279			JOY_2	= $0279
   457 = 0278			adr.STICK	= $0278
   458 0E59			.var STICK	= adr.STICK .word
   459 = 0278			STICK0	= $0278
   460 = 0279			STICK1	= $0279
   461 = 0284			adr.STRIG	= $0284
   462 0E59			.var STRIG	= adr.STRIG .word
   463 = 0284			STRIG0	= $0284
   464 = 0285			STRIG1	= $0285
   465 = 0270			adr.PADDL	= $0270
   466 0E59			.var PADDL	= adr.PADDL .word
   467 = 0270			PADDL0	= $0270
   468 = 0271			PADDL1	= $0271
   469 = 0272			PADDL2	= $0272
   470 = 0273			PADDL3	= $0273
   471 = 0274			PADDL4	= $0274
   472 = 0275			PADDL5	= $0275
   473 = 0276			PADDL6	= $0276
   474 = 0277			PADDL7	= $0277
   475 = 027C			adr.PTRIG	= $027C
   476 0E59			.var PTRIG	= adr.PTRIG .word
   477 = 027C			PTRIG0	= $027C
   478 = 027D			PTRIG1	= $027D
   479 = 027E			PTRIG2	= $027E
   480 = 027F			PTRIG3	= $027F
   481 = 0280			PTRIG4	= $0280
   482 = 0281			PTRIG5	= $0281
   483 = 0282			PTRIG6	= $0282
   484 = 0283			PTRIG7	= $0283
   485 = D010			TRIG0	= $D010
   486 = D011			TRIG1	= $D011
   487 = D200			POT0	= $D200
   488 = D208			ALLPOT	= $D208
   489 = D20B			POTGO	= $D20B
   490
   491 = 0E59 78 02		STICK
   491 = 0E5B 84 02		STRIG
   491 = 0E5D 70 02		PADDL
   491 = 0E5F 7C 02		PTRIG
   491 				.endl							; UNIT JOYSTICK
   492
   493 				; ------------------------------------------------------------
   494
   495 0E61			.local	MATH						; UNIT
   496
   497 				; ------------------------------------------------------------
   498
   499 				.endl							; UNIT MATH
   500
   501 				; ------------------------------------------------------------
   502
   503 0E61			.local	PMG						; UNIT
   504
   505 				; ------------------------------------------------------------
   506
   507 = 000E			_P_MAX	= $0E
   508 = 0002			_M0_MAX	= $02
   509 = 0000			_M1_MAX	= $00
   510 = 0003			_M2_MAX	= $03
   511 = 0004			_M3_MAX	= $04
   512 = 0000			_PM_NORMAL_SIZE	= $00
   513 = 0001			_PM_DOUBLE_SIZE	= $01
   514 = 0003			_PM_QUAD_SIZE	= $03
   515 = 0003			_PM_SHOW_ON	= $03
   516 = 0000			_PM_SHOW_OFF	= $00
   517 = 0001			_PM_DOUBLE_RES	= $01
   518 = 0002			_PM_SINGLE_RES	= $02
   519 = 126B			adr.P_DATA	= [DATAORIGIN+$000B] .array [4] .word
   520 0E61			.var P_DATA	= adr.P_DATA .word
   521 = 1273			adr.M_DATA	= [DATAORIGIN+$0013] .array [4] .word
   522 0E61			.var M_DATA	= adr.M_DATA .word
   523 = 127B			PM_MEM	= DATAORIGIN+$001B
   524 = 127D			PM_OFFSET	= DATAORIGIN+$001D
   525 = 127F			PM_TOP	= DATAORIGIN+$001F
   526 = 1280			PM_SIZE	= DATAORIGIN+$0020
   527
   528 = 0E61 6B 12		P_DATA
   528 = 0E63 73 12		M_DATA
   528 				.endl							; UNIT PMG
   529
   530 				; ------------------------------------------------------------
   531
   532 0E65			.local	XBIOS						; UNIT
   533
   534 0E65			.local	XBIOSLOADFILE					; PROCEDURE | ASSEMBLER
   535
   536 				; -------------------  ASM Block 00000062  -------------------
   537
   538
   539 0E65 8A 48		    txa:pha
   540 0E67 A9 00 8D 82 12	    mva #0 xBiosIOresult
   541 0E6C 8D 83 12		    sta xBiosIOerror
   542 0E6F AC 88 12		    ldy filename
   543 0E72 AE 89 12		    ldx filename+1
   544 0E75 C8			    iny
   545 0E76 D0 01		    sne
   546 0E78 E8			    inx
   547 0E79 20 06 08		    jsr xBIOS_LOAD_FILE
   548 0E7C 90 08		    bcc @+
   549 0E7E 8E 83 12		    stx xBiosIOerror
   550 0E81 A9 01 8D 82 12	    mva #1 xBiosIOresult 
   551 0E86 68 AA		@   pla:tax
   552
   553 				; ------------------------------------------------------------
   554
   555 = 1288			FILENAME	= DATAORIGIN+$0028
   556
   557 = 1288			@VarData	= FILENAME
   558 = 0002			@VarDataSize	= 2
   559
   560 0E88			@exit
   561 					.ifdef @new
   562 					lda <@VarData
   563 					sta :ztmp
   564 					lda >@VarData
   565 					ldy #@VarDataSize-1
   566 					jmp @FreeMem
   567 					els
   568 0E88 60				rts						; ret
   569 					eif
   570 				.endl
   571
   572 0E89			.local	XBIOSOPENFILE					; PROCEDURE | ASSEMBLER
   573
   574 				; -------------------  ASM Block 00000063  -------------------
   575
   576
   577 0E89 8A 48		    txa:pha
   578 0E8B A9 00 8D 82 12	    mva #0 xBiosIOresult
   579 0E90 8D 83 12		    sta xBiosIOerror
   580 0E93 AC 8A 12		    ldy filename
   581 0E96 AE 8B 12		    ldx filename+1
   582 0E99 C8			    iny
   583 0E9A D0 01		    sne
   584 0E9C E8			    inx
   585 0E9D 20 09 08		    jsr xBIOS_OPEN_FILE
   586 0EA0 90 08		    bcc @+
   587 0EA2 8E 83 12		    stx xBiosIOerror
   588 0EA5 A9 01 8D 82 12	    mva #1 xBiosIOresult 
   589 0EAA 68 AA		@   pla:tax
   590
   591 				; ------------------------------------------------------------
   592
   593 = 128A			FILENAME	= DATAORIGIN+$002A
   594
   595 = 128A			@VarData	= FILENAME
   596 = 0002			@VarDataSize	= 2
   597
   598 0EAC			@exit
   599 					.ifdef @new
   600 					lda <@VarData
   601 					sta :ztmp
   602 					lda >@VarData
   603 					ldy #@VarDataSize-1
   604 					jmp @FreeMem
   605 					els
   606 0EAC 60				rts						; ret
   607 					eif
   608 				.endl
   609
   610 				; ------------------------------------------------------------
   611
   612 = 1282			XBIOSIORESULT	= DATAORIGIN+$0022
   613 = 1283			XBIOSIOERROR	= DATAORIGIN+$0023
   614 = 1284			XBIOSDIRENTRYINDEX	= DATAORIGIN+$0024
   615 = 1285			XBIOSDIRENTRYSTATUS	= DATAORIGIN+$0025
   616 = 1286			XBIOSDIRENTRYSECTOR	= DATAORIGIN+$0026
   617 = 0800			XBIOS_ADDRESS	= $0800
   618 = 0802			XBIOS_VERSION	= $0802
   619 = 0803			XBIOS_RENAME_ENTRY	= $0803
   620 = 0806			XBIOS_LOAD_FILE	= $0806
   621 = 0809			XBIOS_OPEN_FILE	= $0809
   622 = 080C			XBIOS_LOAD_DATA	= $080C
   623 = 080F			XBIOS_WRITE_DATA	= $080F
   624 = 0812			XBIOS_OPEN_CURRENT_DIR	= $0812
   625 = 0815			XBIOS_GET_BYTE	= $0815
   626 = 0818			XBIOS_PUT_BYTE	= $0818
   627 = 081B			XBIOS_FLUSH_BUFFER	= $081B
   628 = 081E			XBIOS_SET_LENGTH	= $081E
   629 = 0821			XBIOS_SET_INIAD	= $0821
   630 = 0824			XBIOS_SET_FILE_OFFSET	= $0824
   631 = 0827			XBIOS_SET_RUNAD	= $0827
   632 = 082A			XBIOS_SET_DEFAULT_DEVICE	= $082A
   633 = 082D			XBIOS_OPEN_DIR	= $082D
   634 = 0830			XBIOS_LOAD_BINARY_FILE	= $0830
   635 = 0833			XBIOS_OPEN_DEFAULT_DIR	= $0833
   636 = 0836			XBIOS_SET_DEVICE	= $0836
   637 = 0839			XBIOS_RELOCATE_BUFFER	= $0839
   638 = 083C			XBIOS_GET_ENTRY	= $083C
   639 = 083F			XBIOS_OPEN_DEFAULT_FILE	= $083F
   640 = 0842			XBIOS_READ_SECTOR	= $0842
   641 = 0845			XBIOS_FIND_ENTRY	= $0845
   642 = 0848			XBIOS_SET_BUFFER_SIZE	= $0848
   643 = 0BE5			XDIRSIZE	= $0BE5
   644 = 0BE6			XSPEED	= $0BE6
   645 = 0BE7			XHSPEED	= $0BE7
   646 = 0BE8			XIRQEN	= $0BE8
   647 = 0BE9			XAUDCTL	= $0BE9
   648 = 0BEA			XFILE	= $0BEA
   649 = 0BEC			XDIR	= $0BEC
   650 = 0BEE			XIOV	= $0BEE
   651 = 0BF0			XBUFFERH	= $0BF0
   652 = 0BF1			XBUFSIZE	= $0BF1
   653 = 0BF2			XDAUX3	= $0BF2
   654 = 0BF3			XSEGMENT	= $0BF3
   655 = 0BF5			XNOTE	= $0BF5
   656 = 0BF7			XNOTEH	= $0BF7
   657 = 0BFC			XDEVICE	= $0BFC
   658 = 0BFD			XDCMD	= $0BFD
   659 = 0BFE			XDAUX1	= $0BFE
   660 = 0BFF			XDAUX2	= $0BFF
   661
   662 				.endl							; UNIT XBIOS
   663
   664 				; ------------------------------------------------------------
   665
   666 0EAD			.local	XBAPLIB						; UNIT
   667
   668 0EAD			.local	XBUNAPL						; PROCEDURE
   669
   670 				; optimize OK (XBAPLIB), line = 43
   671
   672 0EAD AD 8C 12			lda FNAM
   673 0EB0 8D 8A 12			sta XBIOS.XBIOSOPENFILE.FILENAME
   674 0EB3 AD 8D 12			lda FNAM+1
   675 0EB6 8D 8B 12			sta XBIOS.XBIOSOPENFILE.FILENAME+1
   676 0EB9 20 89 0E			jsr XBIOS.XBIOSOPENFILE
   677
   678 				; -------------------  ASM Block 00000086  -------------------
   679
   680 0EBC 8E D8 0F				stx @sp
   681
   682 0EBF AD 8E 12 8D 90 0F + 		mwa outputPointer dest_ap
   683
   684 				//		mva #$00 GET_BYTE+1
   685
   686 0ECB A9 80		aPL_depack	lda #$80
   687 0ECD 8D 8E 0F				sta token
   688 0ED0 4E 1C 0F		literal		lsr bl
   689 0ED3 20 15 08				jsr xbios.xBIOS_GET_BYTE
   690 0ED6 20 8F 0F		write		jsr store
   691 0ED9 20 7F 0F		nxt_token	jsr get_token_bit
   692 0EDC 90 F2				bcc literal		; literal  -> 0
   693 0EDE 20 7F 0F				jsr get_token_bit
   694 0EE1 90 34				bcc block		; block    -> 10
   695 0EE3 20 7F 0F				jsr get_token_bit
   696 0EE6 90 15				bcc short_block		; short block -> 110
   697
   698 0EE8 4E 1C 0F		single_byte	lsr bl			; single byte -> 111
   699 0EEB A9 10				lda #$10
   700 0EED 48			@		pha
   701 0EEE 20 7F 0F				jsr get_token_bit
   702 0EF1 68					pla
   703 0EF2 2A					rol @
   704 0EF3 90 F8				bcc @-
   705 0EF5 F0 DF				beq write
   706 0EF7 4C 9B 0F				jmp len01
   707
   708 0EFA 4C CE 0F		aPL_done	jmp to_exit
   709
   710 0EFD 20 15 08		short_block	jsr xbios.xBIOS_GET_BYTE
   711 0F00 4A					lsr @
   712 0F01 F0 F7				beq aPL_done
   713 0F03 8D 26 0F				sta EBPL
   714 0F06 A2 00				ldx #0
   715 0F08 8E 2B 0F				stx EBPH
   716 0F0B A2 02				ldx #$02
   717 0F0D 90 01				bcc @+
   718 0F0F E8					inx
   719 0F10 38			@		sec
   720 0F11 6E 1C 0F				ror  bl
   721 0F14 4C 9D 0F				jmp len0203
   722
   723 0F17 20 65 0F		block		jsr getgamma
   724 0F1A CA					dex
   725 0F1B A9 FF				lda #$ff
   726 = 0F1C			bl		equ *-1
   727 0F1D 30 13				bmi normalcodepair
   728 0F1F CA					dex
   729 0F20 D0 10				bne normalcodepair
   730 0F22 20 65 0F				jsr getgamma
   731 0F25 A9 FF				lda #$ff
   732 = 0F26			EBPL		equ *-1
   733 0F27 8D AB 0F				sta offsetL
   734 0F2A A9 FF				lda #$ff
   735 = 0F2B			EBPH		equ *-1
   736 0F2C 8D B3 0F				sta offsetH
   737 0F2F 4C 5E 0F				jmp lenffff
   738
   739 0F32 CA			normalcodepair	dex
   740 0F33 8E B3 0F				stx    offsetH
   741 0F36 8E 2B 0F				stx    EBPH
   742 0F39 20 15 08				jsr    xbios.xBIOS_GET_BYTE
   743 0F3C 8D AB 0F				sta    offsetL
   744 0F3F 8D 26 0F				sta    EBPL
   745 0F42 20 65 0F				jsr    getgamma
   746 0F45 AD B3 0F				lda    offsetH
   747 0F48 F0 0A				beq    _ceck7f
   748 0F4A C9 7D				cmp    #$7d
   749 0F4C B0 0B				bcs	 plus2
   750 0F4E C9 05				cmp    #$05
   751 0F50 B0 0B				bcs	 plus1
   752 0F52 90 0A				bcc    normal1               ; zawsze
   753 0F54 AD AB 0F		_ceck7f		lda	 offsetL
   754 0F57 30 05				bmi    normal1
   755 0F59 E8			plus2		inx
   756 0F5A D0 01				bne    plus1
   757 0F5C C8					iny
   758 0F5D E8			plus1		inx
   759 0F5E			normal1
   760 0F5E C8			lenffff		iny
   761 0F5F 38					sec
   762 0F60 6E 1C 0F				ror bl
   763 0F63 D0 41				bne domatch	; zawsze
   764
   765 0F65 A9 00		getgamma	lda #$00
   766 0F67 48					pha
   767 0F68 A9 01				lda #$01
   768 0F6A 48					pha
   769 0F6B 20 7F 0F		@		jsr get_token_bit
   770 0F6E BA					tsx
   771 0F6F 3E 01 01				rol $101,x
   772 0F72 3E 02 01				rol $102,x
   773 0F75 20 7F 0F				jsr get_token_bit
   774 0F78 B0 F1				bcs @-
   775 0F7A 68					pla
   776 0F7B AA					tax
   777 0F7C 68					pla
   778 0F7D A8					tay
   779 0F7E 60					rts
   780
   781 0F7F 0E 8E 0F		get_token_bit	asl    token
   782 0F82 D0 09				bne    @+
   783 0F84 08					php
   784 0F85 20 15 08				jsr    xbios.xBIOS_GET_BYTE
   785 0F88 28					plp
   786 0F89 2A					rol    @
   787 0F8A 8D 8E 0F				sta    token
   788 0F8D 60			@		rts
   789 0F8E 00			token		.byte $00
   790
   791 0F8F 8D FF FF		store		sta $ffff
   792 = 0F90			dest_ap		equ *-2
   793 0F92 EE 90 0F D0 03 EE + 		inw dest_ap
   794 0F9A 60					rts
   795
   796 0F9B A2 01		len01		ldx    #$01
   797 0F9D A0 00		len0203		ldy    #$00
   798 0F9F 8D AB 0F				sta    offsetL
   799 0FA2 8C B3 0F				sty    offsetH
   800 0FA5 C8					iny
   801
   802 0FA6 AD 90 0F		domatch		lda dest_ap
   803 0FA9 38					sec
   804 0FAA E9 FF				sbc #$ff
   805 = 0FAB			offsetL		equ *-1
   806 0FAC 8D B8 0F				sta src
   807 0FAF AD 91 0F				lda dest_ap+1
   808 0FB2 E9 FF				sbc #$ff
   809 = 0FB3			offsetH		equ *-1
   810 0FB4 8D B9 0F				sta src+1
   811 0FB7 AD FF FF		source		lda $ffff
   812 = 0FB8			src		equ *-2
   813 0FBA EE B8 0F D0 03 EE + 		inw src
   814 0FC2 20 8F 0F				jsr store
   815 0FC5 CA					dex
   816 0FC6 D0 EF				bne source
   817 0FC8 88					dey
   818 0FC9 D0 EC				bne source
   819 0FCB 4C D9 0E				jmp nxt_token
   820
   821
   822 0FCE A9 00		to_exit		lda #0
   823 0FD0 98					tya
   824 0FD1 99 00 04 C8 D0 FA			sta:rne @buf,y+
   825
   826 0FD7 A2 00				ldx @sp: #0
   827
   828 				; ------------------------------------------------------------
   829
   830 = 128C			FNAM	= DATAORIGIN+$002C
   831 = 128E			OUTPUTPOINTER	= DATAORIGIN+$002E
   832
   833 = 128C			@VarData	= FNAM
   834 = 0004			@VarDataSize	= 4
   835
   836 0FD9			@exit
   837 					.ifdef @new
   838 					lda <@VarData
   839 					sta :ztmp
   840 					lda >@VarData
   841 					ldy #@VarDataSize-1
   842 					jmp @FreeMem
   843 					els
   844 0FD9 60				rts						; ret
   845 					eif
   846 				.endl
   847
   848 				; ------------------------------------------------------------
   849
   850 				.endl							; UNIT XBAPLIB
   851
   852 				; ------------------------------------------------------------
   853
   854 0FDA			.local	CRT						; UNIT
   855
   856 0FDA			.local	DELAY						; PROCEDURE | ASSEMBLER
   857
   858 				; -------------------  ASM Block 00000090  -------------------
   859
   860 0FDA 8A 48			txa:pha
   861
   862 0FDC A2 00			ldx #0
   863 0FDE A0 00			ldy #0
   864
   865 0FE0 CC 91 12		loop	cpy count
   866 0FE3 D0 05			bne @+
   867 0FE5 EC 92 12			cpx count+1
   868 0FE8 F0 46			beq stop
   869
   870 0FEA AD 0B D4 CD 0B D4 + @	:8 lda:cmp:req vcount
   871
   872 102A C8				iny
   873 102B D0 01			sne
   874 102D E8				inx
   875
   876 102E D0 B0			bne loop
   877
   878 1030 68 AA		stop	pla:tax
   879
   880 				; ------------------------------------------------------------
   881
   882 = 1291			COUNT	= DATAORIGIN+$0031
   883
   884 = 1291			@VarData	= COUNT
   885 = 0002			@VarDataSize	= 2
   886
   887 1032			@exit
   888 					.ifdef @new
   889 					lda <@VarData
   890 					sta :ztmp
   891 					lda >@VarData
   892 					ldy #@VarDataSize-1
   893 					jmp @FreeMem
   894 					els
   895 1032 60				rts						; ret
   896 					eif
   897 				.endl
   898
   899 				; ------------------------------------------------------------
   900
   901 = 1290			TEXTATTR	= DATAORIGIN+$0030
   902 = D01F			CONSOL	= $D01F
   903 = 0000			CN_START_SELECT_OPTION	= $00
   904 = 0001			CN_SELECT_OPTION	= $01
   905 = 0002			CN_START_OPTION	= $02
   906 = 0003			CN_OPTION	= $03
   907 = 0004			CN_START_SELECT	= $04
   908 = 0005			CN_SELECT	= $05
   909 = 0006			CN_START	= $06
   910 = 0007			CN_NONE	= $07
   911 = 0000			BW40	= $00
   912 = 0001			CO40	= $01
   913 = 0002			BW80	= $02
   914 = 0003			CO80	= $03
   915 = 0007			MONO	= $07
   916 = 0001			C40	= $01
   917 = 0003			C80	= $03
   918 = 0000			BLACK	= $00
   919 = 000F			WHITE	= $0F
   920 = 0026			RED	= $26
   921 = 00AC			CYAN	= $AC
   922 = 0048			PURPLE	= $48
   923 = 00B6			GREEN	= $B6
   924 = 0086			BLUE	= $86
   925 = 00DC			YELLOW	= $DC
   926 = 0018			ORANGE	= $18
   927 = 00F4			BROWN	= $F4
   928 = 002A			LIGHT_RED	= $2A
   929 = 0004			DARK_GREY	= $04
   930 = 0008			GREY	= $08
   931 = 00BC			LIGHT_GREEN	= $BC
   932 = 009A			LIGHT_BLUE	= $9A
   933 = 000C			LIGHT_GREY	= $0C
   934 = 0080			BLINK	= $80
   935
   936 				.endl							; UNIT CRT
   937
   938 				; ------------------------------------------------------------
   939
   940 1033			.local	CIO						; UNIT
   941
   942 				; ------------------------------------------------------------
   943
   944 				.endl							; UNIT CIO
   945
   946 				; ------------------------------------------------------------
   947
   948 1033			.local	APLIB						; UNIT
   949
   950 				; ------------------------------------------------------------
   951
   952 				.endl							; UNIT APLIB
   953
   954 				; ------------------------------------------------------------
   955
   956 1033			.local	B_UTILS						; UNIT
   957
   958 				; ------------------------------------------------------------
   959
   960 = 1293			BASE64CHARS	= DATAORIGIN+$0033
   961 = 1295			adr.BASE64INV	= [DATAORIGIN+$0035] .array [128]
   962 1033			.var BASE64INV	= adr.BASE64INV .word
   963
   964 = 1033 95 12		BASE64INV
   964 				.endl							; UNIT B_UTILS
   965
   966 				; ------------------------------------------------------------
   967
   968 1035			.local	MISC						; UNIT
   969
   970 1035			.local	DETECTANTIC					; FUNCTION | ASSEMBLER
   971
   972 				; -------------------  ASM Block 00000112  -------------------
   973
   974
   975 				// ANTIC PAL Test for Atari 8-bits
   976 				// (C) 2019 Guillermo Fuenzalida
   977
   978 1035			antic_loop1
   979 1035 AD 0B D4			lda vcount
   980 1038 C9 64			cmp #100
   981 103A 90 F9			bcc antic_loop1		// wait till scanline 200
   982 103C 8D 53 10			sta scanline
   983 103F			antic_loop2
   984 103F AD 0B D4			lda vcount
   985 1042 C9 0A			cmp #10
   986 1044 30 0A			bmi antic_loop2_fin
   987 1046 CD 53 10			cmp scanline
   988 1049 30 F4			bmi antic_loop2
   989 104B 8D 53 10			sta scanline
   990 104E 10 EF			bpl antic_loop2
   991
   992 1050			antic_loop2_fin
   993 1050 A0 00			ldy #$00
   994 1052 A9 00			lda #0
   995 = 1053			scanline equ *-1
   996 1054 C9 87			cmp #135
   997 1056 30 01			bmi ntsc
   998 1058 C8				iny
   999 1059			ntsc
  1000 1059 8C 15 13			sty Result
  1001
  1002
  1003 105C			@exit
  1004
  1005 				; ------------------------------------------------------------
  1006
  1007 = 1315			RESULT	= DATAORIGIN+$00B5
  1008 105C 60				rts						; ret
  1009 				.endl
  1010
  1011 				; ------------------------------------------------------------
  1012
  1013 = 0101			adr.BANKS	= $0101
  1014 105D			.var BANKS	= adr.BANKS .word
  1015 = FFF7			DETECTOS	= $FFF7
  1016
  1017 = 105D 01 01		BANKS
  1017 				.endl							; UNIT MISC
  1018
  1019 				; ------------------------------------------------------------
  1020
  1021 105F			.local	RMT						; UNIT
  1022
  1023 				; ------------------------------------------------------------
  1024 				; ------------------------------------------------------------
  1025 105F			@UnitInit
  1026
  1027 				; optimize FAIL ('MISC.DETECTANTIC', RMT), line = 175
  1028
  1029 105F 20 35 10			jsr MISC.DETECTANTIC
  1030 1062 AD 15 13			lda MISC.DETECTANTIC.RESULT
  1031 1065 F0 05			jeq l_017C
  1032
  1033 				; optimize OK (RMT), line = 176
  1034
  1035 1067 A9 00			lda #$00
  1036 1069 4C 6E 10			jmp l_018A
  1037 106C			l_017C
  1038
  1039 				; optimize OK (RMT), line = 178
  1040
  1041 106C A9 04			lda #$04
  1042 106E			l_018A
  1043 106E 8D 16 13			sta NTSC
  1044
  1045 1071 60				rts
  1046
  1047 				; ------------------------------------------------------------
  1048
  1049 = 1316			NTSC	= DATAORIGIN+$00B6
  1050
  1051 				.endl							; UNIT RMT
  1052
  1053 				; ------------------------------------------------------------
  1054
  1055 1072			.local	B_PMG						; UNIT
  1056
  1057 				; ------------------------------------------------------------
  1058
  1059 = 0001			PMG_VDELAY_M0	= $01
  1060 = 0002			PMG_VDELAY_M1	= $02
  1061 = 0004			PMG_VDELAY_M2	= $04
  1062 = 0008			PMG_VDELAY_M3	= $08
  1063 = 0010			PMG_VDELAY_P0	= $10
  1064 = 0020			PMG_VDELAY_P1	= $20
  1065 = 0040			PMG_VDELAY_P2	= $40
  1066 = 0080			PMG_VDELAY_P3	= $80
  1067 = 0000			PMG_SIZE_NORMAL	= $00
  1068 = 0001			PMG_SIZE_X2	= $01
  1069 = 0003			PMG_SIZE_X4	= $03
  1070 = 0001			PMG_MSIZE0_X2	= $01
  1071 = 0003			PMG_MSIZE0_X4	= $03
  1072 = 0004			PMG_MSIZE1_X2	= $04
  1073 = 000C			PMG_MSIZE1_X4	= $0C
  1074 = 0010			PMG_MSIZE2_X2	= $10
  1075 = 0030			PMG_MSIZE2_X4	= $30
  1076 = 0040			PMG_MSIZE3_X2	= $40
  1077 = 00C0			PMG_MSIZE4_X4	= $C0
  1078 = 0001			PMG_GRACTL_MISSILES	= $01
  1079 = 0002			PMG_GRACTL_PLAYERS	= $02
  1080 = 0004			PMG_GRACTL_LATCH	= $04
  1081 = 0003			PMG_GRACTL_DEFAULT	= $03
  1082 = 0004			PMG_SDMCTL_DMA_MISSILE	= $04
  1083 = 0008			PMG_SDMCTL_DMA_PLAYER	= $08
  1084 = 000C			PMG_SDMCTL_DMA_BOTH	= $0C
  1085 = 0010			PMG_SDMCTL_ONELINE	= $10
  1086 = 0000			PMG_SDMCTL_SCREEN_DISABLED	= $00
  1087 = 0001			PMG_SDMCTL_SCREEN_NARROW	= $01
  1088 = 0002			PMG_SDMCTL_SCREEN_NORMAL	= $02
  1089 = 0003			PMG_SDMCTL_SCREEN_WIDE	= $03
  1090 = 000E			PMG_SDMCTL_DEFAULT	= $0E
  1091 = 0001			PMG_COLLISION_PLAYER_TO_P0	= $01
  1092 = 0002			PMG_COLLISION_PLAYER_TO_P1	= $02
  1093 = 0004			PMG_COLLISION_PLAYER_TO_P2	= $04
  1094 = 0008			PMG_COLLISION_PLAYER_TO_P3	= $08
  1095 = 0010			PMG_5PLAYER	= $10
  1096 = 0020			PMG_OVERLAP	= $20
  1097 = D400			PMG_SDMCTL	= $D400
  1098 = 022F			PMG_SDMCTL_S	= $022F
  1099 = D01B			PMG_GPRIOR	= $D01B
  1100 = 026F			PMG_GPRIOR_S	= $026F
  1101 = D012			PMG_PCOLR0	= $D012
  1102 = D013			PMG_PCOLR1	= $D013
  1103 = D014			PMG_PCOLR2	= $D014
  1104 = D015			PMG_PCOLR3	= $D015
  1105 = D012			adr.PMG_PCOLR	= $D012
  1106 1072			.var PMG_PCOLR	= adr.PMG_PCOLR .word
  1107 = 02C0			PMG_PCOLR0_S	= $02C0
  1108 = 02C1			PMG_PCOLR1_S	= $02C1
  1109 = 02C2			PMG_PCOLR2_S	= $02C2
  1110 = 02C3			PMG_PCOLR3_S	= $02C3
  1111 = 02C0			adr.PMG_PCOLR_S	= $02C0
  1112 1072			.var PMG_PCOLR_S	= adr.PMG_PCOLR_S .word
  1113 = D000			PMG_HPOS0	= $D000
  1114 = D001			PMG_HPOS1	= $D001
  1115 = D002			PMG_HPOS2	= $D002
  1116 = D003			PMG_HPOS3	= $D003
  1117 = D000			adr.PMG_HPOS	= $D000
  1118 1072			.var PMG_HPOS	= adr.PMG_HPOS .word
  1119 = D004			PMG_HPOSM0	= $D004
  1120 = D005			PMG_HPOSM1	= $D005
  1121 = D006			PMG_HPOSM2	= $D006
  1122 = D007			PMG_HPOSM3	= $D007
  1123 = D004			adr.PMG_HPOSM	= $D004
  1124 1072			.var PMG_HPOSM	= adr.PMG_HPOSM .word
  1125 = D008			PMG_SIZEP0	= $D008
  1126 = D009			PMG_SIZEP1	= $D009
  1127 = D00A			PMG_SIZEP2	= $D00A
  1128 = D00B			PMG_SIZEP3	= $D00B
  1129 = D008			adr.PMG_SIZEP	= $D008
  1130 1072			.var PMG_SIZEP	= adr.PMG_SIZEP .word
  1131 = D00C			PMG_SIZEM	= $D00C
  1132 = D00D			PMG_GRAFP0	= $D00D
  1133 = D00E			PMG_GRAFP1	= $D00E
  1134 = D00F			PMG_GRAFP2	= $D00F
  1135 = D010			PMG_GRAFP3	= $D010
  1136 = D00D			adr.PMG_GRAFP	= $D00D
  1137 1072			.var PMG_GRAFP	= adr.PMG_GRAFP .word
  1138 = D011			PMG_GRAFM	= $D011
  1139 = D00C			PMG_P0PL	= $D00C
  1140 = D00D			PMG_P1PL	= $D00D
  1141 = D00E			PMG_P2PL	= $D00E
  1142 = D00F			PMG_P3PL	= $D00F
  1143 = D00C			adr.PMG_PPL	= $D00C
  1144 1072			.var PMG_PPL	= adr.PMG_PPL .word
  1145 = D01C			PMG_VDELAY	= $D01C
  1146 = D01D			PMG_GRACTL	= $D01D
  1147 = D01E			PMG_HITCLR	= $D01E
  1148 = D407			PMG_PMBASE	= $D407
  1149 = 1327			PMG_ONELINE	= DATAORIGIN+$00C7
  1150 = 1328			PMG_BASE	= DATAORIGIN+$00C8
  1151 = 132A			PMG_SIZE	= DATAORIGIN+$00CA
  1152
  1153 = 1072 12 D0		PMG_PCOLR
  1153 = 1074 C0 02		PMG_PCOLR_S
  1153 = 1076 00 D0		PMG_HPOS
  1153 = 1078 04 D0		PMG_HPOSM
  1153 = 107A 08 D0		PMG_SIZEP
  1153 = 107C 0D D0		PMG_GRAFP
  1153 = 107E 0C D0		PMG_PPL
  1153 				.endl							; UNIT B_PMG
  1154
  1155 				; ------------------------------------------------------------
  1156
  1157 1080			.local	DOS						; UNIT
  1158
  1159 				; ------------------------------------------------------------
  1160
  1161 = D014			PALNTSC	= $D014
  1162
  1163 				.endl							; UNIT DOS
  1164
  1165 				; ------------------------------------------------------------
  1166
  1167 1080			.local	STRUTILS					; UNIT
  1168
  1169 				; ------------------------------------------------------------
  1170
  1171 				.endl							; UNIT STRUTILS
  1172
  1173 				; ------------------------------------------------------------
  1174
  1175 1080			.local	SYSUTILS					; UNIT
  1176
  1177 				; ------------------------------------------------------------
  1178
  1179 = 0001			FAREADONLY	= $01
  1180 = 0002			FAHIDDEN	= $02
  1181 = 0004			FASYSFILE	= $04
  1182 = 0008			FAVOLUMEID	= $08
  1183 = 0010			FADIRECTORY	= $10
  1184 = 0020			FAARCHIVE	= $20
  1185 = 003F			FAANYFILE	= $3F
  1186
  1187 				.endl							; UNIT SYSUTILS
  1188
  1189 				; ------------------------------------------------------------
  1190
  1191 1080			.local	B_SYSTEM					; UNIT
  1192
  1193 				; ------------------------------------------------------------
  1194
  1195 = 132C			__NMIEN	= DATAORIGIN+$00CC
  1196 = 0080			PORTB_SELFTEST_OFF	= $80
  1197 = 0002			PORTB_BASIC_OFF	= $02
  1198 = 0001			PORTB_SYSTEM_ON	= $01
  1199
  1200 				.endl							; UNIT B_SYSTEM
  1201
  1202 				; ------------------------------------------------------------
  1203
  1204 1080			.local	B_CRT						; UNIT
  1205
  1206 1080			.local	CRT_WRITE_01CD					; PROCEDURE | OVERLOAD
  1207
  1208 				; ------------------------------------------------------------
  1209
  1210 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
  1211 				; as Pointer
  1212 1080 B5 94			lda :STACKORIGIN,x
  1213 1082 85 82			sta :bp2
  1214 1084 B5 A4			lda :STACKORIGIN+STACKWIDTH,x
  1215 1086 85 83			sta :bp2+1
  1216 1088 A0 00			ldy #$00
  1217 108A B1 82 99 36 13 C8 + 	mva:rne (:bp2),y adr.S,y+
  1218 1092 A9 36 8D CE 10 A9 + 	mwa #adr.S S
  1219 109C CA				dex
  1220 109D			@main
  1221
  1222 				; optimize OK (B_CRT), line = 531
  1223
  1224 109D AD 36 13			lda adr.S
  1225 10A0 85 84			sta SYSTEM.MOVE_00BE.COUNT
  1226 10A2 A9 37			lda <adr.S+$01
  1227 10A4 85 88			sta SYSTEM.MOVE_00BE.SOURCE
  1228 10A6 A9 13			lda >adr.S+$01
  1229 10A8 85 89			sta SYSTEM.MOVE_00BE.SOURCE+1
  1230 10AA AD 33 13			lda CRT_CURSOR
  1231 10AD 85 8C			sta SYSTEM.MOVE_00BE.DEST
  1232 10AF AD 34 13			lda CRT_CURSOR+1
  1233 10B2 85 8D			sta SYSTEM.MOVE_00BE.DEST+1
  1234 10B4 A9 00			lda #$00
  1235 10B6 85 85			sta SYSTEM.MOVE_00BE.COUNT+1
  1236 10B8				.LOCAL +MAIN.SYSTEM.MOVE_00BE
  1237 10B8				m@INLINE
Macro: MAIN.SYSTEM.MOVE_00BE.M@INLINE [Source: title.a65]
     4 10B8 20 A1 0D			jsr @move
  1238 					.ENDL
  1239
  1240 				; optimize OK (B_CRT), line = 532
  1241
  1242 10BB AD 36 13			lda adr.S
  1243 10BE 18 6D 33 13			add CRT_CURSOR
  1244 10C2 8D 33 13			sta CRT_CURSOR
  1245 10C5 AD 34 13			lda CRT_CURSOR+1
  1246 10C8 69 00			adc #$00
  1247 10CA 8D 34 13			sta CRT_CURSOR+1
  1248
  1249 				; ------------------------------------------------------------
  1250
  1251 = 1336			adr.S	= [DATAORIGIN+$00D6] .array [256]
  1252 10CD			.var S	= adr.S .word
  1253
  1254 = 10CE			@VarData	= S
  1255 = 0100			@VarDataSize	= 256
  1256
  1257 10CD			@exit
  1258 					.ifdef @new
  1259 					lda <@VarData
  1260 					sta :ztmp
  1261 					lda >@VarData
  1262 					ldy #@VarDataSize-1
  1263 					jmp @FreeMem
  1264 					els
  1265 10CD 60				rts						; ret
  1266 					eif
  1267 = 10CE 36 13		S
  1267 				.endl
  1268
  1269 				; ------------------------------------------------------------
  1270
  1271 = 0028			DEFAULT_SCREENWIDTH	= $28
  1272 = 0018			DEFAULT_SCREENHEIGHT	= $18
  1273 = 009B			CHAR_RETURN	= $9B
  1274 = 001B			CHAR_ESCAPE	= $1B
  1275 = 007E			CHAR_BACKSPACE	= $7E
  1276 = 007F			CHAR_TAB	= $7F
  1277 = 0081			CHAR_INVERSE	= $81
  1278 = 0082			CHAR_CAPS	= $82
  1279 = 00DB			ICHAR_RETURN	= $DB
  1280 = 005B			ICHAR_ESCAPE	= $5B
  1281 = 007E			ICHAR_BACKSPACE	= $7E
  1282 = 007F			ICHAR_TAB	= $7F
  1283 = 00C1			ICHAR_INVERSE	= $C1
  1284 = 00C2			ICHAR_CAPS	= $C2
  1285 = 0C76			adr.CRT_KEYCODE	= CODEORIGIN+$0076
  1286 10D0			.var CRT_KEYCODE	= adr.CRT_KEYCODE .word
  1287 = 132D			CRT_VRAM	= DATAORIGIN+$00CD
  1288 = 132F			CRT_SIZE	= DATAORIGIN+$00CF
  1289 = 1331			CRT_SCREENWIDTH	= DATAORIGIN+$00D1
  1290 = 1332			CRT_SCREENHEIGHT	= DATAORIGIN+$00D2
  1291 = 1333			CRT_CURSOR	= DATAORIGIN+$00D3
  1292 = 1335			CRT_LEFTMARGIN	= DATAORIGIN+$00D5
  1293 = D209			KBCODE	= $D209
  1294 = D01F			CONSOL	= $D01F
  1295
  1296 = 10D0 76 0C		CRT_KEYCODE
  1296 				.endl							; UNIT B_CRT
  1297
  1298 10D2			.local	DLI_MAP						; PROCEDURE | ASSEMBLER | INTERRUPT
  1299
  1300 				; -------------------  ASM Block 00000158  -------------------
  1301
  1302
  1303 10D2			dli:
  1304 10D2 48 8A 48 98 48	    phr ; store registers
  1305
  1306 10D7			dlijmp:
  1307 10D7 4C DA 10		    jmp dli1
  1308
  1309 10DA			dli1:
  1310 10DA A9 F0		    lda #>MAP_FNT_ADDRESS
  1311 10DC 8D 09 D4		    sta $D409 ; CHBAS_real
  1312 10DF 8D 0A D4		    sta WSYNC
  1313
  1314 10E2 A9 0E 8D 16 D0	    mva #$0e atari.colpf0
  1315 10E7 A9 06 8D 17 D0	    mva #$06 atari.colpf1
  1316 10EC A9 88 8D 18 D0	    mva #$88 atari.colpf2
  1317 10F1 A9 2A 8D 19 D0	    mva #$2a atari.colpf3
  1318 10F6 A9 00 8D 1A D0	    mva #$00 atari.colbk
  1319
  1320 				    ; move PMG to current position
  1321 10FB AD B8 EA		    lda PLAYERPOS_X
  1322 10FE 8D 00 D0		    sta HPOSP0
  1323 1101 8D 01 D0		    sta HPOSP1
  1324 1104 8D 02 D0		    sta HPOSP2
  1325 1107 8D 03 D0		    sta HPOSP3
  1326
  1327 110A A9 1A		    lda #<dli2
  1328 110C 8D D8 10		    sta dlijmp+1
  1329 110F A9 11		    lda #>dli2
  1330 1111 8D D9 10		    sta dlijmp+2
  1331
  1332 1114 68 A8 68 AA 68	    plr
  1333 1119 40			    rti
  1334
  1335 111A			dli2:
  1336 111A A9 FF 8D 17 D0	    mva #$ff atari.colpf1 ; lum
  1337 111F A9 00 8D 18 D0	    mva #$00 atari.colpf2 ; hue
  1338
  1339 1124 A9 CC		    lda #>MAINFONT_ADR
  1340 1126 8D 09 D4		    sta $D409 ; CHBAS_real
  1341
  1342 				    ; deactivate PMG by moving it out of screen
  1343 1129 A9 00		    lda #$0
  1344 112B 8D 00 D0		    sta HPOSP0
  1345 112E 8D 01 D0		    sta HPOSP1
  1346 1131 8D 02 D0		    sta HPOSP2
  1347 1134 8D 03 D0		    sta HPOSP3
  1348 1137 8D 0A D4		    sta WSYNC
  1349
  1350 				    ; next
  1351 113A A9 4A		    lda #<dli3
  1352 113C 8D D8 10		    sta dlijmp+1
  1353 113F A9 11		    lda #>dli3
  1354 1141 8D D9 10		    sta dlijmp+2
  1355
  1356 1144 68 A8 68 AA 68	    plr
  1357 1149 40			    rti
  1358
  1359 114A			dli3:
  1360 114A 8D 0A D4		    sta WSYNC
  1361 114D A9 FF 8D 17 D0	    mva #$ff atari.colpf1 ; lum
  1362 1152 A9 00 8D 18 D0	    mva #$00 atari.colpf2 ; hue
  1363
  1364 1157 A9 DA		    lda #<dli1
  1365 1159 8D D8 10		    sta dlijmp+1
  1366 115C A9 10		    lda #>dli1
  1367 115E 8D D9 10		    sta dlijmp+2
  1368
  1369 1161 68 A8 68 AA 68	    plr
  1370 1166 40			    rti
  1371
  1372 1167 40				rti						; ret
  1373 				.endl
  1374
  1375 1168			.local	DLI_BLACK_CONSOLE				; PROCEDURE | ASSEMBLER | INTERRUPT
  1376
  1377 				; -------------------  ASM Block 00000159  -------------------
  1378
  1379
  1380 1168 48 8A 48 98 48	    phr ; store registers
  1381 116D A9 00 8D 16 D0	    mva #$0 atari.colpf0                 ;---- outline color
  1382 1172 A9 00 8D 17 D0	    mva #$0 atari.colpf1                ;---- dark color
  1383 1177 A9 00 8D 18 D0	    mva #$0 atari.colpf2                ;---- face shadow color
  1384 117C A9 00 8D 1A D0	    mva #$0 atari.colbk                 ;---- back color
  1385 1181 68 A8 68 AA 68	    plr                                  ;---- restore registers
  1386
  1387 1186 40				rti						; ret
  1388 				.endl
  1389
  1390 1187			.local	DLI_CONSOLE					; PROCEDURE | ASSEMBLER | INTERRUPT
  1391
  1392 				; -------------------  ASM Block 00000160  -------------------
  1393
  1394
  1395 1187 48 8A 48 98 48	    phr ; store registers
  1396 118C AD 98 C7 8D 1A D0	    mva loccolbk atari.colbk
  1397 1192 AD 99 C7 8D 16 D0	    mva loccolpf0 atari.colpf0                 ;---- outline color
  1398 1198 AD 9A C7 8D 17 D0	    mva loccolpf1 atari.colpf1                 ;---- outline color
  1399 119E AD 9B C7 8D 18 D0	    mva loccolpf2 atari.colpf2                 ;---- outline color
  1400 11A4 68 A8 68 AA 68	    plr                                  ;---- restore registers
  1401
  1402 11A9 40				rti						; ret
  1403 				.endl
  1404
  1405 11AA			.local	SHOW_LOGO					; PROCEDURE
  1406
  1407 				; optimize OK (title.pas), line = 55
  1408
  1409 11AA A9 51			lda #$51
  1410 11AC 8D 8C 12			sta XBAPLIB.XBUNAPL.FNAM
  1411 11AF A9 0C			lda #$0C
  1412 11B1 8D 8D 12			sta XBAPLIB.XBUNAPL.FNAM+1
  1413 11B4 A9 36			lda #$36
  1414 11B6 8D 8E 12			sta XBAPLIB.XBUNAPL.OUTPUTPOINTER
  1415 11B9 A9 80			lda #$80
  1416 11BB 8D 8F 12			sta XBAPLIB.XBUNAPL.OUTPUTPOINTER+1
  1417 11BE 20 AD 0E			jsr XBAPLIB.XBUNAPL
  1418
  1419 				; optimize OK (title.pas), line = 56
  1420
  1421 11C1 A9 9C			lda #$9C
  1422 11C3 8D C5 02			sta ATARI.COLOR1
  1423
  1424 				; optimize OK (title.pas), line = 57
  1425
  1426 11C6 A9 12			lda #$12
  1427 11C8 8D C6 02			sta ATARI.COLOR2
  1428
  1429 				; optimize OK (title.pas), line = 58
  1430
  1431 11CB 8D C8 02			sta ATARI.COLOR4
  1432
  1433 				; optimize OK (title.pas), line = 59
  1434
  1435 11CE A9 36			lda #$36
  1436 11D0 8D 30 02			sta ATARI.SDLSTL
  1437 11D3 A9 80			lda #$80
  1438 11D5 8D 31 02			sta ATARI.SDLSTL+1
  1439
  1440 				; optimize OK (title.pas), line = 60
  1441
  1442 11D8 A9 50			lda #$50
  1443 11DA 85 58			sta ATARI.SAVMSC
  1444 11DC A9 81			lda #$81
  1445 11DE 85 59			sta ATARI.SAVMSC+1
  1446 11E0			@exit
  1447 					.ifdef @new
  1448 					lda <@VarData
  1449 					sta :ztmp
  1450 					lda >@VarData
  1451 					ldy #@VarDataSize-1
  1452 					jmp @FreeMem
  1453 					els
  1454 11E0 60				rts						; ret
  1455 					eif
  1456 				.endl
  1457 11E1			l_007A
  1458
  1459 				; optimize OK (title.pas), line = 68
  1460
  1461 11E1 A9 22			lda #$22
  1462 11E3 8D 00 D4			sta ATARI.DMACTL
  1463
  1464 				; -------------------  ASM Block 00000161  -------------------
  1465
  1466 				;
  1467 11E6 48			    pha
  1468 11E7 20 2A 08		    jsr xbios.xBIOS_SET_DEFAULT_DEVICE
  1469 11EA A9 00		    lda #$00
  1470 11EC 8D E8 0B		    sta xbios.xIRQEN
  1471 11EF 68			    pla
  1472
  1473 				; optimize OK (title.pas), line = 79
  1474
  1475 11F0 AD 00 08			lda $0800
  1476 11F3 8D 37 14			sta CS
  1477 11F6 AD 01 08			lda $0800+1
  1478 11F9 8D 38 14			sta CS+1
  1479
  1480 				; optimize OK (title.pas), line = 80
  1481
  1482 11FC AD 37 14			lda CS
  1483 11FF C9 78			cmp #$78
  1484 1201 D0 07			jne l_0237x
  1485 1203 AD 38 14			lda CS+1
  1486 1206 C9 42			cmp #$42
  1487 1208 F0 0F			jeq l_0237
  1488 120A			l_0237x
  1489
  1490 				; --- RepeatUntilProlog
  1491 120A			l_0239
  1492
  1493 				; optimize FAIL ('B_CRT.CRT_WRITE_01CD', title.pas), line = 83
  1494
  1495 120A E8				inx
  1496 120B A9 5E 95 94			mva #$5E :STACKORIGIN,x
  1497 120F A9 0C 95 A4			mva #$0C :STACKORIGIN+STACKWIDTH,x
  1498 1213 20 80 10			jsr B_CRT.CRT_WRITE_01CD
  1499
  1500 				; optimize OK (title.pas), line = 84
  1501
  1502 1216 4C 0A 12			jmp l_0239
  1503 1219			l_0237
  1504
  1505 				; optimize FAIL ('SHOW_LOGO', title.pas), line = 86
  1506
  1507 1219 20 AA 11			jsr SHOW_LOGO
  1508
  1509 				; optimize OK (title.pas), line = 89
  1510
  1511 121C A9 B8			lda #$B8
  1512 121E 8D 91 12			sta CRT.DELAY.COUNT
  1513 1221 A9 0B			lda #$0B
  1514 1223 8D 92 12			sta CRT.DELAY.COUNT+1
  1515 1226 20 DA 0F			jsr CRT.DELAY
  1516
  1517 				; -------------------  ASM Block 00000162  -------------------
  1518
  1519 1229 20 00 50		  jsr $5000
  1520
  1521 122C A0 F4			ldy #256-12
  1522 122E B9 75 0B 99 45 13 + 	mva:rne CODEORIGIN+$0069+12-256,y adr.FINALFNAME+12-256,y+
  1523
  1524 				; optimize OK (title.pas), line = 96
  1525
  1526 1237 AD 5E 12			lda FINALFNAME
  1527 123A 8D 88 12			sta XBIOS.XBIOSLOADFILE.FILENAME
  1528 123D AD 5F 12			lda FINALFNAME+1
  1529 1240 8D 89 12			sta XBIOS.XBIOSLOADFILE.FILENAME+1
  1530 1243 20 65 0E			jsr XBIOS.XBIOSLOADFILE
  1531
  1532 				; ------------------------------------------------------------
  1533
  1534 = BE80			BASEADDRESS	= $BE80
  1535 = E700			E7ADR	= $E700
  1536 = 0278			STICK	= $0278
  1537 = D012			PCOLR0	= $D012
  1538 = D013			PCOLR1	= $D013
  1539 = D014			PCOLR2	= $D014
  1540 = D015			PCOLR3	= $D015
  1541 = EAB8			PLAYERPOS_X	= $EAB8
  1542 = C798			LOCCOLBK	= $C798
  1543 = C799			LOCCOLPF0	= $C799
  1544 = C79A			LOCCOLPF1	= $C79A
  1545 = C79B			LOCCOLPF2	= $C79B
  1546 = C800			TXT_ADDRESS	= $C800
  1547 = CC00			MAINFONT_ADR	= $CC00
  1548 = D800			PMG_BASE_ADR	= $D800
  1549 = F000			MAP_FNT_ADDRESS	= $F000
  1550 = F400			MAP_SCR_ADDRESS	= $F400
  1551 = F800			LOC_MAP_ADR	= $F800
  1552 = FC00			DL_CONSOLE_ADR	= $FC00
  1553 = FC40			DL_BLACK_CONSOLE_ADR	= $FC40
  1554 = FC80			DL_MAP_ADR	= $FC80
  1555 = 1FFA			XEX_ADDRESS	= $1FFA
  1556 = 1436			CONSOLESTATE	= DATAORIGIN+$01D6
  1557 = 0C51			adr.D_LOGO	= CODEORIGIN+$0051
  1558 1246			.var D_LOGO	= adr.D_LOGO .word
  1559 = 8036			ADR_LOGO	= $8036
  1560 = 8036			ADR_LOGO_DL	= $8036
  1561 = 8150			ADR_LOGO_GFX	= $8150
  1562 = 009C			L_COLOR1	= $9C
  1563 = 0012			L_COLOR2	= $12
  1564 = 0012			L_COLOR4	= $12
  1565 = 1437			CS	= DATAORIGIN+$01D7
  1566 = 1439			adr.FINALFNAME	= [DATAORIGIN+$01D9] .array [17]
  1567 1246			.var FINALFNAME	= adr.FINALFNAME .word
  1568 1246			@exit
  1569
  1570 1246 A2 00		@halt	ldx #$00
  1571 1248 9A				txs
  1572 					.ifdef MAIN.@DEFINES.ROMOFF
  1573 					inc portb
  1574 					.fi
  1575
  1576 1249 A0 01			ldy #$01
  1577
  1578 124B 60				rts
  1579
  1580 				; ------------------------------------------------------------
  1581
  1582 124C 00 00 00 00 00 00 + IOCB@COPY	:16 brk
  1583
  1584 				; ------------------------------------------------------------
  1585
  1586 125C			.local	@DEFINES
  1587 125C			ATARI
  1588 125C			BASICOFF
  1589 				.endl
  1590
  1591 125C			.local	@RESOURCE
  1592 				.endl
  1593
  1594 = 125C 51 0C		D_LOGO
  1594 = 125E 39 14		FINALFNAME
  1594 				.endl							; MAIN
  1595
  1596 				; ------------------------------------------------------------
  1597 				; ------------------------------------------------------------
  1598
  1599 				.macro	UNITINITIALIZATION
  1600 				
  1601 					.ifdef MAIN.SYSTEM.@UnitInit
  1602 					jsr MAIN.SYSTEM.@UnitInit
  1603 					.fi
  1604 				
  1605 					.ifdef MAIN.ATARI.@UnitInit
  1606 					jsr MAIN.ATARI.@UnitInit
  1607 					.fi
  1608 				
  1609 					.ifdef MAIN.JOYSTICK.@UnitInit
  1610 					jsr MAIN.JOYSTICK.@UnitInit
  1611 					.fi
  1612 				
  1613 					.ifdef MAIN.MATH.@UnitInit
  1614 					jsr MAIN.MATH.@UnitInit
  1615 					.fi
  1616 				
  1617 					.ifdef MAIN.PMG.@UnitInit
  1618 					jsr MAIN.PMG.@UnitInit
  1619 					.fi
  1620 				
  1621 					.ifdef MAIN.XBIOS.@UnitInit
  1622 					jsr MAIN.XBIOS.@UnitInit
  1623 					.fi
  1624 				
  1625 					.ifdef MAIN.XBAPLIB.@UnitInit
  1626 					jsr MAIN.XBAPLIB.@UnitInit
  1627 					.fi
  1628 				
  1629 					.ifdef MAIN.CRT.@UnitInit
  1630 					jsr MAIN.CRT.@UnitInit
  1631 					.fi
  1632 				
  1633 					.ifdef MAIN.CIO.@UnitInit
  1634 					jsr MAIN.CIO.@UnitInit
  1635 					.fi
  1636 				
  1637 					.ifdef MAIN.APLIB.@UnitInit
  1638 					jsr MAIN.APLIB.@UnitInit
  1639 					.fi
  1640 				
  1641 					.ifdef MAIN.B_UTILS.@UnitInit
  1642 					jsr MAIN.B_UTILS.@UnitInit
  1643 					.fi
  1644 				
  1645 					.ifdef MAIN.MISC.@UnitInit
  1646 					jsr MAIN.MISC.@UnitInit
  1647 					.fi
  1648 				
  1649 					.ifdef MAIN.RMT.@UnitInit
  1650 					jsr MAIN.RMT.@UnitInit
  1651 					.fi
  1652 				
  1653 					.ifdef MAIN.B_PMG.@UnitInit
  1654 					jsr MAIN.B_PMG.@UnitInit
  1655 					.fi
  1656 				
  1657 					.ifdef MAIN.DOS.@UnitInit
  1658 					jsr MAIN.DOS.@UnitInit
  1659 					.fi
  1660 				
  1661 					.ifdef MAIN.STRUTILS.@UnitInit
  1662 					jsr MAIN.STRUTILS.@UnitInit
  1663 					.fi
  1664 				
  1665 					.ifdef MAIN.SYSUTILS.@UnitInit
  1666 					jsr MAIN.SYSUTILS.@UnitInit
  1667 					.fi
  1668 				
  1669 					.ifdef MAIN.B_SYSTEM.@UnitInit
  1670 					jsr MAIN.B_SYSTEM.@UnitInit
  1671 					.fi
  1672 				
  1673 					.ifdef MAIN.B_CRT.@UnitInit
  1674 					jsr MAIN.B_CRT.@UnitInit
  1675 					.fi
  1676 				.endm
  1677
  1678 				; ------------------------------------------------------------
  1679
  1680 					ift .SIZEOF(MAIN.SYSTEM) > 0
  1681 					.print 'SYSTEM: ',MAIN.SYSTEM,'..',MAIN.SYSTEM+.SIZEOF(MAIN.SYSTEM)-1
  1681 				SYSTEM: $0E37..$0E58
  1682 					eif
  1683
  1684 					ift .SIZEOF(MAIN.ATARI) > 0
  1685 					.print 'ATARI: ',MAIN.ATARI,'..',MAIN.ATARI+.SIZEOF(MAIN.ATARI)-1
  1686 					eif
  1687
  1688 					ift .SIZEOF(MAIN.JOYSTICK) > 0
  1689 					.print 'JOYSTICK: ',MAIN.JOYSTICK,'..',MAIN.JOYSTICK+.SIZEOF(MAIN.JOYSTICK)-1
  1689 				JOYSTICK: $0E59..$0E60
  1690 					eif
  1691
  1692 					ift .SIZEOF(MAIN.MATH) > 0
  1693 					.print 'MATH: ',MAIN.MATH,'..',MAIN.MATH+.SIZEOF(MAIN.MATH)-1
  1694 					eif
  1695
  1696 					ift .SIZEOF(MAIN.PMG) > 0
  1697 					.print 'PMG: ',MAIN.PMG,'..',MAIN.PMG+.SIZEOF(MAIN.PMG)-1
  1697 				PMG: $0E61..$0E64
  1698 					eif
  1699
  1700 					ift .SIZEOF(MAIN.XBIOS) > 0
  1701 					.print 'XBIOS: ',MAIN.XBIOS,'..',MAIN.XBIOS+.SIZEOF(MAIN.XBIOS)-1
  1701 				XBIOS: $0E65..$0EAC
  1702 					eif
  1703
  1704 					ift .SIZEOF(MAIN.XBAPLIB) > 0
  1705 					.print 'XBAPLIB: ',MAIN.XBAPLIB,'..',MAIN.XBAPLIB+.SIZEOF(MAIN.XBAPLIB)-1
  1705 				XBAPLIB: $0EAD..$0FD9
  1706 					eif
  1707
  1708 					ift .SIZEOF(MAIN.CRT) > 0
  1709 					.print 'CRT: ',MAIN.CRT,'..',MAIN.CRT+.SIZEOF(MAIN.CRT)-1
  1709 				CRT: $0FDA..$1032
  1710 					eif
  1711
  1712 					ift .SIZEOF(MAIN.CIO) > 0
  1713 					.print 'CIO: ',MAIN.CIO,'..',MAIN.CIO+.SIZEOF(MAIN.CIO)-1
  1714 					eif
  1715
  1716 					ift .SIZEOF(MAIN.APLIB) > 0
  1717 					.print 'APLIB: ',MAIN.APLIB,'..',MAIN.APLIB+.SIZEOF(MAIN.APLIB)-1
  1718 					eif
  1719
  1720 					ift .SIZEOF(MAIN.B_UTILS) > 0
  1721 					.print 'B_UTILS: ',MAIN.B_UTILS,'..',MAIN.B_UTILS+.SIZEOF(MAIN.B_UTILS)-1
  1721 				B_UTILS: $1033..$1034
  1722 					eif
  1723
  1724 					ift .SIZEOF(MAIN.MISC) > 0
  1725 					.print 'MISC: ',MAIN.MISC,'..',MAIN.MISC+.SIZEOF(MAIN.MISC)-1
  1725 				MISC: $1035..$105E
  1726 					eif
  1727
  1728 					ift .SIZEOF(MAIN.RMT) > 0
  1729 					.print 'RMT: ',MAIN.RMT,'..',MAIN.RMT+.SIZEOF(MAIN.RMT)-1
  1729 				RMT: $105F..$1071
  1730 					eif
  1731
  1732 					ift .SIZEOF(MAIN.B_PMG) > 0
  1733 					.print 'B_PMG: ',MAIN.B_PMG,'..',MAIN.B_PMG+.SIZEOF(MAIN.B_PMG)-1
  1733 				B_PMG: $1072..$107F
  1734 					eif
  1735
  1736 					ift .SIZEOF(MAIN.DOS) > 0
  1737 					.print 'DOS: ',MAIN.DOS,'..',MAIN.DOS+.SIZEOF(MAIN.DOS)-1
  1738 					eif
  1739
  1740 					ift .SIZEOF(MAIN.STRUTILS) > 0
  1741 					.print 'STRUTILS: ',MAIN.STRUTILS,'..',MAIN.STRUTILS+.SIZEOF(MAIN.STRUTILS)-1
  1742 					eif
  1743
  1744 					ift .SIZEOF(MAIN.SYSUTILS) > 0
  1745 					.print 'SYSUTILS: ',MAIN.SYSUTILS,'..',MAIN.SYSUTILS+.SIZEOF(MAIN.SYSUTILS)-1
  1746 					eif
  1747
  1748 					ift .SIZEOF(MAIN.B_SYSTEM) > 0
  1749 					.print 'B_SYSTEM: ',MAIN.B_SYSTEM,'..',MAIN.B_SYSTEM+.SIZEOF(MAIN.B_SYSTEM)-1
  1750 					eif
  1751
  1752 					ift .SIZEOF(MAIN.B_CRT) > 0
  1753 					.print 'B_CRT: ',MAIN.B_CRT,'..',MAIN.B_CRT+.SIZEOF(MAIN.B_CRT)-1
  1753 				B_CRT: $1080..$10D1
  1754 					eif
  1755
  1756 				.nowarn	.print 'CODE: ',CODEORIGIN,'..',MAIN.@RESOURCE-1
  1756 				CODE: $0C00..$125B
  1757
  1758 				; ------------------------------------------------------------
  1759
  1760 = 1260				?adr = *
  1761 					ift (?adr < ?old_adr) && (?old_adr - ?adr < $120)
  1762 					?adr = ?old_adr
  1763 					eif
  1764
  1765 					org ?adr
  1766 = 1260				?old_adr = *
  1767
  1768 1260			DATAORIGIN
  1769 1260 28 00 18 00 2D 0C + .by  $28 $00 $18 $00 $2D $0C $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  1770 1278 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $02 $08  $80 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  1771 1290 00 00 00 03 0C 00 + .by  $00 $00 $00 <[CODEORIGIN+$0003] >[CODEORIGIN+$0003] $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  1772 12A8 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  1773 12C0 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  1774 12D8 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  1775 12F0 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
  1776 1308 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $1F $1C $1F  $1E $1F $1E $1F $1F $1E $1F $1E
  1777 1320 1F 00 00 00 00 00 + .by  $1F $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $0E
  1778
  1779 = 00CD			VARINITSIZE	= *-DATAORIGIN
  1780 = 01EA			VARDATASIZE	= 490
  1781
  1782 = 144A			PROGRAMSTACK	= DATAORIGIN+VARDATASIZE
  1783
  1784 					.print 'DATA: ',DATAORIGIN,'..',PROGRAMSTACK
  1784 				DATA: $1260..$144A
  1785
  1786 02E0-02E1> F6 0D			run START
  1787
  1788 				; ------------------------------------------------------------
  1789
  1790 				.macro	STATICDATA
  1791 				.by  $00 $00 $40 $41 $42 $43 $44 $45  $46 $47 $48 $49 $4A $4B $4C $4D  $4E $4F $50 $51 $52 $53 $54 $55
  1792 				.by  $56 $57 $58 $59 $5A $61 $62 $63  $64 $65 $66 $67 $68 $69 $6A $6B  $6C $6D $6E $6F $70 $71 $72 $73
  1793 				.by  $74 $75 $76 $77 $78 $79 $7A $30  $31 $32 $33 $34 $35 $36 $37 $38  $39 $2B $2F $00 $04 $54 $52 $55
  1794 				.by  $45 $00 $05 $46 $41 $4C $53 $45  $00 $0B $4C $4F $47 $4F $20 $20  $20 $20 $41 $50 $4C $00 $09 $2E
  1795 				.by  $2F $00 $38 $22 $29 $2F $33 $01  $00 $0B $4D $41 $49 $4E $20 $20  $20 $20 $58 $45 $58 $00 $6C $6A
  1796 				.by  $3B $FF $FF $6B $2B $2A $6F $FF  $70 $75 $9B $69 $2D $3D $76 $FF  $63 $FF $FF $62 $78 $7A $34 $FF
  1797 				.by  $33 $36 $1B $35 $32 $31 $2C $20  $2E $6E $FF $6D $2F $81 $72 $FF  $65 $79 $7F $74 $77 $71 $39 $FF
  1798 				.by  $30 $37 $7E $38 $3E $FF $66 $68  $64 $FF $82 $67 $73 $61 $4C $4A  $3A $FF $FF $4B $5C $5E $4F $FF
  1799 				.by  $50 $55 $FF $49 $5F $7C $56 $FF  $43 $FF $FF $42 $58 $5A $24 $FF  $23 $26 $FF $25 $22 $21 $5B $3B
  1800 				.by  $5D $4E $FF $4D $3F $FF $52 $FF  $45 $59 $FF $54 $57 $51 $28 $FF  $29 $27 $FF $40 $FF $FF $46 $48
  1801 				.by  $44 $FF $FF $47 $53 $41 $FF $FF  $FF $FF $FF $FF $FF $FF $FF $FF  $FF $FF $FF $FF $FF $FF $FF $FF
  1802 				.by  $FF $FF $FF $FF $FF $FF $FF $FF  $FF $FF $FF $FF $FF $FF $FF $FF  $FF $FF $FF $FF $FF $FF $FF $FF
  1803 				.by  $FF $FF $FF $FF $FF $FF $FF $FF  $FF $FF $FF $FF $FF $FF $FF $FF  $FF $FF $FF $FF $FF $FF $FF $FF
  1804 				.by  $FF $FF $FF $FF $FF $FF $FF $FF  $FF $FF $FF $FF $FF $FF $FF $FF  $FF $FF $FF $FF $FF $FF $FF $FF
  1805 				.by  $FF $FF $FF $FF $FF $FF $FF $FF  $FF $FF $FF $FF $FF $FF $FF $FF  $FF $FF $FF $FF $FF $FF $FF $FF
  1806 				.by  $FF $FF $FF $FF $FF $FF $FF $FF  $FF $FF $FF $FF $FF $FF
  1807 				.endm
  1808
  1809 					end
